
BlueDrone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008100  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08008210  08008210  00018210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083e8  080083e8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080083e8  080083e8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083e8  080083e8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080083e8  080083e8  000183e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080083f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000080  08008474  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08008474  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161f6  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003114  00000000  00000000  0003629f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  000393b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  0003a578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7fe  00000000  00000000  0003b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134e6  00000000  00000000  00057e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000972da  00000000  00000000  0006b33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057fc  00000000  00000000  0010266c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080081f8 	.word	0x080081f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080081f8 	.word	0x080081f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__gesf2>:
 8000e58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e5c:	e006      	b.n	8000e6c <__cmpsf2+0x4>
 8000e5e:	bf00      	nop

08000e60 <__lesf2>:
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e002      	b.n	8000e6c <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__cmpsf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	bf18      	it	ne
 8000e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e82:	d011      	beq.n	8000ea8 <__cmpsf2+0x40>
 8000e84:	b001      	add	sp, #4
 8000e86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8a:	bf18      	it	ne
 8000e8c:	ea90 0f01 	teqne	r0, r1
 8000e90:	bf58      	it	pl
 8000e92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e96:	bf88      	it	hi
 8000e98:	17c8      	asrhi	r0, r1, #31
 8000e9a:	bf38      	it	cc
 8000e9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea0:	bf18      	it	ne
 8000ea2:	f040 0001 	orrne.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	d102      	bne.n	8000eb4 <__cmpsf2+0x4c>
 8000eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb2:	d105      	bne.n	8000ec0 <__cmpsf2+0x58>
 8000eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb8:	d1e4      	bne.n	8000e84 <__cmpsf2+0x1c>
 8000eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ebe:	d0e1      	beq.n	8000e84 <__cmpsf2+0x1c>
 8000ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_cfrcmple>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4661      	mov	r1, ip
 8000ece:	e7ff      	b.n	8000ed0 <__aeabi_cfcmpeq>

08000ed0 <__aeabi_cfcmpeq>:
 8000ed0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed2:	f7ff ffc9 	bl	8000e68 <__cmpsf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee0 <__aeabi_fcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffd2 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc8 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmpun>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f50:	d102      	bne.n	8000f58 <__aeabi_fcmpun+0x14>
 8000f52:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f56:	d108      	bne.n	8000f6a <__aeabi_fcmpun+0x26>
 8000f58:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f5c:	d102      	bne.n	8000f64 <__aeabi_fcmpun+0x20>
 8000f5e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f62:	d102      	bne.n	8000f6a <__aeabi_fcmpun+0x26>
 8000f64:	f04f 0000 	mov.w	r0, #0
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0001 	mov.w	r0, #1
 8000f6e:	4770      	bx	lr

08000f70 <__aeabi_f2iz>:
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f78:	d30f      	bcc.n	8000f9a <__aeabi_f2iz+0x2a>
 8000f7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f82:	d90d      	bls.n	8000fa0 <__aeabi_f2iz+0x30>
 8000f84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f8c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f90:	fa23 f002 	lsr.w	r0, r3, r2
 8000f94:	bf18      	it	ne
 8000f96:	4240      	negne	r0, r0
 8000f98:	4770      	bx	lr
 8000f9a:	f04f 0000 	mov.w	r0, #0
 8000f9e:	4770      	bx	lr
 8000fa0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa4:	d101      	bne.n	8000faa <__aeabi_f2iz+0x3a>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	d105      	bne.n	8000fb6 <__aeabi_f2iz+0x46>
 8000faa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fae:	bf08      	it	eq
 8000fb0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fb4:	4770      	bx	lr
 8000fb6:	f04f 0000 	mov.w	r0, #0
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_f2uiz>:
 8000fbc:	0042      	lsls	r2, r0, #1
 8000fbe:	d20e      	bcs.n	8000fde <__aeabi_f2uiz+0x22>
 8000fc0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fc4:	d30b      	bcc.n	8000fde <__aeabi_f2uiz+0x22>
 8000fc6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fce:	d409      	bmi.n	8000fe4 <__aeabi_f2uiz+0x28>
 8000fd0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fdc:	4770      	bx	lr
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4770      	bx	lr
 8000fe4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fe8:	d101      	bne.n	8000fee <__aeabi_f2uiz+0x32>
 8000fea:	0242      	lsls	r2, r0, #9
 8000fec:	d102      	bne.n	8000ff4 <__aeabi_f2uiz+0x38>
 8000fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff2:	4770      	bx	lr
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_ZN7CommandC1Ev>:
#include <string.h>
#include "Command.h"
#include "Parameter.h"

Command::Command(){}
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	63da      	str	r2, [r3, #60]	; 0x3c
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <_ZN7CommandD1Ev>:

Command::~Command(){
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    for(int i=0; i< params_size ; i++) delete params[i];
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	429a      	cmp	r2, r3
 8001030:	da10      	bge.n	8001054 <_ZN7CommandD1Ev+0x38>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800103a:	2c00      	cmp	r4, #0
 800103c:	d006      	beq.n	800104c <_ZN7CommandD1Ev+0x30>
 800103e:	4620      	mov	r0, r4
 8001040:	f000 f885 	bl	800114e <_ZN9ParameterD1Ev>
 8001044:	2108      	movs	r1, #8
 8001046:	4620      	mov	r0, r4
 8001048:	f006 f8fa 	bl	8007240 <_ZdlPvj>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3301      	adds	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e7e9      	b.n	8001028 <_ZN7CommandD1Ev+0xc>
    delete[] name;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <_ZN7CommandD1Ev+0x4a>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001060:	4618      	mov	r0, r3
 8001062:	f006 f8ef 	bl	8007244 <_ZdaPv>
}
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bd90      	pop	{r4, r7, pc}

08001070 <_ZN7Command14setCommandNameEPch>:
// Command& Command::operator=(const Command &){
//     return *this;
// }


void Command::setCommandName(char* command_name, uint8_t size){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	71fb      	strb	r3, [r7, #7]
    this->name = new char[size];
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4618      	mov	r0, r3
 8001082:	f006 f901 	bl	8007288 <_Znaj>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	63da      	str	r2, [r3, #60]	; 0x3c
    memcpy(this->name, command_name, size);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001092:	79fa      	ldrb	r2, [r7, #7]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	4618      	mov	r0, r3
 8001098:	f006 fb32 	bl	8007700 <memcpy>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_ZN7Command13getNameAsCharEv>:
const char* Command::getCommandName(){
    return name;
}

char Command::getNameAsChar()
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    return *name;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b0:	781b      	ldrb	r3, [r3, #0]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <_ZN7Command8addParamEP9Parameter>:

void Command::addParam(Parameter* param){
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
    params[params_size] = param;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    params_size++;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <_ZN7Command8getParamEh>:


Parameter* Command::getParam(uint8_t index){
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	70fb      	strb	r3, [r7, #3]
    return (index < params_size)? params[index] : nullptr;
 80010f2:	78fa      	ldrb	r2, [r7, #3]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	429a      	cmp	r2, r3
 80010fa:	da04      	bge.n	8001106 <_ZN7Command8getParamEh+0x20>
 80010fc:	78fa      	ldrb	r2, [r7, #3]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	e000      	b.n	8001108 <_ZN7Command8getParamEh+0x22>
 8001106:	2300      	movs	r3, #0
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <_ZN9ParameterC1EPch>:
#include"Parameter.h"
#include<string.h>
#include<stdlib.h>


Parameter::Parameter(char* bytes, uint8_t size){
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	4613      	mov	r3, r2
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]

    //allocate the right amount of memory for parameter data
    data = new char[size];
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f006 f8ad 	bl	8007288 <_Znaj>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	601a      	str	r2, [r3, #0]
    //copy by block (fastest way possible)
    memcpy(data,bytes, size);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	79fa      	ldrb	r2, [r7, #7]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	4618      	mov	r0, r3
 8001140:	f006 fade 	bl	8007700 <memcpy>
    //set data type (needed later for correction)
}
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZN9ParameterD1Ev>:

Parameter::~Parameter(){
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
    delete[] data;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <_ZN9ParameterD1Ev+0x1a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f006 f86e 	bl	8007244 <_ZdaPv>
}
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZN9Parameter11getIntValueEv>:
char Parameter::getCharValue()
{
    return *(data);
}

int Parameter::getIntValue(){
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
    char* c = data;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	60fb      	str	r3, [r7, #12]
    return atoi(c);
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f006 fa7e 	bl	8007682 <atoi>
 8001186:	4603      	mov	r3, r0
    // int val = 0;
    // while( *c != '\0') {
    //     val = val*10 + (*c++ -'0');
    // }
    // return val;
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN11ProtoHelperC1Ev>:


//========================== Functions implementation ==============================


ProtoHelper::ProtoHelper(){}
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	721a      	strb	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <_ZN11ProtoHelperD1Ev>:

ProtoHelper::~ProtoHelper(){
 80011aa:	b590      	push	{r4, r7, lr}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    delete current_command;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68dc      	ldr	r4, [r3, #12]
 80011b6:	2c00      	cmp	r4, #0
 80011b8:	d006      	beq.n	80011c8 <_ZN11ProtoHelperD1Ev+0x1e>
 80011ba:	4620      	mov	r0, r4
 80011bc:	f7ff ff2e 	bl	800101c <_ZN7CommandD1Ev>
 80011c0:	2144      	movs	r1, #68	; 0x44
 80011c2:	4620      	mov	r0, r4
 80011c4:	f006 f83c 	bl	8007240 <_ZdlPvj>
}
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}
	...

080011d4 <__tcf_0>:


ProtoHelper& ProtoHelper::getInstance() {
    static ProtoHelper instance_;
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4801      	ldr	r0, [pc, #4]	; (80011e0 <__tcf_0+0xc>)
 80011da:	f7ff ffe6 	bl	80011aa <_ZN11ProtoHelperD1Ev>
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000009c 	.word	0x2000009c

080011e4 <_ZN11ProtoHelper11getInstanceEv>:
ProtoHelper& ProtoHelper::getInstance() {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
    static ProtoHelper instance_;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <_ZN11ProtoHelper11getInstanceEv+0x50>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f3bf 8f5b 	dmb	ish
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	bf0c      	ite	eq
 80011fa:	2301      	moveq	r3, #1
 80011fc:	2300      	movne	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <_ZN11ProtoHelper11getInstanceEv+0x48>
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <_ZN11ProtoHelper11getInstanceEv+0x50>)
 8001206:	f006 f81f 	bl	8007248 <__cxa_guard_acquire>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf14      	ite	ne
 8001210:	2301      	movne	r3, #1
 8001212:	2300      	moveq	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d008      	beq.n	800122c <_ZN11ProtoHelper11getInstanceEv+0x48>
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <_ZN11ProtoHelper11getInstanceEv+0x54>)
 800121c:	f7ff ffb8 	bl	8001190 <_ZN11ProtoHelperC1Ev>
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <_ZN11ProtoHelper11getInstanceEv+0x50>)
 8001222:	f006 f81d 	bl	8007260 <__cxa_guard_release>
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <_ZN11ProtoHelper11getInstanceEv+0x58>)
 8001228:	f006 fa25 	bl	8007676 <atexit>
    return instance_;
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <_ZN11ProtoHelper11getInstanceEv+0x54>)
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200000ac 	.word	0x200000ac
 8001238:	2000009c 	.word	0x2000009c
 800123c:	080011d5 	.word	0x080011d5

08001240 <_ZN11ProtoHelper28setOnCommandRecievedCallabckEPFvP7CommandE>:

void ProtoHelper::setOnCommandRecievedCallabck(void (*callback)(Command* cmnd)){
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
    this->callback = callback;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
	...

0800125c <_ZN11ProtoHelper8loadByteEc>:


    //here we parse the command
void ProtoHelper::loadByte(char byte){
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]

    static char     str_buff[27]; //buffer for the current parameter or cmnd name 
    static uint8_t  index = 0; //index for current buffer chararchter

    switch (current_state) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7a1b      	ldrb	r3, [r3, #8]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d078      	beq.n	8001362 <_ZN11ProtoHelper8loadByteEc+0x106>
 8001270:	2b02      	cmp	r3, #2
 8001272:	f300 80cd 	bgt.w	8001410 <_ZN11ProtoHelper8loadByteEc+0x1b4>
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <_ZN11ProtoHelper8loadByteEc+0x24>
 800127a:	2b01      	cmp	r3, #1
 800127c:	d012      	beq.n	80012a4 <_ZN11ProtoHelper8loadByteEc+0x48>
        str_buff[index] = (char)byte;
        index++;
        break;
    }

}
 800127e:	e0c7      	b.n	8001410 <_ZN11ProtoHelper8loadByteEc+0x1b4>
        if(byte == '>') {
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	2b3e      	cmp	r3, #62	; 0x3e
 8001284:	f040 80bd 	bne.w	8001402 <_ZN11ProtoHelper8loadByteEc+0x1a6>
            current_command = new Command(); 
 8001288:	2044      	movs	r0, #68	; 0x44
 800128a:	f005 ffec 	bl	8007266 <_Znwj>
 800128e:	4603      	mov	r3, r0
 8001290:	461c      	mov	r4, r3
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff feb2 	bl	8000ffc <_ZN7CommandC1Ev>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	60dc      	str	r4, [r3, #12]
            current_state = OPCODE_CONCAT;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	721a      	strb	r2, [r3, #8]
        break;
 80012a2:	e0ae      	b.n	8001402 <_ZN11ProtoHelper8loadByteEc+0x1a6>
        if(index >= 27) break;
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b1a      	cmp	r3, #26
 80012aa:	f200 80ac 	bhi.w	8001406 <_ZN11ProtoHelper8loadByteEc+0x1aa>
            if(byte == '<')
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	2b3c      	cmp	r3, #60	; 0x3c
 80012b2:	d12b      	bne.n	800130c <_ZN11ProtoHelper8loadByteEc+0xb0>
            str_buff[index] = '\0'; // don't forget to terminate the string !
 80012b4:	4b58      	ldr	r3, [pc, #352]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b58      	ldr	r3, [pc, #352]	; (800141c <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 80012bc:	2100      	movs	r1, #0
 80012be:	5499      	strb	r1, [r3, r2]
            index++;
 80012c0:	4b55      	ldr	r3, [pc, #340]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80012ca:	701a      	strb	r2, [r3, #0]
            current_command->setCommandName(str_buff, index);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4a51      	ldr	r2, [pc, #324]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80012d2:	7812      	ldrb	r2, [r2, #0]
 80012d4:	4951      	ldr	r1, [pc, #324]	; (800141c <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff feca 	bl	8001070 <_ZN7Command14setCommandNameEPch>
            current_state = BEGIN;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	721a      	strb	r2, [r3, #8]
            callback(current_command);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68d2      	ldr	r2, [r2, #12]
 80012ea:	4610      	mov	r0, r2
 80012ec:	4798      	blx	r3
            delete current_command;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68dc      	ldr	r4, [r3, #12]
 80012f2:	2c00      	cmp	r4, #0
 80012f4:	d006      	beq.n	8001304 <_ZN11ProtoHelper8loadByteEc+0xa8>
 80012f6:	4620      	mov	r0, r4
 80012f8:	f7ff fe90 	bl	800101c <_ZN7CommandD1Ev>
 80012fc:	2144      	movs	r1, #68	; 0x44
 80012fe:	4620      	mov	r0, r4
 8001300:	f005 ff9e 	bl	8007240 <_ZdlPvj>
            index = 0;
 8001304:	4b44      	ldr	r3, [pc, #272]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
            break;
 800130a:	e081      	b.n	8001410 <_ZN11ProtoHelper8loadByteEc+0x1b4>
        if(byte == ','){
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	2b2c      	cmp	r3, #44	; 0x2c
 8001310:	d11a      	bne.n	8001348 <_ZN11ProtoHelper8loadByteEc+0xec>
            str_buff[index] = '\0'; // don't forget to terminate the string !
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	4b40      	ldr	r3, [pc, #256]	; (800141c <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 800131a:	2100      	movs	r1, #0
 800131c:	5499      	strb	r1, [r3, r2]
            index++;
 800131e:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b3c      	ldr	r3, [pc, #240]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001328:	701a      	strb	r2, [r3, #0]
            current_command->setCommandName(str_buff, index);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	4a3a      	ldr	r2, [pc, #232]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	493a      	ldr	r1, [pc, #232]	; (800141c <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fe9b 	bl	8001070 <_ZN7Command14setCommandNameEPch>
            current_state = PARAM_CONCAT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2202      	movs	r2, #2
 800133e:	721a      	strb	r2, [r3, #8]
            index = 0;
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
            break;
 8001346:	e063      	b.n	8001410 <_ZN11ProtoHelper8loadByteEc+0x1b4>
        str_buff[index] = byte;
 8001348:	4b33      	ldr	r3, [pc, #204]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	4a33      	ldr	r2, [pc, #204]	; (800141c <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	5453      	strb	r3, [r2, r1]
        index++;
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 800135e:	701a      	strb	r2, [r3, #0]
        break;
 8001360:	e056      	b.n	8001410 <_ZN11ProtoHelper8loadByteEc+0x1b4>
        if(index >= 27) break;
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b1a      	cmp	r3, #26
 8001368:	d84f      	bhi.n	800140a <_ZN11ProtoHelper8loadByteEc+0x1ae>
        if(byte == ',' || byte == '<')
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	2b2c      	cmp	r3, #44	; 0x2c
 800136e:	d002      	beq.n	8001376 <_ZN11ProtoHelper8loadByteEc+0x11a>
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	2b3c      	cmp	r3, #60	; 0x3c
 8001374:	d138      	bne.n	80013e8 <_ZN11ProtoHelper8loadByteEc+0x18c>
            str_buff[index] = '\0'; // don't forget to terminate the string !
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 800137e:	2100      	movs	r1, #0
 8001380:	5499      	strb	r1, [r3, r2]
            index++;
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 800138c:	701a      	strb	r2, [r3, #0]
            current_command->addParam(new Parameter(str_buff,index));//index represents nbrBytes || size
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68dc      	ldr	r4, [r3, #12]
 8001392:	2008      	movs	r0, #8
 8001394:	f005 ff67 	bl	8007266 <_Znwj>
 8001398:	4603      	mov	r3, r0
 800139a:	461d      	mov	r5, r3
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	491e      	ldr	r1, [pc, #120]	; (800141c <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 80013a4:	4628      	mov	r0, r5
 80013a6:	f7ff feb4 	bl	8001112 <_ZN9ParameterC1EPch>
 80013aa:	4629      	mov	r1, r5
 80013ac:	4620      	mov	r0, r4
 80013ae:	f7ff fe85 	bl	80010bc <_ZN7Command8addParamEP9Parameter>
            index = 0;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
            if(byte == '<')
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	2b3c      	cmp	r3, #60	; 0x3c
 80013bc:	d127      	bne.n	800140e <_ZN11ProtoHelper8loadByteEc+0x1b2>
                current_state = BEGIN;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	721a      	strb	r2, [r3, #8]
                callback(current_command);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	68d2      	ldr	r2, [r2, #12]
 80013cc:	4610      	mov	r0, r2
 80013ce:	4798      	blx	r3
                delete current_command;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68dc      	ldr	r4, [r3, #12]
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d01a      	beq.n	800140e <_ZN11ProtoHelper8loadByteEc+0x1b2>
 80013d8:	4620      	mov	r0, r4
 80013da:	f7ff fe1f 	bl	800101c <_ZN7CommandD1Ev>
 80013de:	2144      	movs	r1, #68	; 0x44
 80013e0:	4620      	mov	r0, r4
 80013e2:	f005 ff2d 	bl	8007240 <_ZdlPvj>
            break;
 80013e6:	e012      	b.n	800140e <_ZN11ProtoHelper8loadByteEc+0x1b2>
        str_buff[index] = (char)byte;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	5453      	strb	r3, [r2, r1]
        index++;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80013fe:	701a      	strb	r2, [r3, #0]
        break;
 8001400:	e006      	b.n	8001410 <_ZN11ProtoHelper8loadByteEc+0x1b4>
        break;
 8001402:	bf00      	nop
 8001404:	e004      	b.n	8001410 <_ZN11ProtoHelper8loadByteEc+0x1b4>
        if(index >= 27) break;
 8001406:	bf00      	nop
 8001408:	e002      	b.n	8001410 <_ZN11ProtoHelper8loadByteEc+0x1b4>
        if(index >= 27) break;
 800140a:	bf00      	nop
 800140c:	e000      	b.n	8001410 <_ZN11ProtoHelper8loadByteEc+0x1b4>
            break;
 800140e:	bf00      	nop
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bdb0      	pop	{r4, r5, r7, pc}
 8001418:	200000cb 	.word	0x200000cb
 800141c:	200000b0 	.word	0x200000b0

08001420 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f005 ff2d 	bl	80072a0 <asinf>
 8001446:	4603      	mov	r3, r0
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f005 ff47 	bl	80072ec <sqrtf>
 800145e:	4603      	mov	r3, r0
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <_ZN6I2CIMU18setI2cErrorHandlerEPFvvE>:

};



void I2CIMU::setI2cErrorHandler(void (*err_handler)(void)){
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
    this->err_handler = err_handler;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <_ZN6I2CIMUC1Ev>:

I2CIMU::I2CIMU(){
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3380      	adds	r3, #128	; 0x80
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3390      	adds	r3, #144	; 0x90
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	33a8      	adds	r3, #168	; 0xa8
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	33b4      	adds	r3, #180	; 0xb4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

}
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
	...

080014f0 <_ZN6I2CIMU11getInstanceEv>:

I2CIMU& I2CIMU::getInstance(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    static I2CIMU instance;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <_ZN6I2CIMU11getInstanceEv+0x48>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f3bf 8f5b 	dmb	ish
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	bf0c      	ite	eq
 8001506:	2301      	moveq	r3, #1
 8001508:	2300      	movne	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d010      	beq.n	8001532 <_ZN6I2CIMU11getInstanceEv+0x42>
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <_ZN6I2CIMU11getInstanceEv+0x48>)
 8001512:	f005 fe99 	bl	8007248 <__cxa_guard_acquire>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf14      	ite	ne
 800151c:	2301      	movne	r3, #1
 800151e:	2300      	moveq	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <_ZN6I2CIMU11getInstanceEv+0x42>
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <_ZN6I2CIMU11getInstanceEv+0x4c>)
 8001528:	f7ff ffac 	bl	8001484 <_ZN6I2CIMUC1Ev>
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <_ZN6I2CIMU11getInstanceEv+0x48>)
 800152e:	f005 fe97 	bl	8007260 <__cxa_guard_release>
    return instance;
 8001532:	4b02      	ldr	r3, [pc, #8]	; (800153c <_ZN6I2CIMU11getInstanceEv+0x4c>)
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200001a8 	.word	0x200001a8
 800153c:	200000d0 	.word	0x200000d0

08001540 <_ZN6I2CIMU4initEf>:


void I2CIMU::init(float controller_freq){
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af04      	add	r7, sp, #16
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
    //init gyro scale
    gyro_scale  = 1.0f/(controller_freq *  GYRO_SCALE);
 800154a:	6838      	ldr	r0, [r7, #0]
 800154c:	f7fe ff6c 	bl	8000428 <__aeabi_f2d>
 8001550:	a353      	add	r3, pc, #332	; (adr r3, 80016a0 <_ZN6I2CIMU4initEf+0x160>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7fe ffbf 	bl	80004d8 <__aeabi_dmul>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	f04f 0000 	mov.w	r0, #0
 8001562:	4953      	ldr	r1, [pc, #332]	; (80016b0 <_ZN6I2CIMU4initEf+0x170>)
 8001564:	f7ff f8e2 	bl	800072c <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff f9c4 	bl	80008fc <__aeabi_d2f>
 8001574:	4602      	mov	r2, r0
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	669a      	str	r2, [r3, #104]	; 0x68
    gyro_scale_pi  = gyro_scale * M_PI / 180.0f; // scale gyro val, mult by dt and convert to radians
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ff52 	bl	8000428 <__aeabi_f2d>
 8001584:	a348      	add	r3, pc, #288	; (adr r3, 80016a8 <_ZN6I2CIMU4initEf+0x168>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7fe ffa5 	bl	80004d8 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <_ZN6I2CIMU4initEf+0x174>)
 800159c:	f7ff f8c6 	bl	800072c <__aeabi_ddiv>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff f9a8 	bl	80008fc <__aeabi_d2f>
 80015ac:	4602      	mov	r2, r0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	66da      	str	r2, [r3, #108]	; 0x6c

    // init I2C1 peripheral
    hi2c1.Instance = I2C1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a40      	ldr	r2, [pc, #256]	; (80016b8 <_ZN6I2CIMU4initEf+0x178>)
 80015b6:	615a      	str	r2, [r3, #20]
    hi2c1.Init.ClockSpeed = 400000;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a40      	ldr	r2, [pc, #256]	; (80016bc <_ZN6I2CIMU4initEf+0x17c>)
 80015bc:	619a      	str	r2, [r3, #24]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    hi2c1.Init.OwnAddress1 = 0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c1.Init.OwnAddress2 = 0;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34

    HAL_I2C_Init(&hi2c1) ;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3314      	adds	r3, #20
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 fe36 	bl	8004260 <HAL_I2C_Init>

    // setup the MPU6050 by setting the control registers    
    uint8_t  mpu6050_config   = 0x03;
 80015f4:	2303      	movs	r3, #3
 80015f6:	73fb      	strb	r3, [r7, #15]
    uint8_t  gyro_config      = 0x08; // 65.5
 80015f8:	2308      	movs	r3, #8
 80015fa:	73bb      	strb	r3, [r7, #14]
    uint8_t  acc_config       = 0x10; // -+8g
 80015fc:	2310      	movs	r3, #16
 80015fe:	737b      	strb	r3, [r7, #13]
    uint8_t  power_config     = 0x00; // TODO: maybe turn off the temp sensor with 0x08 config value
 8001600:	2300      	movs	r3, #0
 8001602:	733b      	strb	r3, [r7, #12]
    // configure the power
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, POWER_CONFIG_ADDRESS, 1,&power_config, 1, I2C_TIMOUT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f103 0014 	add.w	r0, r3, #20
 800160a:	2364      	movs	r3, #100	; 0x64
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	2301      	movs	r3, #1
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	226b      	movs	r2, #107	; 0x6b
 800161c:	21d0      	movs	r1, #208	; 0xd0
 800161e:	f002 ff63 	bl	80044e8 <HAL_I2C_Mem_Write>
	// configure the mpu6050,
    //TODO: try other higher DLPF params for less noise
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, MPU_CONFIG_ADDRRESS, 1, &mpu6050_config, 1, I2C_TIMOUT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f103 0014 	add.w	r0, r3, #20
 8001628:	2364      	movs	r3, #100	; 0x64
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	2301      	movs	r3, #1
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	f107 030f 	add.w	r3, r7, #15
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2301      	movs	r3, #1
 8001638:	221a      	movs	r2, #26
 800163a:	21d0      	movs	r1, #208	; 0xd0
 800163c:	f002 ff54 	bl	80044e8 <HAL_I2C_Mem_Write>
	// configure the gyro, 
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, GYRO_CONFIG_ADDRESS, 1, &gyro_config, 1, I2C_TIMOUT);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f103 0014 	add.w	r0, r3, #20
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	2301      	movs	r3, #1
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	f107 030e 	add.w	r3, r7, #14
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2301      	movs	r3, #1
 8001656:	221b      	movs	r2, #27
 8001658:	21d0      	movs	r1, #208	; 0xd0
 800165a:	f002 ff45 	bl	80044e8 <HAL_I2C_Mem_Write>
	// configure the accelerometer 
	if(
    HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, ACC_CONFIG_ADDRESS, 1, &acc_config, 1, I2C_TIMOUT) != HAL_OK
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f103 0014 	add.w	r0, r3, #20
 8001664:	2364      	movs	r3, #100	; 0x64
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	2301      	movs	r3, #1
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	f107 030d 	add.w	r3, r7, #13
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	221c      	movs	r2, #28
 8001676:	21d0      	movs	r1, #208	; 0xd0
 8001678:	f002 ff36 	bl	80044e8 <HAL_I2C_Mem_Write>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	bf14      	ite	ne
 8001682:	2301      	movne	r3, #1
 8001684:	2300      	moveq	r3, #0
 8001686:	b2db      	uxtb	r3, r3
	if(
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <_ZN6I2CIMU4initEf+0x154>
    ) err_handler(); // check last I2C write for timout errors
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001692:	4798      	blx	r3

}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	f3af 8000 	nop.w
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40506000 	.word	0x40506000
 80016a8:	54442d18 	.word	0x54442d18
 80016ac:	400921fb 	.word	0x400921fb
 80016b0:	3ff00000 	.word	0x3ff00000
 80016b4:	40668000 	.word	0x40668000
 80016b8:	40005400 	.word	0x40005400
 80016bc:	00061a80 	.word	0x00061a80

080016c0 <_ZN6I2CIMU5resetEv>:

//reset all output vals to zero
void I2CIMU::reset(){
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	angle_pitch = angle_roll =  0;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	60da      	str	r2, [r3, #12]
	gyro_pitch_rate_pid = gyro_roll_rate_pid = gyro_yaw_rate_pid = 0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	601a      	str	r2, [r3, #0]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <_ZN6I2CIMU15calibrateSensorEi>:

void I2CIMU::calibrateSensor(int cal_samples){
 80016fa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af04      	add	r7, sp, #16
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
    uint8_t gyro_data[6];

    //reset cal vals in case this is another calibration
	gyro_axis_cal[0] = gyro_axis_cal[1] = gyro_axis_cal[2] = 0 ;
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	acc_axis_cal[0] = acc_axis_cal[1] = acc_axis_cal[2] = 0 ;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	//Accelerometer calibration
	for (uint16_t i = 0; i < cal_samples; i++) {
 800174e:	2300      	movs	r3, #0
 8001750:	83fb      	strh	r3, [r7, #30]
 8001752:	8bfb      	ldrh	r3, [r7, #30]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	dd4d      	ble.n	80017f6 <_ZN6I2CIMU15calibrateSensorEi+0xfc>
		// read 6 bytes of data starting from GYRO_DATA_START_ADDRESS
		HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, GYRO_DATA_START_ADDRESS, 1, gyro_data, 6, I2C_TIMOUT);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f103 0014 	add.w	r0, r3, #20
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	9302      	str	r3, [sp, #8]
 8001764:	2306      	movs	r3, #6
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	2243      	movs	r2, #67	; 0x43
 8001772:	21d0      	movs	r1, #208	; 0xd0
 8001774:	f002 ffb2 	bl	80046dc <HAL_I2C_Mem_Read>
		gyro_axis_cal[0] += (short)(gyro_data[0] << 8 | gyro_data[1]);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800177e:	7d3b      	ldrb	r3, [r7, #20]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b21a      	sxth	r2, r3
 8001784:	7d7b      	ldrb	r3, [r7, #21]
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	b21b      	sxth	r3, r3
 800178c:	b21a      	sxth	r2, r3
 800178e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001792:	eb10 0a02 	adds.w	sl, r0, r2
 8001796:	eb41 0b03 	adc.w	fp, r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	e9c3 ab24 	strd	sl, fp, [r3, #144]	; 0x90
		gyro_axis_cal[1] += (short)(gyro_data[2] << 8 | gyro_data[3]);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 80017a6:	7dbb      	ldrb	r3, [r7, #22]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017ba:	eb10 0802 	adds.w	r8, r0, r2
 80017be:	eb41 0903 	adc.w	r9, r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	e9c3 8926 	strd	r8, r9, [r3, #152]	; 0x98
		gyro_axis_cal[2] += (short)(gyro_data[4] << 8 | gyro_data[5]);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 80017ce:	7e3b      	ldrb	r3, [r7, #24]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	7e7b      	ldrb	r3, [r7, #25]
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	4313      	orrs	r3, r2
 80017da:	b21b      	sxth	r3, r3
 80017dc:	b21a      	sxth	r2, r3
 80017de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017e2:	1884      	adds	r4, r0, r2
 80017e4:	eb41 0503 	adc.w	r5, r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	e9c3 4528 	strd	r4, r5, [r3, #160]	; 0xa0
	for (uint16_t i = 0; i < cal_samples; i++) {
 80017ee:	8bfb      	ldrh	r3, [r7, #30]
 80017f0:	3301      	adds	r3, #1
 80017f2:	83fb      	strh	r3, [r7, #30]
 80017f4:	e7ad      	b.n	8001752 <_ZN6I2CIMU15calibrateSensorEi+0x58>
	}
	gyro_axis_cal[0] = (int)((float) gyro_axis_cal[0] / cal_samples);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f99c 	bl	8000b3c <__aeabi_l2f>
 8001804:	4604      	mov	r4, r0
 8001806:	6838      	ldr	r0, [r7, #0]
 8001808:	f7ff f982 	bl	8000b10 <__aeabi_i2f>
 800180c:	4603      	mov	r3, r0
 800180e:	4619      	mov	r1, r3
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fa85 	bl	8000d20 <__aeabi_fdiv>
 8001816:	4603      	mov	r3, r0
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fba9 	bl	8000f70 <__aeabi_f2iz>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	gyro_axis_cal[1] = (int)((float) gyro_axis_cal[1] / cal_samples);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f981 	bl	8000b3c <__aeabi_l2f>
 800183a:	4604      	mov	r4, r0
 800183c:	6838      	ldr	r0, [r7, #0]
 800183e:	f7ff f967 	bl	8000b10 <__aeabi_i2f>
 8001842:	4603      	mov	r3, r0
 8001844:	4619      	mov	r1, r3
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff fa6a 	bl	8000d20 <__aeabi_fdiv>
 800184c:	4603      	mov	r3, r0
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fb8e 	bl	8000f70 <__aeabi_f2iz>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	gyro_axis_cal[2] = (int)((float) gyro_axis_cal[2] / cal_samples);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff f966 	bl	8000b3c <__aeabi_l2f>
 8001870:	4604      	mov	r4, r0
 8001872:	6838      	ldr	r0, [r7, #0]
 8001874:	f7ff f94c 	bl	8000b10 <__aeabi_i2f>
 8001878:	4603      	mov	r3, r0
 800187a:	4619      	mov	r1, r3
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff fa4f 	bl	8000d20 <__aeabi_fdiv>
 8001882:	4603      	mov	r3, r0
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fb73 	bl	8000f70 <__aeabi_f2iz>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

	//Accelerometer calibration
    uint8_t acc_data[6];
	for (uint16_t i = 0; i < cal_samples; i++) {
 8001898:	2300      	movs	r3, #0
 800189a:	83bb      	strh	r3, [r7, #28]
 800189c:	8bbb      	ldrh	r3, [r7, #28]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dd57      	ble.n	8001954 <_ZN6I2CIMU15calibrateSensorEi+0x25a>
		// read 6 bytes of data starting from ACC_DATA_START_ADDRESS
		HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, ACC_DATA_START_ADDRESS, 1, acc_data, 6, I2C_TIMOUT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f103 0014 	add.w	r0, r3, #20
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	9302      	str	r3, [sp, #8]
 80018ae:	2306      	movs	r3, #6
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2301      	movs	r3, #1
 80018ba:	223b      	movs	r2, #59	; 0x3b
 80018bc:	21d0      	movs	r1, #208	; 0xd0
 80018be:	f002 ff0d 	bl	80046dc <HAL_I2C_Mem_Read>
		acc_axis_cal[0] += (short)(acc_data[0] << 8 | acc_data[1]);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80018c8:	7b3b      	ldrb	r3, [r7, #12]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	7b7b      	ldrb	r3, [r7, #13]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f91a 	bl	8000b10 <__aeabi_i2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	4619      	mov	r1, r3
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff f861 	bl	80009a8 <__addsf3>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		acc_axis_cal[1] += (short)(acc_data[2] << 8 | acc_data[3]);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 80018f6:	7bbb      	ldrb	r3, [r7, #14]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b21a      	sxth	r2, r3
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	4313      	orrs	r3, r2
 8001902:	b21b      	sxth	r3, r3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff f903 	bl	8000b10 <__aeabi_i2f>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff f84a 	bl	80009a8 <__addsf3>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		acc_axis_cal[2] += (short)(acc_data[4] << 8 | acc_data[5]);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8001924:	7c3b      	ldrb	r3, [r7, #16]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b21a      	sxth	r2, r3
 800192a:	7c7b      	ldrb	r3, [r7, #17]
 800192c:	b21b      	sxth	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b21b      	sxth	r3, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f8ec 	bl	8000b10 <__aeabi_i2f>
 8001938:	4603      	mov	r3, r0
 800193a:	4619      	mov	r1, r3
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff f833 	bl	80009a8 <__addsf3>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	for (uint16_t i = 0; i < cal_samples; i++) {
 800194c:	8bbb      	ldrh	r3, [r7, #28]
 800194e:	3301      	adds	r3, #1
 8001950:	83bb      	strh	r3, [r7, #28]
 8001952:	e7a3      	b.n	800189c <_ZN6I2CIMU15calibrateSensorEi+0x1a2>
	}
	acc_axis_cal[0] = (int)((float) acc_axis_cal[0] / cal_samples);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 800195a:	6838      	ldr	r0, [r7, #0]
 800195c:	f7ff f8d8 	bl	8000b10 <__aeabi_i2f>
 8001960:	4603      	mov	r3, r0
 8001962:	4619      	mov	r1, r3
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff f9db 	bl	8000d20 <__aeabi_fdiv>
 800196a:	4603      	mov	r3, r0
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff faff 	bl	8000f70 <__aeabi_f2iz>
 8001972:	4603      	mov	r3, r0
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f8cb 	bl	8000b10 <__aeabi_i2f>
 800197a:	4602      	mov	r2, r0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	acc_axis_cal[1] = (int)((float) acc_axis_cal[1] / cal_samples);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f7ff f8c1 	bl	8000b10 <__aeabi_i2f>
 800198e:	4603      	mov	r3, r0
 8001990:	4619      	mov	r1, r3
 8001992:	4620      	mov	r0, r4
 8001994:	f7ff f9c4 	bl	8000d20 <__aeabi_fdiv>
 8001998:	4603      	mov	r3, r0
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fae8 	bl	8000f70 <__aeabi_f2iz>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f8b4 	bl	8000b10 <__aeabi_i2f>
 80019a8:	4602      	mov	r2, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	acc_axis_cal[2] = (int)((float) acc_axis_cal[2] / cal_samples);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 80019b6:	6838      	ldr	r0, [r7, #0]
 80019b8:	f7ff f8aa 	bl	8000b10 <__aeabi_i2f>
 80019bc:	4603      	mov	r3, r0
 80019be:	4619      	mov	r1, r3
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff f9ad 	bl	8000d20 <__aeabi_fdiv>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fad1 	bl	8000f70 <__aeabi_f2iz>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f89d 	bl	8000b10 <__aeabi_i2f>
 80019d6:	4602      	mov	r2, r0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080019e8 <_ZN6I2CIMU10updateDataEv>:

void I2CIMU::updateData(void){
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af04      	add	r7, sp, #16
 80019ee:	6078      	str	r0, [r7, #4]

	//read and store acc data, cast values to shorts since they are 16-bit 2's comp values
	if( HAL_I2C_Mem_Read(   &hi2c1, 
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f103 0014 	add.w	r0, r3, #20
                            MPU_ADDRESS, 
                            ACC_DATA_START_ADDRESS,
                            1,
                            i2c_data,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3370      	adds	r3, #112	; 0x70
	if( HAL_I2C_Mem_Read(   &hi2c1, 
 80019fa:	2264      	movs	r2, #100	; 0x64
 80019fc:	9202      	str	r2, [sp, #8]
 80019fe:	220e      	movs	r2, #14
 8001a00:	9201      	str	r2, [sp, #4]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2301      	movs	r3, #1
 8001a06:	223b      	movs	r2, #59	; 0x3b
 8001a08:	21d0      	movs	r1, #208	; 0xd0
 8001a0a:	f002 fe67 	bl	80046dc <HAL_I2C_Mem_Read>
 8001a0e:	4603      	mov	r3, r0
                            14, 
                            I2C_TIMOUT) == HAL_OK)
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
	if( HAL_I2C_Mem_Read(   &hi2c1, 
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <_ZN6I2CIMU10updateDataEv+0x3e>
                            err_handler(); // check/handle last for timout errors
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001a24:	4798      	blx	r3

	acc_axis[0] = (short)(i2c_data[0] << 8 | i2c_data[1]) ; //pitch
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff f867 	bl	8000b10 <__aeabi_i2f>
 8001a42:	4602      	mov	r2, r0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	acc_axis[1] = (short)(i2c_data[2] << 8 | i2c_data[3]) ; //roll
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f855 	bl	8000b10 <__aeabi_i2f>
 8001a66:	4602      	mov	r2, r0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	acc_axis[2] = (short)(i2c_data[4] << 8 | i2c_data[5]) ; //yaw
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f843 	bl	8000b10 <__aeabi_i2f>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

     //acc calibration.
     acc_axis[0] -= acc_axis_cal[0];  //Accelerometer calibration value for pitch.
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	f7fe ff7f 	bl	80009a4 <__aeabi_fsub>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     acc_axis[1] -= acc_axis_cal[1];   //Accelerometer calibration value for roll.
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f7fe ff70 	bl	80009a4 <__aeabi_fsub>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac


	// ignore temperature data

	//read and store gyro data (NOT-scaled)
 	gyro_axis[0] = (short)(i2c_data[8]  << 8 | i2c_data[9])  ; //pitch
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001ade:	b21b      	sxth	r3, r3
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff f813 	bl	8000b10 <__aeabi_i2f>
 8001aea:	4602      	mov	r2, r0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 	gyro_axis[1] = (short)(i2c_data[10] << 8 | i2c_data[11]) ; //roll
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f801 	bl	8000b10 <__aeabi_i2f>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 	gyro_axis[2] = (short)(i2c_data[12] << 8 | i2c_data[13]) ; //yaw
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe ffef 	bl	8000b10 <__aeabi_i2f>
 8001b32:	4602      	mov	r2, r0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	gyro_axis[0] -= gyro_axis_cal[0]; //pitch
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7fe fff7 	bl	8000b3c <__aeabi_l2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4619      	mov	r1, r3
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7fe ff26 	bl	80009a4 <__aeabi_fsub>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	gyro_axis[1] -= gyro_axis_cal[1]; //roll
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7fe ffe3 	bl	8000b3c <__aeabi_l2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7fe ff12 	bl	80009a4 <__aeabi_fsub>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	gyro_axis[2] -= gyro_axis_cal[2]; //yaw
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7fe ffcf 	bl	8000b3c <__aeabi_l2f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7fe fefe 	bl	80009a4 <__aeabi_fsub>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


    //filter gyro rates to be used by the first PID controller 
    gyro_pitch_rate_pid = (gyro_pitch_rate_pid * 0.7f) + ((gyro_axis[0] / GYRO_SCALE) * 0.3f);   //Gyro pid input is deg/sec.
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	49b6      	ldr	r1, [pc, #728]	; (8001e90 <_ZN6I2CIMU10updateDataEv+0x4a8>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fffd 	bl	8000bb8 <__aeabi_fmul>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fc31 	bl	8000428 <__aeabi_f2d>
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	460d      	mov	r5, r1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc29 	bl	8000428 <__aeabi_f2d>
 8001bd6:	a3a6      	add	r3, pc, #664	; (adr r3, 8001e70 <_ZN6I2CIMU10updateDataEv+0x488>)
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	f7fe fda6 	bl	800072c <__aeabi_ddiv>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	a3a3      	add	r3, pc, #652	; (adr r3, 8001e78 <_ZN6I2CIMU10updateDataEv+0x490>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	f7fe fc73 	bl	80004d8 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	f7fe fab7 	bl	800016c <__adddf3>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe fe79 	bl	80008fc <__aeabi_d2f>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	601a      	str	r2, [r3, #0]
    gyro_roll_rate_pid  = (gyro_roll_rate_pid * 0.7f) + ((gyro_axis[1] / GYRO_SCALE) * 0.3f);   //Gyro pid input is deg/sec.
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	499e      	ldr	r1, [pc, #632]	; (8001e90 <_ZN6I2CIMU10updateDataEv+0x4a8>)
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe ffce 	bl	8000bb8 <__aeabi_fmul>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc02 	bl	8000428 <__aeabi_f2d>
 8001c24:	4604      	mov	r4, r0
 8001c26:	460d      	mov	r5, r1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fbfa 	bl	8000428 <__aeabi_f2d>
 8001c34:	a38e      	add	r3, pc, #568	; (adr r3, 8001e70 <_ZN6I2CIMU10updateDataEv+0x488>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fd77 	bl	800072c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	a38c      	add	r3, pc, #560	; (adr r3, 8001e78 <_ZN6I2CIMU10updateDataEv+0x490>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fc44 	bl	80004d8 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4620      	mov	r0, r4
 8001c56:	4629      	mov	r1, r5
 8001c58:	f7fe fa88 	bl	800016c <__adddf3>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f7fe fe4a 	bl	80008fc <__aeabi_d2f>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	605a      	str	r2, [r3, #4]
    gyro_yaw_rate_pid   = (gyro_yaw_rate_pid * 0.7f) + ((gyro_axis[2] / GYRO_SCALE) * 0.3f);   //Gyro pid input is deg/sec.
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4987      	ldr	r1, [pc, #540]	; (8001e90 <_ZN6I2CIMU10updateDataEv+0x4a8>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe ff9f 	bl	8000bb8 <__aeabi_fmul>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fbd3 	bl	8000428 <__aeabi_f2d>
 8001c82:	4604      	mov	r4, r0
 8001c84:	460d      	mov	r5, r1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fbcb 	bl	8000428 <__aeabi_f2d>
 8001c92:	a377      	add	r3, pc, #476	; (adr r3, 8001e70 <_ZN6I2CIMU10updateDataEv+0x488>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fd48 	bl	800072c <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	a374      	add	r3, pc, #464	; (adr r3, 8001e78 <_ZN6I2CIMU10updateDataEv+0x490>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fc15 	bl	80004d8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe fa59 	bl	800016c <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe fe1b 	bl	80008fc <__aeabi_d2f>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	609a      	str	r2, [r3, #8]

    //integrate gyro
    angle_pitch += gyro_axis[0] * gyro_scale;      
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68dc      	ldr	r4, [r3, #12]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f7fe ff6b 	bl	8000bb8 <__aeabi_fmul>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f7fe fe5e 	bl	80009a8 <__addsf3>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]
    angle_roll  += gyro_axis[1] * gyro_scale;      
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691c      	ldr	r4, [r3, #16]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f7fe ff57 	bl	8000bb8 <__aeabi_fmul>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7fe fe4a 	bl	80009a8 <__addsf3>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	611a      	str	r2, [r3, #16]
    // angle_pitch -= angle_roll * sin(gyro_axis[2] * gyro_scale_pi);
    // angle_roll += angle_pitch * sin(gyro_axis[2] * gyro_scale_pi);


    //Accelerometer angle calculations
    acc_total_vector = sqrt((acc_axis[0]*acc_axis[0])+(acc_axis[1]*acc_axis[1])+(acc_axis[2]*acc_axis[2]));       //Calculate the total accelerometer vector.
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f7fe ff44 	bl	8000bb8 <__aeabi_fmul>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461c      	mov	r4, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f7fe ff38 	bl	8000bb8 <__aeabi_fmul>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7fe fe2b 	bl	80009a8 <__addsf3>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461c      	mov	r4, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f7fe ff27 	bl	8000bb8 <__aeabi_fmul>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7fe fe1a 	bl	80009a8 <__addsf3>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fb6a 	bl	8001450 <_ZSt4sqrtf>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
    if(abs(acc_axis[1]) < acc_total_vector){ //Prevent the asin function to produce a NaN
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fb48 	bl	8001420 <_ZSt3absf>
 8001d90:	4602      	mov	r2, r0
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001d98:	2101      	movs	r1, #1
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f7ff f8a8 	bl	8000ef4 <__aeabi_fcmplt>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <_ZN6I2CIMU10updateDataEv+0x3c6>
 8001daa:	2300      	movs	r3, #0
 8001dac:	461c      	mov	r4, r3
 8001dae:	b2e3      	uxtb	r3, r4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <_ZN6I2CIMU10updateDataEv+0x40e>
        acc_pitch = asin((float)acc_axis[1]/acc_total_vector)* 57.296;  //Calculate the pitch angle.
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f7fe ffac 	bl	8000d20 <__aeabi_fdiv>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fb34 	bl	8001438 <_ZSt4asinf>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fb28 	bl	8000428 <__aeabi_f2d>
 8001dd8:	a329      	add	r3, pc, #164	; (adr r3, 8001e80 <_ZN6I2CIMU10updateDataEv+0x498>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	f7fe fb7b 	bl	80004d8 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe fd87 	bl	80008fc <__aeabi_d2f>
 8001dee:	4602      	mov	r2, r0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }
    if(abs(acc_axis[0]) < acc_total_vector){  //Prevent the asin function to produce a NaN
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fb0f 	bl	8001420 <_ZSt3absf>
 8001e02:	4602      	mov	r2, r0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4610      	mov	r0, r2
 8001e12:	f7ff f86f 	bl	8000ef4 <__aeabi_fcmplt>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <_ZN6I2CIMU10updateDataEv+0x438>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	461c      	mov	r4, r3
 8001e20:	b2e3      	uxtb	r3, r4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d036      	beq.n	8001e94 <_ZN6I2CIMU10updateDataEv+0x4ac>
        acc_roll = asin((float)acc_axis[0]/acc_total_vector)* -57.296;  //Calculate the roll angle.
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001e32:	4619      	mov	r1, r3
 8001e34:	4610      	mov	r0, r2
 8001e36:	f7fe ff73 	bl	8000d20 <__aeabi_fdiv>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fafb 	bl	8001438 <_ZSt4asinf>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe faef 	bl	8000428 <__aeabi_f2d>
 8001e4a:	a30f      	add	r3, pc, #60	; (adr r3, 8001e88 <_ZN6I2CIMU10updateDataEv+0x4a0>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fb42 	bl	80004d8 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fd4e 	bl	80008fc <__aeabi_d2f>
 8001e60:	4602      	mov	r2, r0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8001e68:	e014      	b.n	8001e94 <_ZN6I2CIMU10updateDataEv+0x4ac>
 8001e6a:	bf00      	nop
 8001e6c:	f3af 8000 	nop.w
 8001e70:	00000000 	.word	0x00000000
 8001e74:	40506000 	.word	0x40506000
 8001e78:	40000000 	.word	0x40000000
 8001e7c:	3fd33333 	.word	0x3fd33333
 8001e80:	53f7ced9 	.word	0x53f7ced9
 8001e84:	404ca5e3 	.word	0x404ca5e3
 8001e88:	53f7ced9 	.word	0x53f7ced9
 8001e8c:	c04ca5e3 	.word	0xc04ca5e3
 8001e90:	3f333333 	.word	0x3f333333
    }
  
    //Place the MPU-6050 spirit level and note the values in the following two lines for calibration.
    //TODO: add acc calibrated angle_val here (so maybe run few cycles for this as well!)
    acc_pitch -= 0.0f;  //Accelerometer calibration value for pitch.
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    acc_roll -= 0.0f;   //Accelerometer calibration value for roll.
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    
    angle_pitch = angle_pitch * 0.99 + acc_pitch * 0.01; //Correct the drift of the gyro pitch angle with the accelerometer pitch angle.
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fab9 	bl	8000428 <__aeabi_f2d>
 8001eb6:	a332      	add	r3, pc, #200	; (adr r3, 8001f80 <_ZN6I2CIMU10updateDataEv+0x598>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe fb0c 	bl	80004d8 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe faaa 	bl	8000428 <__aeabi_f2d>
 8001ed4:	a32c      	add	r3, pc, #176	; (adr r3, 8001f88 <_ZN6I2CIMU10updateDataEv+0x5a0>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fafd 	bl	80004d8 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	f7fe f941 	bl	800016c <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fd03 	bl	80008fc <__aeabi_d2f>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	60da      	str	r2, [r3, #12]
    angle_roll = angle_roll * 0.99 + acc_roll * 0.01;    //Correct the drift of the gyro roll angle with the accelerometer roll angle.
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fa91 	bl	8000428 <__aeabi_f2d>
 8001f06:	a31e      	add	r3, pc, #120	; (adr r3, 8001f80 <_ZN6I2CIMU10updateDataEv+0x598>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fae4 	bl	80004d8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4614      	mov	r4, r2
 8001f16:	461d      	mov	r5, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fa82 	bl	8000428 <__aeabi_f2d>
 8001f24:	a318      	add	r3, pc, #96	; (adr r3, 8001f88 <_ZN6I2CIMU10updateDataEv+0x5a0>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	f7fe fad5 	bl	80004d8 <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe f919 	bl	800016c <__adddf3>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7fe fcdb 	bl	80008fc <__aeabi_d2f>
 8001f46:	4602      	mov	r2, r0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	611a      	str	r2, [r3, #16]

    //init absolute angles with accelerometer reading
    if (!gyro_angle_set){
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8001f52:	f083 0301 	eor.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00d      	beq.n	8001f78 <_ZN6I2CIMU10updateDataEv+0x590>
        angle_pitch = acc_pitch;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60da      	str	r2, [r3, #12]
        angle_roll  = acc_roll;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	611a      	str	r2, [r3, #16]
        gyro_angle_set = true;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    }
    
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f80:	7ae147ae 	.word	0x7ae147ae
 8001f84:	3fefae14 	.word	0x3fefae14
 8001f88:	47ae147b 	.word	0x47ae147b
 8001f8c:	3f847ae1 	.word	0x3f847ae1

08001f90 <_ZN3ESCC1Ev>:
void            drive(uint16_t m1, uint16_t m2, uint16_t m3, uint16_t m4);
ESC(ESC& other) = delete; //Singletons should not be cloneable
void setEscErrorHandler(void (*err_handler)(void));
};

ESC::ESC(){
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
//empty
}
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <_ZN3ESC11getInstanceEv>:

ESC& ESC::getInstance() {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
    static ESC _instance;
 8001fa8:	4b10      	ldr	r3, [pc, #64]	; (8001fec <_ZN3ESC11getInstanceEv+0x48>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f3bf 8f5b 	dmb	ish
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf0c      	ite	eq
 8001fba:	2301      	moveq	r3, #1
 8001fbc:	2300      	movne	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d010      	beq.n	8001fe6 <_ZN3ESC11getInstanceEv+0x42>
 8001fc4:	4809      	ldr	r0, [pc, #36]	; (8001fec <_ZN3ESC11getInstanceEv+0x48>)
 8001fc6:	f005 f93f 	bl	8007248 <__cxa_guard_acquire>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <_ZN3ESC11getInstanceEv+0x42>
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <_ZN3ESC11getInstanceEv+0x4c>)
 8001fdc:	f7ff ffd8 	bl	8001f90 <_ZN3ESCC1Ev>
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <_ZN3ESC11getInstanceEv+0x48>)
 8001fe2:	f005 f93d 	bl	8007260 <__cxa_guard_release>
    return _instance;
 8001fe6:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <_ZN3ESC11getInstanceEv+0x4c>)
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200001f8 	.word	0x200001f8
 8001ff0:	200001ac 	.word	0x200001ac

08001ff4 <_ZN3ESC18setEscErrorHandlerEPFvvE>:

void  ESC::setEscErrorHandler(void (*err_handler)(void)){
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
    this->err_handler = err_handler;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <_ZN3ESC4initEi>:

void ESC::init(int init_speed){
 800200e:	b580      	push	{r7, lr}
 8002010:	b094      	sub	sp, #80	; 0x50
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]

    //init TIM2 and PWM channels

    //=========================== HAL TIM2 CONFIG ==============================
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
    TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	611a      	str	r2, [r3, #16]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
 8002050:	615a      	str	r2, [r3, #20]
 8002052:	619a      	str	r2, [r3, #24]

    htim2.Instance = TIM2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800205a:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 19; //from 0 to 19 ie /20
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2213      	movs	r2, #19
 8002060:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 59999;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800206e:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) err_handler();
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4618      	mov	r0, r3
 8002080:	f003 fd08 	bl	8005a94 <HAL_TIM_Base_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf14      	ite	ne
 800208a:	2301      	movne	r3, #1
 800208c:	2300      	moveq	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <_ZN3ESC4initEi+0x8c>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002098:	4798      	blx	r3
    
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) err_handler();
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fefb 	bl	8005ea4 <HAL_TIM_ConfigClockSource>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <_ZN3ESC4initEi+0xb6>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c2:	4798      	blx	r3
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) err_handler();
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 fd33 	bl	8005b32 <HAL_TIM_PWM_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <_ZN3ESC4initEi+0xd4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	4798      	blx	r3
    
    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) err_handler();
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 ff9a 	bl	800602c <HAL_TIM_SlaveConfigSynchro>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf14      	ite	ne
 80020fe:	2301      	movne	r3, #1
 8002100:	2300      	moveq	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <_ZN3ESC4initEi+0x100>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	4798      	blx	r3
    
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) err_handler();
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f004 faf8 	bl	8006714 <HAL_TIMEx_MasterConfigSynchronization>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf14      	ite	ne
 800212a:	2301      	movne	r3, #1
 800212c:	2300      	moveq	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <_ZN3ESC4initEi+0x12c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002138:	4798      	blx	r3
    
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800213a:	2360      	movs	r3, #96	; 0x60
 800213c:	60bb      	str	r3, [r7, #8]
    sConfigOC.Pulse = PWM_MIN;
 800213e:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002142:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	61bb      	str	r3, [r7, #24]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) err_handler();
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f107 0108 	add.w	r1, r7, #8
 8002152:	2200      	movs	r2, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f003 fde7 	bl	8005d28 <HAL_TIM_PWM_ConfigChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <_ZN3ESC4initEi+0x162>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216e:	4798      	blx	r3

    sConfigOC.Pulse = init_speed; //PWM_MIN
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	60fb      	str	r3, [r7, #12]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) err_handler();
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f107 0108 	add.w	r1, r7, #8
 800217a:	2204      	movs	r2, #4
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fdd3 	bl	8005d28 <HAL_TIM_PWM_ConfigChannel>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <_ZN3ESC4initEi+0x18a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002196:	4798      	blx	r3
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) err_handler();
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f107 0108 	add.w	r1, r7, #8
 800219e:	2208      	movs	r2, #8
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 fdc1 	bl	8005d28 <HAL_TIM_PWM_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf14      	ite	ne
 80021ac:	2301      	movne	r3, #1
 80021ae:	2300      	moveq	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <_ZN3ESC4initEi+0x1ae>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ba:	4798      	blx	r3
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) err_handler();
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f107 0108 	add.w	r1, r7, #8
 80021c2:	220c      	movs	r2, #12
 80021c4:	4618      	mov	r0, r3
 80021c6:	f003 fdaf 	bl	8005d28 <HAL_TIM_PWM_ConfigChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <_ZN3ESC4initEi+0x1d2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021de:	4798      	blx	r3
    
    HAL_TIM_MspPostInit(&htim2);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f001 fad2 	bl	800378c <HAL_TIM_MspPostInit>
    //=========================== HAL PWM CONFIG ==============================
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f003 fcf9 	bl	8005be4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2104      	movs	r1, #4
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 fcf4 	bl	8005be4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2108      	movs	r1, #8
 8002200:	4618      	mov	r0, r3
 8002202:	f003 fcef 	bl	8005be4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	210c      	movs	r1, #12
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fcea 	bl	8005be4 <HAL_TIM_PWM_Start>
}
 8002210:	bf00      	nop
 8002212:	3750      	adds	r7, #80	; 0x50
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_ZN3ESC5driveEtttt>:


void ESC::drive(uint16_t m1, uint16_t m2, uint16_t m3, uint16_t m4){
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	4608      	mov	r0, r1
 8002222:	4611      	mov	r1, r2
 8002224:	461a      	mov	r2, r3
 8002226:	4603      	mov	r3, r0
 8002228:	817b      	strh	r3, [r7, #10]
 800222a:	460b      	mov	r3, r1
 800222c:	813b      	strh	r3, [r7, #8]
 800222e:	4613      	mov	r3, r2
 8002230:	80fb      	strh	r3, [r7, #6]
    TIM2->CCR1 = m4;
 8002232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002236:	8b3b      	ldrh	r3, [r7, #24]
 8002238:	6353      	str	r3, [r2, #52]	; 0x34
    TIM2->CCR2 = m3;
 800223a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	6393      	str	r3, [r2, #56]	; 0x38
    TIM2->CCR3 = m2;
 8002242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002246:	893b      	ldrh	r3, [r7, #8]
 8002248:	63d3      	str	r3, [r2, #60]	; 0x3c
    TIM2->CCR4 = m1;
 800224a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800224e:	897b      	ldrh	r3, [r7, #10]
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <_ZN3PIDC1Efffif>:
void    setDerivative(float kd);
void    setTunings(float kp, float ki, float kd);
};


PID::PID(float kp,float ki,float kd, int max, float direction){
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	621a      	str	r2, [r3, #32]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	629a      	str	r2, [r3, #40]	; 0x28
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
    this->kp = kp;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	601a      	str	r2, [r3, #0]
    this->ki = ki;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	605a      	str	r2, [r3, #4]
    this->kd = kd;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	609a      	str	r2, [r3, #8]
    max_value = max;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	611a      	str	r2, [r3, #16]
    this->controller_direction = direction;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <_ZN3PID11setSetpointEf>:

void PID::setSetpoint(float setpoint){
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
    this->setpoint = setpoint; 
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	60da      	str	r2, [r3, #12]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <_ZN3PID15setProportionalEf>:

void PID::setProportional(float kp){
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
    this->kp = controller_direction * kp ;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	6839      	ldr	r1, [r7, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fc62 	bl	8000bb8 <__aeabi_fmul>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	601a      	str	r2, [r3, #0]
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_ZN3PID11setIntegralEf>:
void PID::setIntegral(float ki){
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
    this->ki = controller_direction * ki ;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	6839      	ldr	r1, [r7, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe fc4f 	bl	8000bb8 <__aeabi_fmul>
 800231a:	4603      	mov	r3, r0
 800231c:	461a      	mov	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	605a      	str	r2, [r3, #4]
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_ZN3PID13setDerivativeEf>:
void PID::setDerivative(float kd){
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
    this->kd = controller_direction * kd;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fc3c 	bl	8000bb8 <__aeabi_fmul>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <_ZN3PID8feedbackEf>:
    this->kp = controller_direction * kp ;
    this->ki = controller_direction * ki ;
    this->kd = controller_direction * kd;
}

float PID::feedback(float val){
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
    //TODO: need to investigate this more by trial and error
    //calculate errors, derivative and sum
    prev_error = error;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	61da      	str	r2, [r3, #28]
    error = setpoint - val; 
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	6839      	ldr	r1, [r7, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe fb1b 	bl	80009a4 <__aeabi_fsub>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	615a      	str	r2, [r3, #20]
    // derivative = error- prev_error; //we want this to in reverse signe to the proportional_output as it corrects over compensation 
    /* this is better than the derivative above, this is called: derivative on measurment 
        and it eliminated derivative spikes (derivative kick): check this for more info: 
        http://brettbeauregard.com/blog/2011/04/improving-the-beginner%e2%80%99s-pid-derivative-kick/
    */
    derivative = val - last_input;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	4619      	mov	r1, r3
 800237c:	6838      	ldr	r0, [r7, #0]
 800237e:	f7fe fb11 	bl	80009a4 <__aeabi_fsub>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	619a      	str	r2, [r3, #24]
    last_input = val;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
    
    //calculate integral sum
    i_sum += ki * error;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1c      	ldr	r4, [r3, #32]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	4619      	mov	r1, r3
 800239e:	4610      	mov	r0, r2
 80023a0:	f7fe fc0a 	bl	8000bb8 <__aeabi_fmul>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4619      	mov	r1, r3
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7fe fafd 	bl	80009a8 <__addsf3>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	621a      	str	r2, [r3, #32]
    //integral windup (this is not redundant since it may be reduced by the derivative or proportional)
    if(i_sum > max_value)i_sum = max_value;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1c      	ldr	r4, [r3, #32]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fba6 	bl	8000b10 <__aeabi_i2f>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4619      	mov	r1, r3
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7fe fdb1 	bl	8000f30 <__aeabi_fcmpgt>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <_ZN3PID8feedbackEf+0x96>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fb99 	bl	8000b10 <__aeabi_i2f>
 80023de:	4602      	mov	r2, r0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	621a      	str	r2, [r3, #32]
 80023e4:	e018      	b.n	8002418 <_ZN3PID8feedbackEf+0xc8>
    else if(i_sum < max_value * -1)i_sum = max_value * -1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1c      	ldr	r4, [r3, #32]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	425b      	negs	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe fb8d 	bl	8000b10 <__aeabi_i2f>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4619      	mov	r1, r3
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7fe fd7a 	bl	8000ef4 <__aeabi_fcmplt>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <_ZN3PID8feedbackEf+0xc8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	425b      	negs	r3, r3
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fb7f 	bl	8000b10 <__aeabi_i2f>
 8002412:	4602      	mov	r2, r0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	621a      	str	r2, [r3, #32]
    
    //calculate PID output
    output = kp*error + i_sum + kd*derivative;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f7fe fbc8 	bl	8000bb8 <__aeabi_fmul>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f7fe fab8 	bl	80009a8 <__addsf3>
 8002438:	4603      	mov	r3, r0
 800243a:	461c      	mov	r4, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f7fe fbb6 	bl	8000bb8 <__aeabi_fmul>
 800244c:	4603      	mov	r3, r0
 800244e:	4619      	mov	r1, r3
 8002450:	4620      	mov	r0, r4
 8002452:	f7fe faa9 	bl	80009a8 <__addsf3>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24
    
    //output windup
    if(output > max_value)output = max_value;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fb52 	bl	8000b10 <__aeabi_i2f>
 800246c:	4603      	mov	r3, r0
 800246e:	4619      	mov	r1, r3
 8002470:	4620      	mov	r0, r4
 8002472:	f7fe fd5d 	bl	8000f30 <__aeabi_fcmpgt>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <_ZN3PID8feedbackEf+0x13e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fb45 	bl	8000b10 <__aeabi_i2f>
 8002486:	4602      	mov	r2, r0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
 800248c:	e018      	b.n	80024c0 <_ZN3PID8feedbackEf+0x170>
    else if(output < max_value * -1)output = max_value * -1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	425b      	negs	r3, r3
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe fb39 	bl	8000b10 <__aeabi_i2f>
 800249e:	4603      	mov	r3, r0
 80024a0:	4619      	mov	r1, r3
 80024a2:	4620      	mov	r0, r4
 80024a4:	f7fe fd26 	bl	8000ef4 <__aeabi_fcmplt>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <_ZN3PID8feedbackEf+0x170>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	425b      	negs	r3, r3
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fb2b 	bl	8000b10 <__aeabi_i2f>
 80024ba:	4602      	mov	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	625a      	str	r2, [r3, #36]	; 0x24
    return output;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}

080024cc <_ZN3PID5resetEv>:

void PID::reset(){
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    setpoint = 0.0f;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
    error = 0.0f;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	615a      	str	r2, [r3, #20]
    derivative = 0.0f;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
    prev_error = 0.0f;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	61da      	str	r2, [r3, #28]
    i_sum = 0.0f; 
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
    output = 0.0f;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
	...

08002510 <_Z5setupv>:



// ===================================== setup ======================================
void setup()
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  //init and config periphereals
  HAL_Init();
 8002514:	f001 fa7c 	bl	8003a10 <HAL_Init>
  SystemClock_Config();
 8002518:	f000 fab6 	bl	8002a88 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800251c:	f000 fb36 	bl	8002b8c <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8002520:	f000 faf2 	bl	8002b08 <_ZL19MX_USART1_UART_Initv>
  micros_init();
 8002524:	f001 f842 	bl	80035ac <micros_init>
  HAL_UART_Receive_IT(&huart1, &uart_data, 1);
 8002528:	2201      	movs	r2, #1
 800252a:	4948      	ldr	r1, [pc, #288]	; (800264c <_Z5setupv+0x13c>)
 800252c:	4848      	ldr	r0, [pc, #288]	; (8002650 <_Z5setupv+0x140>)
 800252e:	f004 fa2e 	bl	800698e <HAL_UART_Receive_IT>
  ADC_init();
 8002532:	f000 fc91 	bl	8002e58 <_Z8ADC_initv>
  //set Proto+ callback to recieve the next command (init_drone) and all others
  phelper.setOnCommandRecievedCallabck(commandCallback);
 8002536:	4b47      	ldr	r3, [pc, #284]	; (8002654 <_Z5setupv+0x144>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4947      	ldr	r1, [pc, #284]	; (8002658 <_Z5setupv+0x148>)
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fe7f 	bl	8001240 <_ZN11ProtoHelper28setOnCommandRecievedCallabckEPFvP7CommandE>

  // Wait for the bluetooth module to connect to Proto+
  #if DEBUG != 1
  while (HAL_GPIO_ReadPin(BT_STAT_PIN) != GPIO_PIN_SET)
 8002542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002546:	4845      	ldr	r0, [pc, #276]	; (800265c <_Z5setupv+0x14c>)
 8002548:	f001 fe2a 	bl	80041a0 <HAL_GPIO_ReadPin>
 800254c:	4603      	mov	r3, r0
 800254e:	2b01      	cmp	r3, #1
 8002550:	bf14      	ite	ne
 8002552:	2301      	movne	r3, #1
 8002554:	2300      	moveq	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01c      	beq.n	8002596 <_Z5setupv+0x86>
  {
    HAL_GPIO_TogglePin(BLUE_LED);
 800255c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002560:	483f      	ldr	r0, [pc, #252]	; (8002660 <_Z5setupv+0x150>)
 8002562:	f001 fe4c 	bl	80041fe <HAL_GPIO_TogglePin>
    HAL_Delay(300);
 8002566:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800256a:	f001 fab3 	bl	8003ad4 <HAL_Delay>
    HAL_GPIO_TogglePin(BLUE_LED);
 800256e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002572:	483b      	ldr	r0, [pc, #236]	; (8002660 <_Z5setupv+0x150>)
 8002574:	f001 fe43 	bl	80041fe <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(RED_LED);
 8002578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800257c:	4838      	ldr	r0, [pc, #224]	; (8002660 <_Z5setupv+0x150>)
 800257e:	f001 fe3e 	bl	80041fe <HAL_GPIO_TogglePin>
    HAL_Delay(300);
 8002582:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002586:	f001 faa5 	bl	8003ad4 <HAL_Delay>
    HAL_GPIO_TogglePin(RED_LED);
 800258a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800258e:	4834      	ldr	r0, [pc, #208]	; (8002660 <_Z5setupv+0x150>)
 8002590:	f001 fe35 	bl	80041fe <HAL_GPIO_TogglePin>
  while (HAL_GPIO_ReadPin(BT_STAT_PIN) != GPIO_PIN_SET)
 8002594:	e7d5      	b.n	8002542 <_Z5setupv+0x32>
  };
  #endif

  //wait for init button to be clicked in Proto+
  #if DEBUG != 1
  while (!init_drone)
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <_Z5setupv+0x154>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d11c      	bne.n	80025d8 <_Z5setupv+0xc8>
  {
    HAL_GPIO_TogglePin(BLUE_LED);
 800259e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025a2:	482f      	ldr	r0, [pc, #188]	; (8002660 <_Z5setupv+0x150>)
 80025a4:	f001 fe2b 	bl	80041fe <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(RED_LED);
 80025a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ac:	482c      	ldr	r0, [pc, #176]	; (8002660 <_Z5setupv+0x150>)
 80025ae:	f001 fe26 	bl	80041fe <HAL_GPIO_TogglePin>
    HAL_Delay(300);
 80025b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025b6:	f001 fa8d 	bl	8003ad4 <HAL_Delay>
    HAL_GPIO_TogglePin(BLUE_LED);
 80025ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025be:	4828      	ldr	r0, [pc, #160]	; (8002660 <_Z5setupv+0x150>)
 80025c0:	f001 fe1d 	bl	80041fe <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(RED_LED);
 80025c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025c8:	4825      	ldr	r0, [pc, #148]	; (8002660 <_Z5setupv+0x150>)
 80025ca:	f001 fe18 	bl	80041fe <HAL_GPIO_TogglePin>
    HAL_Delay(300);
 80025ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025d2:	f001 fa7f 	bl	8003ad4 <HAL_Delay>
  while (!init_drone)
 80025d6:	e7de      	b.n	8002596 <_Z5setupv+0x86>
  }
  #endif

  //start motors
  escs.setEscErrorHandler(EscErrorHandler);
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <_Z5setupv+0x158>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4923      	ldr	r1, [pc, #140]	; (800266c <_Z5setupv+0x15c>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fd08 	bl	8001ff4 <_ZN3ESC18setEscErrorHandlerEPFvvE>
  escs.init(PWM_MIN);
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <_Z5setupv+0x158>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f640 610f 	movw	r1, #3599	; 0xe0f
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fd0e 	bl	800200e <_ZN3ESC4initEi>

  //init GYRO + Calibrate it
  HAL_GPIO_WritePin(RED_LED, GPIO_PIN_SET); //turn ON RED_LED ONLY to indicate calibration start
 80025f2:	2201      	movs	r2, #1
 80025f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f8:	4819      	ldr	r0, [pc, #100]	; (8002660 <_Z5setupv+0x150>)
 80025fa:	f001 fde8 	bl	80041ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLUE_LED, GPIO_PIN_RESET);
 80025fe:	2200      	movs	r2, #0
 8002600:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002604:	4816      	ldr	r0, [pc, #88]	; (8002660 <_Z5setupv+0x150>)
 8002606:	f001 fde2 	bl	80041ce <HAL_GPIO_WritePin>

  //imu init and calibration (please keep both calibrations faulty and accurate)
  imu.setI2cErrorHandler(I2cErrorHandler);
 800260a:	4b19      	ldr	r3, [pc, #100]	; (8002670 <_Z5setupv+0x160>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4919      	ldr	r1, [pc, #100]	; (8002674 <_Z5setupv+0x164>)
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe ff29 	bl	8001468 <_ZN6I2CIMU18setI2cErrorHandlerEPFvvE>
  imu.init(250.0f);
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <_Z5setupv+0x160>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4917      	ldr	r1, [pc, #92]	; (8002678 <_Z5setupv+0x168>)
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe ff8f 	bl	8001540 <_ZN6I2CIMU4initEf>
  imu.calibrateSensor(200);  //first calibration is faulty
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <_Z5setupv+0x160>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	21c8      	movs	r1, #200	; 0xc8
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff f866 	bl	80016fa <_ZN6I2CIMU15calibrateSensorEi>
  imu.calibrateSensor(2000); // second calibration is much more accurate
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <_Z5setupv+0x160>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff f85f 	bl	80016fa <_ZN6I2CIMU15calibrateSensorEi>

  HAL_GPIO_WritePin(RED_LED, GPIO_PIN_RESET); //turn OFF RED_LED ONLY to indicate calibration end
 800263c:	2200      	movs	r2, #0
 800263e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002642:	4807      	ldr	r0, [pc, #28]	; (8002660 <_Z5setupv+0x150>)
 8002644:	f001 fdc3 	bl	80041ce <HAL_GPIO_WritePin>
  //  calibrateESCS();

  //TODO: you should mention that the user should leave the angle to stab a little before use
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000000 	.word	0x20000000
 8002650:	20000214 	.word	0x20000214
 8002654:	20000260 	.word	0x20000260
 8002658:	080030d5 	.word	0x080030d5
 800265c:	40010800 	.word	0x40010800
 8002660:	40010c00 	.word	0x40010c00
 8002664:	20000208 	.word	0x20000208
 8002668:	2000025c 	.word	0x2000025c
 800266c:	080030b1 	.word	0x080030b1
 8002670:	20000258 	.word	0x20000258
 8002674:	080030bd 	.word	0x080030bd
 8002678:	437a0000 	.word	0x437a0000

0800267c <main>:

// ===================================== Main =======================================
int main(void)
{
 800267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af02      	add	r7, sp, #8
  setup();
 8002684:	f7ff ff44 	bl	8002510 <_Z5setupv>
  loop_time = micros();
 8002688:	f000 ffc8 	bl	800361c <micros>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	499b      	ldr	r1, [pc, #620]	; (8002900 <main+0x284>)
 8002692:	e9c1 2300 	strd	r2, r3, [r1]
  {
    //---------------------------------- DRONE_FLY ----------------------------------
    #if DEBUG == 1
    state = DRONE_FLY;
    #endif
    if (state == DRONE_FLY)
 8002696:	4b9b      	ldr	r3, [pc, #620]	; (8002904 <main+0x288>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	f040 815c 	bne.w	8002958 <main+0x2dc>
    {
      //------------------------------- update angles -------------------------------
      imu.updateData();
 80026a0:	4b99      	ldr	r3, [pc, #612]	; (8002908 <main+0x28c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff f99f 	bl	80019e8 <_ZN6I2CIMU10updateDataEv>
      debug_pitch = imu.angle_pitch;
 80026aa:	4b97      	ldr	r3, [pc, #604]	; (8002908 <main+0x28c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a96      	ldr	r2, [pc, #600]	; (800290c <main+0x290>)
 80026b2:	6013      	str	r3, [r2, #0]
      debug_roll = imu.angle_roll;
 80026b4:	4b94      	ldr	r3, [pc, #592]	; (8002908 <main+0x28c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	4a95      	ldr	r2, [pc, #596]	; (8002910 <main+0x294>)
 80026bc:	6013      	str	r3, [r2, #0]
      //-----------------------------------------------------------------------------

      //------------------------ PID controller (traditional)------------------------
      //TODO: Range Limited from PROTO+ directly (0 -> 30 degrees)
      pid_pitch.setSetpoint(pitch_setpoint);
 80026be:	4b95      	ldr	r3, [pc, #596]	; (8002914 <main+0x298>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4894      	ldr	r0, [pc, #592]	; (8002918 <main+0x29c>)
 80026c6:	f7ff fdfd 	bl	80022c4 <_ZN3PID11setSetpointEf>
      pid_roll.setSetpoint(roll_setpoint);
 80026ca:	4b94      	ldr	r3, [pc, #592]	; (800291c <main+0x2a0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4893      	ldr	r0, [pc, #588]	; (8002920 <main+0x2a4>)
 80026d2:	f7ff fdf7 	bl	80022c4 <_ZN3PID11setSetpointEf>
      pid_yaw.setSetpoint(yaw_setpoint);
 80026d6:	4b93      	ldr	r3, [pc, #588]	; (8002924 <main+0x2a8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	4892      	ldr	r0, [pc, #584]	; (8002928 <main+0x2ac>)
 80026de:	f7ff fdf1 	bl	80022c4 <_ZN3PID11setSetpointEf>

      pid_pitch_out = pid_pitch.feedback(imu.angle_pitch);
 80026e2:	4b89      	ldr	r3, [pc, #548]	; (8002908 <main+0x28c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4619      	mov	r1, r3
 80026ea:	488b      	ldr	r0, [pc, #556]	; (8002918 <main+0x29c>)
 80026ec:	f7ff fe30 	bl	8002350 <_ZN3PID8feedbackEf>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4a8e      	ldr	r2, [pc, #568]	; (800292c <main+0x2b0>)
 80026f4:	6013      	str	r3, [r2, #0]
      pid_roll_out = pid_roll.feedback(imu.angle_roll);
 80026f6:	4b84      	ldr	r3, [pc, #528]	; (8002908 <main+0x28c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	4619      	mov	r1, r3
 80026fe:	4888      	ldr	r0, [pc, #544]	; (8002920 <main+0x2a4>)
 8002700:	f7ff fe26 	bl	8002350 <_ZN3PID8feedbackEf>
 8002704:	4603      	mov	r3, r0
 8002706:	4a8a      	ldr	r2, [pc, #552]	; (8002930 <main+0x2b4>)
 8002708:	6013      	str	r3, [r2, #0]
      pid_yaw_out = pid_yaw.feedback(imu.gyro_yaw_rate_pid);
 800270a:	4b7f      	ldr	r3, [pc, #508]	; (8002908 <main+0x28c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4619      	mov	r1, r3
 8002712:	4885      	ldr	r0, [pc, #532]	; (8002928 <main+0x2ac>)
 8002714:	f7ff fe1c 	bl	8002350 <_ZN3PID8feedbackEf>
 8002718:	4603      	mov	r3, r0
 800271a:	4a86      	ldr	r2, [pc, #536]	; (8002934 <main+0x2b8>)
 800271c:	6013      	str	r3, [r2, #0]


      //-------------------- calculate and constrain motor output -------------------
      m1_out = constrainMotorVal(thrust_cmd + pid_pitch_out + pid_roll_out - pid_yaw_out); //Calculate the pulse for esc 1 (front-right - CCW)
 800271e:	4b86      	ldr	r3, [pc, #536]	; (8002938 <main+0x2bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a82      	ldr	r2, [pc, #520]	; (800292c <main+0x2b0>)
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe f93d 	bl	80009a8 <__addsf3>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	4b7f      	ldr	r3, [pc, #508]	; (8002930 <main+0x2b4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f7fe f935 	bl	80009a8 <__addsf3>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	4b7c      	ldr	r3, [pc, #496]	; (8002934 <main+0x2b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f7fe f92b 	bl	80009a4 <__aeabi_fsub>
 800274e:	4603      	mov	r3, r0
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fb37 	bl	8002dc4 <_Z17constrainMotorValf>
 8002756:	4603      	mov	r3, r0
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe f9d9 	bl	8000b10 <__aeabi_i2f>
 800275e:	4603      	mov	r3, r0
 8002760:	4a76      	ldr	r2, [pc, #472]	; (800293c <main+0x2c0>)
 8002762:	6013      	str	r3, [r2, #0]
      m2_out = constrainMotorVal(thrust_cmd + pid_pitch_out - pid_roll_out + pid_yaw_out); //Calculate the pulse for esc 2 (rear-right - CW)
 8002764:	4b74      	ldr	r3, [pc, #464]	; (8002938 <main+0x2bc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a70      	ldr	r2, [pc, #448]	; (800292c <main+0x2b0>)
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe f91a 	bl	80009a8 <__addsf3>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <main+0x2b4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f7fe f910 	bl	80009a4 <__aeabi_fsub>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	4b6a      	ldr	r3, [pc, #424]	; (8002934 <main+0x2b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f7fe f90a 	bl	80009a8 <__addsf3>
 8002794:	4603      	mov	r3, r0
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fb14 	bl	8002dc4 <_Z17constrainMotorValf>
 800279c:	4603      	mov	r3, r0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe f9b6 	bl	8000b10 <__aeabi_i2f>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4a66      	ldr	r2, [pc, #408]	; (8002940 <main+0x2c4>)
 80027a8:	6013      	str	r3, [r2, #0]
      m3_out = constrainMotorVal(thrust_cmd - pid_pitch_out - pid_roll_out - pid_yaw_out); //Calculate the pulse for esc 3 (rear-left - CCW)
 80027aa:	4b63      	ldr	r3, [pc, #396]	; (8002938 <main+0x2bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a5f      	ldr	r2, [pc, #380]	; (800292c <main+0x2b0>)
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe f8f5 	bl	80009a4 <__aeabi_fsub>
 80027ba:	4603      	mov	r3, r0
 80027bc:	461a      	mov	r2, r3
 80027be:	4b5c      	ldr	r3, [pc, #368]	; (8002930 <main+0x2b4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4619      	mov	r1, r3
 80027c4:	4610      	mov	r0, r2
 80027c6:	f7fe f8ed 	bl	80009a4 <__aeabi_fsub>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b59      	ldr	r3, [pc, #356]	; (8002934 <main+0x2b8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	4610      	mov	r0, r2
 80027d6:	f7fe f8e5 	bl	80009a4 <__aeabi_fsub>
 80027da:	4603      	mov	r3, r0
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 faf1 	bl	8002dc4 <_Z17constrainMotorValf>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe f993 	bl	8000b10 <__aeabi_i2f>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4a55      	ldr	r2, [pc, #340]	; (8002944 <main+0x2c8>)
 80027ee:	6013      	str	r3, [r2, #0]
      m4_out = constrainMotorVal(thrust_cmd - pid_pitch_out + pid_roll_out + pid_yaw_out); //Calculate the pulse for esc 4 (front-left - CW)
 80027f0:	4b51      	ldr	r3, [pc, #324]	; (8002938 <main+0x2bc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a4d      	ldr	r2, [pc, #308]	; (800292c <main+0x2b0>)
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe f8d2 	bl	80009a4 <__aeabi_fsub>
 8002800:	4603      	mov	r3, r0
 8002802:	461a      	mov	r2, r3
 8002804:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <main+0x2b4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f7fe f8cc 	bl	80009a8 <__addsf3>
 8002810:	4603      	mov	r3, r0
 8002812:	461a      	mov	r2, r3
 8002814:	4b47      	ldr	r3, [pc, #284]	; (8002934 <main+0x2b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f7fe f8c4 	bl	80009a8 <__addsf3>
 8002820:	4603      	mov	r3, r0
 8002822:	4618      	mov	r0, r3
 8002824:	f000 face 	bl	8002dc4 <_Z17constrainMotorValf>
 8002828:	4603      	mov	r3, r0
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe f970 	bl	8000b10 <__aeabi_i2f>
 8002830:	4603      	mov	r3, r0
 8002832:	4a45      	ldr	r2, [pc, #276]	; (8002948 <main+0x2cc>)
 8002834:	6013      	str	r3, [r2, #0]
      //-----------------------------------------------------------------------------

      //drive motors but add safe angle protection
      if (abs(imu.angle_pitch) >= SAFE_GUARD_ANGLE || abs(imu.angle_roll) >= SAFE_GUARD_ANGLE)
 8002836:	4b34      	ldr	r3, [pc, #208]	; (8002908 <main+0x28c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fdef 	bl	8001420 <_ZSt3absf>
 8002842:	4603      	mov	r3, r0
 8002844:	4941      	ldr	r1, [pc, #260]	; (800294c <main+0x2d0>)
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fb68 	bl	8000f1c <__aeabi_fcmpge>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10d      	bne.n	800286e <main+0x1f2>
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <main+0x28c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fde1 	bl	8001420 <_ZSt3absf>
 800285e:	4603      	mov	r3, r0
 8002860:	493a      	ldr	r1, [pc, #232]	; (800294c <main+0x2d0>)
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fb5a 	bl	8000f1c <__aeabi_fcmpge>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <main+0x1f6>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <main+0x1f8>
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <main+0x224>
      {
        escs.drive(PWM_MIN, PWM_MIN, PWM_MIN, PWM_MIN); //STOP motors
 8002878:	4b35      	ldr	r3, [pc, #212]	; (8002950 <main+0x2d4>)
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002886:	f640 620f 	movw	r2, #3599	; 0xe0f
 800288a:	f640 610f 	movw	r1, #3599	; 0xe0f
 800288e:	f7ff fcc3 	bl	8002218 <_ZN3ESC5driveEtttt>
        stop_due_to_angle = true;// flag bad angle
 8002892:	4b30      	ldr	r3, [pc, #192]	; (8002954 <main+0x2d8>)
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
        state = DRONE_STOP;//switch to stop state
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <main+0x288>)
 800289a:	2202      	movs	r2, #2
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e0b9      	b.n	8002a14 <main+0x398>
      }
      else
      {
        read_battery_and_compensate(m1_out, m2_out, m3_out, m4_out);
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <main+0x2cc>)
 80028a2:	4a28      	ldr	r2, [pc, #160]	; (8002944 <main+0x2c8>)
 80028a4:	4926      	ldr	r1, [pc, #152]	; (8002940 <main+0x2c4>)
 80028a6:	4825      	ldr	r0, [pc, #148]	; (800293c <main+0x2c0>)
 80028a8:	f000 fbc2 	bl	8003030 <_Z27read_battery_and_compensateRfS_S_S_>
        escs.drive(m1_out, m2_out, m3_out, m4_out);
 80028ac:	4b28      	ldr	r3, [pc, #160]	; (8002950 <main+0x2d4>)
 80028ae:	681e      	ldr	r6, [r3, #0]
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <main+0x2c0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fb81 	bl	8000fbc <__aeabi_f2uiz>
 80028ba:	4603      	mov	r3, r0
 80028bc:	fa1f f883 	uxth.w	r8, r3
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <main+0x2c4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fb79 	bl	8000fbc <__aeabi_f2uiz>
 80028ca:	4603      	mov	r3, r0
 80028cc:	fa1f f983 	uxth.w	r9, r3
 80028d0:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <main+0x2c8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fb71 	bl	8000fbc <__aeabi_f2uiz>
 80028da:	4603      	mov	r3, r0
 80028dc:	fa1f fa83 	uxth.w	sl, r3
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <main+0x2cc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe fb69 	bl	8000fbc <__aeabi_f2uiz>
 80028ea:	4603      	mov	r3, r0
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	4653      	mov	r3, sl
 80028f2:	464a      	mov	r2, r9
 80028f4:	4641      	mov	r1, r8
 80028f6:	4630      	mov	r0, r6
 80028f8:	f7ff fc8e 	bl	8002218 <_ZN3ESC5driveEtttt>
 80028fc:	e08a      	b.n	8002a14 <main+0x398>
 80028fe:	bf00      	nop
 8002900:	20000200 	.word	0x20000200
 8002904:	20000211 	.word	0x20000211
 8002908:	20000258 	.word	0x20000258
 800290c:	2000031c 	.word	0x2000031c
 8002910:	20000320 	.word	0x20000320
 8002914:	20000264 	.word	0x20000264
 8002918:	20000270 	.word	0x20000270
 800291c:	20000268 	.word	0x20000268
 8002920:	200002a0 	.word	0x200002a0
 8002924:	2000026c 	.word	0x2000026c
 8002928:	200002d0 	.word	0x200002d0
 800292c:	20000300 	.word	0x20000300
 8002930:	20000304 	.word	0x20000304
 8002934:	20000308 	.word	0x20000308
 8002938:	20000004 	.word	0x20000004
 800293c:	2000030c 	.word	0x2000030c
 8002940:	20000310 	.word	0x20000310
 8002944:	20000314 	.word	0x20000314
 8002948:	20000318 	.word	0x20000318
 800294c:	41d80000 	.word	0x41d80000
 8002950:	2000025c 	.word	0x2000025c
 8002954:	20000210 	.word	0x20000210
      }
    }

    //--------------------------- DRONE_CONNECTION_LOST -----------------------------
    else if (state == DRONE_CONNECTION_LOST)
 8002958:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <main+0x3d4>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d103      	bne.n	8002968 <main+0x2ec>
//          thrust_cmd = PWM_MIN;
//        escs.drive(thrust_cmd, thrust_cmd, thrust_cmd, thrust_cmd);
//        HAL_Delay((uint32_t)thrust_cmd);
//      }
    	//TODO: think about something better
      state = DRONE_STOP; //stop the drone
 8002960:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <main+0x3d4>)
 8002962:	2202      	movs	r2, #2
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e055      	b.n	8002a14 <main+0x398>
    }

    //--------------------------------- DRONE_STOP ----------------------------------
    else if (state == DRONE_STOP)
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <main+0x3d4>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d148      	bne.n	8002a02 <main+0x386>
    {
      //turn off the motors
      escs.drive(PWM_MIN, PWM_MIN, PWM_MIN, PWM_MIN);
 8002970:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <main+0x3d8>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	f640 630f 	movw	r3, #3599	; 0xe0f
 800297e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002982:	f640 610f 	movw	r1, #3599	; 0xe0f
 8002986:	f7ff fc47 	bl	8002218 <_ZN3ESC5driveEtttt>
      // pid1_roll_rate.reset();
      // pid1_yaw_rate.reset();
      // pid2_pitch.reset();
      // pid2_roll.reset();

      pid_yaw.reset();
 800298a:	4833      	ldr	r0, [pc, #204]	; (8002a58 <main+0x3dc>)
 800298c:	f7ff fd9e 	bl	80024cc <_ZN3PID5resetEv>
      pid_pitch.reset();
 8002990:	4832      	ldr	r0, [pc, #200]	; (8002a5c <main+0x3e0>)
 8002992:	f7ff fd9b 	bl	80024cc <_ZN3PID5resetEv>
      pid_roll.reset();
 8002996:	4832      	ldr	r0, [pc, #200]	; (8002a60 <main+0x3e4>)
 8002998:	f7ff fd98 	bl	80024cc <_ZN3PID5resetEv>

      pitch_setpoint = 0.0f;
 800299c:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <main+0x3e8>)
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
      roll_setpoint = 0.0f;
 80029a4:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <main+0x3ec>)
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
      yaw_setpoint = 0.0f;
 80029ac:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <main+0x3f0>)
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
      imu.reset(); //reset sensor vals to zero to start from ground again
 80029b4:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <main+0x3f4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fe81 	bl	80016c0 <_ZN6I2CIMU5resetEv>
      thrust_cmd = PWM_MIN;
 80029be:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <main+0x3f8>)
 80029c0:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <main+0x3fc>)
 80029c2:	601a      	str	r2, [r3, #0]

      //TODO: (add this in the drone manual)stop untill start btn is clicked
      if(stop_due_to_angle){
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <main+0x400>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d016      	beq.n	80029fa <main+0x37e>
			while (state != DRONE_FLY)
 80029cc:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <main+0x3d4>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d009      	beq.n	80029e8 <main+0x36c>
			{
			  HAL_GPIO_TogglePin(RED_LED);
 80029d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029d8:	4829      	ldr	r0, [pc, #164]	; (8002a80 <main+0x404>)
 80029da:	f001 fc10 	bl	80041fe <HAL_GPIO_TogglePin>
			  HAL_Delay(1000);
 80029de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029e2:	f001 f877 	bl	8003ad4 <HAL_Delay>
			while (state != DRONE_FLY)
 80029e6:	e7f1      	b.n	80029cc <main+0x350>
			}
			stop_due_to_angle = false; //reset flag
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <main+0x400>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RED_LED, GPIO_PIN_RESET);// turn off the red led
 80029ee:	2200      	movs	r2, #0
 80029f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f4:	4822      	ldr	r0, [pc, #136]	; (8002a80 <main+0x404>)
 80029f6:	f001 fbea 	bl	80041ce <HAL_GPIO_WritePin>
      }

      state = NONE; //do not enter in any state after this
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <main+0x3d4>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e008      	b.n	8002a14 <main+0x398>
    }

    //-------------------------- DRONE_CALIBRATE_ESCS -------------------------------
    //TODO: add this btn to app ?
    else if (state == DRONE_CALIBRATE_ESCS)
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <main+0x3d4>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d104      	bne.n	8002a14 <main+0x398>
    {
      calibrateESCS();
 8002a0a:	f000 f97b 	bl	8002d04 <_Z13calibrateESCSv>
      state = NONE; //do not enter in any state after this
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <main+0x3d4>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
    }

    //-------------------------------------------------------------------------------
    // Controller frequency to 250HZ
    // Current loop code delay is around 857us!!!
    while ((micros() - loop_time) < 4000)
 8002a14:	f000 fe02 	bl	800361c <micros>
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <main+0x408>)
 8002a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1e:	1a84      	subs	r4, r0, r2
 8002a20:	eb61 0503 	sbc.w	r5, r1, r3
 8002a24:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	42ab      	cmp	r3, r5
 8002a2e:	bf08      	it	eq
 8002a30:	42a2      	cmpeq	r2, r4
 8002a32:	bf2c      	ite	cs
 8002a34:	2301      	movcs	r3, #1
 8002a36:	2300      	movcc	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d000      	beq.n	8002a40 <main+0x3c4>
 8002a3e:	e7e9      	b.n	8002a14 <main+0x398>
      ;
    loop_time = micros();
 8002a40:	f000 fdec 	bl	800361c <micros>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	490e      	ldr	r1, [pc, #56]	; (8002a84 <main+0x408>)
 8002a4a:	e9c1 2300 	strd	r2, r3, [r1]
    if (state == DRONE_FLY)
 8002a4e:	e622      	b.n	8002696 <main+0x1a>
 8002a50:	20000211 	.word	0x20000211
 8002a54:	2000025c 	.word	0x2000025c
 8002a58:	200002d0 	.word	0x200002d0
 8002a5c:	20000270 	.word	0x20000270
 8002a60:	200002a0 	.word	0x200002a0
 8002a64:	20000264 	.word	0x20000264
 8002a68:	20000268 	.word	0x20000268
 8002a6c:	2000026c 	.word	0x2000026c
 8002a70:	20000258 	.word	0x20000258
 8002a74:	20000004 	.word	0x20000004
 8002a78:	4560f000 	.word	0x4560f000
 8002a7c:	20000210 	.word	0x20000210
 8002a80:	40010c00 	.word	0x40010c00
 8002a84:	20000200 	.word	0x20000200

08002a88 <_Z18SystemClock_Configv>:
  }
}

//================================ Config Proceadures ===============================
void SystemClock_Config(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b090      	sub	sp, #64	; 0x40
 8002a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a8e:	f107 0318 	add.w	r3, r7, #24
 8002a92:	2228      	movs	r2, #40	; 0x28
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 fe40 	bl	800771c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002abc:	2302      	movs	r3, #2
 8002abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ac6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002acc:	f107 0318 	add.w	r3, r7, #24
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f002 fbc5 	bl	8005260 <HAL_RCC_OscConfig>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
  {
//    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ada:	230f      	movs	r3, #15
 8002adc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002aec:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002af0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f002 fe32 	bl	8005760 <HAL_RCC_ClockConfig>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
  {
//    Error_Handler();TODO
  }
}
 8002b00:	bf00      	nop
 8002b02:	3740      	adds	r7, #64	; 0x40
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_ZL19MX_USART1_UART_Initv>:

static void MX_USART1_UART_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <_ZL19MX_USART1_UART_Initv+0x44>)
 8002b0e:	4a10      	ldr	r2, [pc, #64]	; (8002b50 <_ZL19MX_USART1_UART_Initv+0x48>)
 8002b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <_ZL19MX_USART1_UART_Initv+0x44>)
 8002b14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <_ZL19MX_USART1_UART_Initv+0x44>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <_ZL19MX_USART1_UART_Initv+0x44>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <_ZL19MX_USART1_UART_Initv+0x44>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <_ZL19MX_USART1_UART_Initv+0x44>)
 8002b2e:	220c      	movs	r2, #12
 8002b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <_ZL19MX_USART1_UART_Initv+0x44>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <_ZL19MX_USART1_UART_Initv+0x44>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b3e:	4803      	ldr	r0, [pc, #12]	; (8002b4c <_ZL19MX_USART1_UART_Initv+0x44>)
 8002b40:	f003 fe46 	bl	80067d0 <HAL_UART_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
  {
//    Error_Handler();TODO
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000214 	.word	0x20000214
 8002b50:	40013800 	.word	0x40013800

08002b54 <HAL_UART_RxCpltCallback>:

// UART interrupt handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  // LOG("IT: %c\n",(char) uart_data);
  phelper.loadByte((char)uart_data);
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_UART_RxCpltCallback+0x2c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_UART_RxCpltCallback+0x30>)
 8002b62:	7812      	ldrb	r2, [r2, #0]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fb78 	bl	800125c <_ZN11ProtoHelper8loadByteEc>
  HAL_UART_Receive_IT(&huart1, &uart_data, 1);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4905      	ldr	r1, [pc, #20]	; (8002b84 <HAL_UART_RxCpltCallback+0x30>)
 8002b70:	4805      	ldr	r0, [pc, #20]	; (8002b88 <HAL_UART_RxCpltCallback+0x34>)
 8002b72:	f003 ff0c 	bl	800698e <HAL_UART_Receive_IT>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000260 	.word	0x20000260
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000214 	.word	0x20000214

08002b8c <_ZL12MX_GPIO_Initv>:

static void MX_GPIO_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4a4a      	ldr	r2, [pc, #296]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	6193      	str	r3, [r2, #24]
 8002bac:	4b48      	ldr	r3, [pc, #288]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb8:	4b45      	ldr	r3, [pc, #276]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4a44      	ldr	r2, [pc, #272]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002bbe:	f043 0320 	orr.w	r3, r3, #32
 8002bc2:	6193      	str	r3, [r2, #24]
 8002bc4:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4a3e      	ldr	r2, [pc, #248]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6193      	str	r3, [r2, #24]
 8002bdc:	4b3c      	ldr	r3, [pc, #240]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be8:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4a38      	ldr	r2, [pc, #224]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002bee:	f043 0308 	orr.w	r3, r3, #8
 8002bf2:	6193      	str	r3, [r2, #24]
 8002bf4:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <_ZL12MX_GPIO_Initv+0x144>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002c00:	2200      	movs	r2, #0
 8002c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c06:	4833      	ldr	r0, [pc, #204]	; (8002cd4 <_ZL12MX_GPIO_Initv+0x148>)
 8002c08:	f001 fae1 	bl	80041ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLUE_LED, GPIO_PIN_RESET);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c12:	4831      	ldr	r0, [pc, #196]	; (8002cd8 <_ZL12MX_GPIO_Initv+0x14c>)
 8002c14:	f001 fadb 	bl	80041ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RED_LED, GPIO_PIN_RESET);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c1e:	482e      	ldr	r0, [pc, #184]	; (8002cd8 <_ZL12MX_GPIO_Initv+0x14c>)
 8002c20:	f001 fad5 	bl	80041ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2302      	movs	r3, #2
 8002c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4825      	ldr	r0, [pc, #148]	; (8002cd4 <_ZL12MX_GPIO_Initv+0x148>)
 8002c3e:	f001 f92b 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 (BLUE_LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c50:	2302      	movs	r3, #2
 8002c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c54:	f107 0310 	add.w	r3, r7, #16
 8002c58:	4619      	mov	r1, r3
 8002c5a:	481f      	ldr	r0, [pc, #124]	; (8002cd8 <_ZL12MX_GPIO_Initv+0x14c>)
 8002c5c:	f001 f91c 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 (RED_LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c66:	2301      	movs	r3, #1
 8002c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c72:	f107 0310 	add.w	r3, r7, #16
 8002c76:	4619      	mov	r1, r3
 8002c78:	4817      	ldr	r0, [pc, #92]	; (8002cd8 <_ZL12MX_GPIO_Initv+0x14c>)
 8002c7a:	f001 f90d 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 (BTN) */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c90:	f107 0310 	add.w	r3, r7, #16
 8002c94:	4619      	mov	r1, r3
 8002c96:	4810      	ldr	r0, [pc, #64]	; (8002cd8 <_ZL12MX_GPIO_Initv+0x14c>)
 8002c98:	f001 f8fe 	bl	8003e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <_ZL12MX_GPIO_Initv+0x150>)
 8002ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f107 0310 	add.w	r3, r7, #16
 8002cae:	4619      	mov	r1, r3
 8002cb0:	480b      	ldr	r0, [pc, #44]	; (8002ce0 <_ZL12MX_GPIO_Initv+0x154>)
 8002cb2:	f001 f8f1 	bl	8003e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2017      	movs	r0, #23
 8002cbc:	f001 f805 	bl	8003cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cc0:	2017      	movs	r0, #23
 8002cc2:	f001 f81e 	bl	8003d02 <HAL_NVIC_EnableIRQ>
}
 8002cc6:	bf00      	nop
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40011000 	.word	0x40011000
 8002cd8:	40010c00 	.word	0x40010c00
 8002cdc:	10210000 	.word	0x10210000
 8002ce0:	40010800 	.word	0x40010800

08002ce4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	80fb      	strh	r3, [r7, #6]
  state = DRONE_CONNECTION_LOST;
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	701a      	strb	r2, [r3, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20000211 	.word	0x20000211

08002d04 <_Z13calibrateESCSv>:

//================================== My Proceadures =================================

void calibrateESCS()
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af02      	add	r7, sp, #8
  // ESC CALIBRATION
  // KEEP MOTORS DISCONNECTED FROM BATTERY
  // CLICK THE BUTTON
  HAL_GPIO_WritePin(BLUE_LED, GPIO_PIN_SET); // indicate calibration start
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d10:	482a      	ldr	r0, [pc, #168]	; (8002dbc <_Z13calibrateESCSv+0xb8>)
 8002d12:	f001 fa5c 	bl	80041ce <HAL_GPIO_WritePin>
  while (HAL_GPIO_ReadPin(BUTTON_PIN) != GPIO_PIN_SET)
 8002d16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d1a:	4828      	ldr	r0, [pc, #160]	; (8002dbc <_Z13calibrateESCSv+0xb8>)
 8002d1c:	f001 fa40 	bl	80041a0 <HAL_GPIO_ReadPin>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	bf14      	ite	ne
 8002d26:	2301      	movne	r3, #1
 8002d28:	2300      	moveq	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d000      	beq.n	8002d32 <_Z13calibrateESCSv+0x2e>
 8002d30:	e7f1      	b.n	8002d16 <_Z13calibrateESCSv+0x12>
    ;
  escs.drive(PWM_MAX, PWM_MAX, PWM_MAX, PWM_MAX);
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <_Z13calibrateESCSv+0xbc>)
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002d40:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002d44:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8002d48:	f7ff fa66 	bl	8002218 <_ZN3ESC5driveEtttt>
  HAL_GPIO_WritePin(RED_LED, GPIO_PIN_SET); // indicate to click the btn again to continue calibration
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d52:	481a      	ldr	r0, [pc, #104]	; (8002dbc <_Z13calibrateESCSv+0xb8>)
 8002d54:	f001 fa3b 	bl	80041ce <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8002d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d5c:	f000 feba 	bl	8003ad4 <HAL_Delay>

  // NOW CONNECT MOTORS TO BATTERY
  // WAIT FOR THE SPECIAL BEEPS
  // CLICK THE BUTTON
  while (HAL_GPIO_ReadPin(BUTTON_PIN) != GPIO_PIN_SET)
 8002d60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d64:	4815      	ldr	r0, [pc, #84]	; (8002dbc <_Z13calibrateESCSv+0xb8>)
 8002d66:	f001 fa1b 	bl	80041a0 <HAL_GPIO_ReadPin>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d000      	beq.n	8002d7c <_Z13calibrateESCSv+0x78>
 8002d7a:	e7f1      	b.n	8002d60 <_Z13calibrateESCSv+0x5c>
    ;
  escs.drive(PWM_MIN, PWM_MIN, PWM_MIN, PWM_MIN);
 8002d7c:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <_Z13calibrateESCSv+0xbc>)
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002d8a:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002d8e:	f640 610f 	movw	r1, #3599	; 0xe0f
 8002d92:	f7ff fa41 	bl	8002218 <_ZN3ESC5driveEtttt>
  HAL_Delay(1000);
 8002d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d9a:	f000 fe9b 	bl	8003ad4 <HAL_Delay>

  // indicate calibration end
  HAL_GPIO_WritePin(RED_LED, GPIO_PIN_RESET);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002da4:	4805      	ldr	r0, [pc, #20]	; (8002dbc <_Z13calibrateESCSv+0xb8>)
 8002da6:	f001 fa12 	bl	80041ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLUE_LED, GPIO_PIN_RESET);
 8002daa:	2200      	movs	r2, #0
 8002dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002db0:	4802      	ldr	r0, [pc, #8]	; (8002dbc <_Z13calibrateESCSv+0xb8>)
 8002db2:	f001 fa0c 	bl	80041ce <HAL_GPIO_WritePin>
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40010c00 	.word	0x40010c00
 8002dc0:	2000025c 	.word	0x2000025c

08002dc4 <_Z17constrainMotorValf>:

int constrainMotorVal(float val)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if (val > PWM_MAX)
 8002dcc:	4914      	ldr	r1, [pc, #80]	; (8002e20 <_Z17constrainMotorValf+0x5c>)
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe f8ae 	bl	8000f30 <__aeabi_fcmpgt>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <_Z17constrainMotorValf+0x1c>
    val = PWM_MAX;
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <_Z17constrainMotorValf+0x5c>)
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	e017      	b.n	8002e10 <_Z17constrainMotorValf+0x4c>
  else if (val < PWM_MIN + pwm_operating)
 8002de0:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <_Z17constrainMotorValf+0x60>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f603 630f 	addw	r3, r3, #3599	; 0xe0f
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fe91 	bl	8000b10 <__aeabi_i2f>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe f87e 	bl	8000ef4 <__aeabi_fcmplt>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <_Z17constrainMotorValf+0x4c>
    val = PWM_MIN + pwm_operating; // add 180 or other val to not stop motors while in flight
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <_Z17constrainMotorValf+0x60>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f603 630f 	addw	r3, r3, #3599	; 0xe0f
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd fe82 	bl	8000b10 <__aeabi_i2f>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	607b      	str	r3, [r7, #4]
  return (int)val;
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7fe f8ad 	bl	8000f70 <__aeabi_f2iz>
 8002e16:	4603      	mov	r3, r0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	45e0f800 	.word	0x45e0f800
 8002e24:	2000020c 	.word	0x2000020c

08002e28 <_Z12init_batteryv>:

void init_battery()
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  //The STM32 uses a 12 bit analog to digital converter.
  //analogRead => 0 = 0V ..... 4095 = 3.3V
  //The voltage divider (1k & 10k) is 1:11.
  //analogRead => 0 = 0V ..... 1252 = 11.1 V ..... 4095 = 36.3V(not needed)
  //11.1 / 1252 =  1/ 112.81
  battery_voltage = (float)(ADC_read()) / 112.81f;
 8002e2c:	f000 f8c4 	bl	8002fb8 <_Z8ADC_readv>
 8002e30:	4603      	mov	r3, r0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fe68 	bl	8000b08 <__aeabi_ui2f>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4905      	ldr	r1, [pc, #20]	; (8002e50 <_Z12init_batteryv+0x28>)
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd ff6f 	bl	8000d20 <__aeabi_fdiv>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <_Z12init_batteryv+0x2c>)
 8002e48:	601a      	str	r2, [r3, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	42e19eb8 	.word	0x42e19eb8
 8002e54:	20000008 	.word	0x20000008

08002e58 <_Z8ADC_initv>:

void ADC_init()
{
 8002e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
  // CLK config for ADC1
  // ADC clock can be 14 Mhz at max. So we need to divide the
  //   APB2 by 6 to make it 12 Mhz
  // Ensure ADCPRE is zero
  RCC->CFGR &= ~(0b11 << 14);
 8002e60:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a52      	ldr	r2, [pc, #328]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002e66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e6a:	6053      	str	r3, [r2, #4]
  // Set prescaler to 6
  RCC->CFGR |= (0b10 << 14);
 8002e6c:	4b50      	ldr	r3, [pc, #320]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a4f      	ldr	r2, [pc, #316]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e76:	6053      	str	r3, [r2, #4]

  // Enable alternate function clock. Bit 0 in RCC APB2ENR register
  RCC->APB2ENR |= (1 << 0);
 8002e78:	4b4d      	ldr	r3, [pc, #308]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	4a4c      	ldr	r2, [pc, #304]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6193      	str	r3, [r2, #24]
  // Enable GPIOD clock. Bit 5 in RCC APB2ENR register
  RCC->APB2ENR |= (1 << 5);
 8002e84:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	4a49      	ldr	r2, [pc, #292]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002e8a:	f043 0320 	orr.w	r3, r3, #32
 8002e8e:	6193      	str	r3, [r2, #24]
  // Enable GPIOC clock. Bit 4 in RCC APB2ENR register
  RCC->APB2ENR |= (1 << 4);
 8002e90:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	4a46      	ldr	r2, [pc, #280]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002e96:	f043 0310 	orr.w	r3, r3, #16
 8002e9a:	6193      	str	r3, [r2, #24]
  // Enable clock for ADC1 clock. Bit 9 in RCC APB2ENR register
  RCC->APB2ENR |= (1 << 9);
 8002e9c:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4a43      	ldr	r2, [pc, #268]	; (8002fb0 <_Z8ADC_initv+0x158>)
 8002ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea6:	6193      	str	r3, [r2, #24]

  //LL ADC
  ADC1->CR2 &= ~ADC_CR2_ALIGN_Msk; // Enable right alignment
 8002ea8:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a41      	ldr	r2, [pc, #260]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eb2:	6093      	str	r3, [r2, #8]
  ADC1->CR2 &= ~ADC_CR2_CONT_Msk;  // Enable single conversion
 8002eb4:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a3e      	ldr	r2, [pc, #248]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002eba:	f023 0302 	bic.w	r3, r3, #2
 8002ebe:	6093      	str	r3, [r2, #8]
  ADC1->CR2 |= ADC_CR2_EXTSEL_Msk; // enable software trigger SWSRART
 8002ec0:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002ec6:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8002eca:	6093      	str	r3, [r2, #8]

  //config sample time
  ADC1->SMPR2 = 0; //1.5 ADC cycles
 8002ecc:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]

  //configre regular channel to 1 conversion for CH9
  ADC1->SQR1 = 0U; // set L[3:0] to make 1 coversion
 8002ed2:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  ADC1->SQR3 = 9U; // set CH9 as first in the sequence (CHN9 = PB1)
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002eda:	2209      	movs	r2, #9
 8002edc:	635a      	str	r2, [r3, #52]	; 0x34

  ADC1->CR2 |= ADC_CR2_ADON_Msk; // Power on ADC
 8002ede:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6093      	str	r3, [r2, #8]

  //Reset calibration and calibrate the ADC for better measurements
  //+ gain few ADC clk cycles to satisfy T_stab after powering on the ADC
  uint32_t init_time = micros();
 8002eea:	f000 fb97 	bl	800361c <micros>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	607b      	str	r3, [r7, #4]
  ADC1->CR2 |= ADC_CR2_RSTCAL_Msk;               // reset calibration
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	4a2e      	ldr	r2, [pc, #184]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002efc:	f043 0308 	orr.w	r3, r3, #8
 8002f00:	6093      	str	r3, [r2, #8]
  while ((ADC1->CR2 & ADC_CR2_RSTCAL_Msk) != 0U) //wait for RSTCAL bit to reset
 8002f02:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bf14      	ite	ne
 8002f0e:	2301      	movne	r3, #1
 8002f10:	2300      	moveq	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d019      	beq.n	8002f4c <_Z8ADC_initv+0xf4>
  {
    if ((micros() - init_time) > ADC_TIMOUT)
 8002f18:	f000 fb80 	bl	800361c <micros>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	ebb0 0802 	subs.w	r8, r0, r2
 8002f28:	eb61 0903 	sbc.w	r9, r1, r3
 8002f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	454b      	cmp	r3, r9
 8002f36:	bf08      	it	eq
 8002f38:	4542      	cmpeq	r2, r8
 8002f3a:	bf34      	ite	cc
 8002f3c:	2301      	movcc	r3, #1
 8002f3e:	2300      	movcs	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0dd      	beq.n	8002f02 <_Z8ADC_initv+0xaa>
      AdcErrorHandler();
 8002f46:	f000 f8bf 	bl	80030c8 <_Z15AdcErrorHandlerv>
  while ((ADC1->CR2 & ADC_CR2_RSTCAL_Msk) != 0U) //wait for RSTCAL bit to reset
 8002f4a:	e7da      	b.n	8002f02 <_Z8ADC_initv+0xaa>
  }
  ADC1->CR2 |= ADC_CR2_CAL_Msk; //calibrate
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	6093      	str	r3, [r2, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL_Msk) != 0)
 8002f58:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <_Z8ADC_initv+0x15c>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d000      	beq.n	8002f70 <_Z8ADC_initv+0x118>
 8002f6e:	e7f3      	b.n	8002f58 <_Z8ADC_initv+0x100>
    ; //wait for CAL bit to reset
  {
    if ((micros() - init_time) > ADC_TIMOUT)
 8002f70:	f000 fb54 	bl	800361c <micros>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	1a84      	subs	r4, r0, r2
 8002f7e:	eb61 0503 	sbc.w	r5, r1, r3
 8002f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	42ab      	cmp	r3, r5
 8002f8c:	bf08      	it	eq
 8002f8e:	42a2      	cmpeq	r2, r4
 8002f90:	bf34      	ite	cc
 8002f92:	2301      	movcc	r3, #1
 8002f94:	2300      	movcs	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <_Z8ADC_initv+0x148>
      AdcErrorHandler();
 8002f9c:	f000 f894 	bl	80030c8 <_Z15AdcErrorHandlerv>
  }

  init_battery();
 8002fa0:	f7ff ff42 	bl	8002e28 <_Z12init_batteryv>
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40012400 	.word	0x40012400

08002fb8 <_Z8ADC_readv>:

uint32_t ADC_read()
{
 8002fb8:	b5b0      	push	{r4, r5, r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
  uint32_t init_time = micros();
 8002fbe:	f000 fb2d 	bl	800361c <micros>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	607b      	str	r3, [r7, #4]

  ADC1->CR2 |= ADC_CR2_ADON_Msk; // start conversion
 8002fca:	4b18      	ldr	r3, [pc, #96]	; (800302c <_Z8ADC_readv+0x74>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <_Z8ADC_readv+0x74>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6093      	str	r3, [r2, #8]
  while ((ADC1->SR & ADC_SR_EOC) != ADC_SR_EOC)
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <_Z8ADC_readv+0x74>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	bf14      	ite	ne
 8002fe2:	2301      	movne	r3, #1
 8002fe4:	2300      	moveq	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d018      	beq.n	800301e <_Z8ADC_readv+0x66>
  { // waite for conversion flag
    if ((micros() - init_time) > ADC_TIMOUT)
 8002fec:	f000 fb16 	bl	800361c <micros>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	1a84      	subs	r4, r0, r2
 8002ffa:	eb61 0503 	sbc.w	r5, r1, r3
 8002ffe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	42ab      	cmp	r3, r5
 8003008:	bf08      	it	eq
 800300a:	42a2      	cmpeq	r2, r4
 800300c:	bf34      	ite	cc
 800300e:	2301      	movcc	r3, #1
 8003010:	2300      	movcs	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0de      	beq.n	8002fd6 <_Z8ADC_readv+0x1e>
      AdcErrorHandler();
 8003018:	f000 f856 	bl	80030c8 <_Z15AdcErrorHandlerv>
  while ((ADC1->SR & ADC_SR_EOC) != ADC_SR_EOC)
 800301c:	e7db      	b.n	8002fd6 <_Z8ADC_readv+0x1e>
  }

  return ADC1->DR; // read data (clears EOC auto)
 800301e:	4b03      	ldr	r3, [pc, #12]	; (800302c <_Z8ADC_readv+0x74>)
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bdb0      	pop	{r4, r5, r7, pc}
 800302a:	bf00      	nop
 800302c:	40012400 	.word	0x40012400

08003030 <_Z27read_battery_and_compensateRfS_S_S_>:

void read_battery_and_compensate(float &v1, float &v2, float &v3, float &v4)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  //analogRead => 0 = 0V ..... 4095 = 3.3V
  //The voltage divider (1k & 10k) is 1:11.
  //analogRead => 0 = 0V ..... 1252 = 11.1 V ..... 4095 = 36.3V(not needed)
  //11.1 / 1252 =  1/ 112.81.
  //410.1 = 112.81 / 0.08
  battery_voltage = battery_voltage * 0.92 + ((float)(ADC_read() / 1410.1f)); //read and filter
 800303e:	4b1a      	ldr	r3, [pc, #104]	; (80030a8 <_Z27read_battery_and_compensateRfS_S_S_+0x78>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd f9f0 	bl	8000428 <__aeabi_f2d>
 8003048:	a315      	add	r3, pc, #84	; (adr r3, 80030a0 <_Z27read_battery_and_compensateRfS_S_S_+0x70>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fa43 	bl	80004d8 <__aeabi_dmul>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4614      	mov	r4, r2
 8003058:	461d      	mov	r5, r3
 800305a:	f7ff ffad 	bl	8002fb8 <_Z8ADC_readv>
 800305e:	4603      	mov	r3, r0
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fd51 	bl	8000b08 <__aeabi_ui2f>
 8003066:	4603      	mov	r3, r0
 8003068:	4910      	ldr	r1, [pc, #64]	; (80030ac <_Z27read_battery_and_compensateRfS_S_S_+0x7c>)
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fe58 	bl	8000d20 <__aeabi_fdiv>
 8003070:	4603      	mov	r3, r0
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd f9d8 	bl	8000428 <__aeabi_f2d>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4620      	mov	r0, r4
 800307e:	4629      	mov	r1, r5
 8003080:	f7fd f874 	bl	800016c <__adddf3>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	f7fd fc36 	bl	80008fc <__aeabi_d2f>
 8003090:	4603      	mov	r3, r0
 8003092:	4a05      	ldr	r2, [pc, #20]	; (80030a8 <_Z27read_battery_and_compensateRfS_S_S_+0x78>)
 8003094:	6013      	str	r3, [r2, #0]
//   v1 += v1* scale;
//   v2 += v2* scale;
//   v3 += v3* scale;
//   v4 += v4* scale;
//  }
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bdb0      	pop	{r4, r5, r7, pc}
 800309e:	bf00      	nop
 80030a0:	d70a3d71 	.word	0xd70a3d71
 80030a4:	3fed70a3 	.word	0x3fed70a3
 80030a8:	20000008 	.word	0x20000008
 80030ac:	44b04333 	.word	0x44b04333

080030b0 <_Z15EscErrorHandlerv>:

void EscErrorHandler()
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  //TODO: if use LCD display a message error for PWM
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <_Z15I2cErrorHandlerv>:

void I2cErrorHandler()
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  //TODO: if use LCD display a message error for I2C
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <_Z15AdcErrorHandlerv>:
void AdcErrorHandler()
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  //TODO: if use LCD display a message error for ADC
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <_Z15commandCallbackP7Command>:

//Proto+ callback
void commandCallback(Command *command)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b098      	sub	sp, #96	; 0x60
 80030d8:	af02      	add	r7, sp, #8
 80030da:	6078      	str	r0, [r7, #4]

  cmd = command->getNameAsChar();
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7fd ffe1 	bl	80010a4 <_ZN7Command13getNameAsCharEv>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	4baa      	ldr	r3, [pc, #680]	; (8003390 <_Z15commandCallbackP7Command+0x2bc>)
 80030e8:	701a      	strb	r2, [r3, #0]

  switch (cmd)
 80030ea:	4ba9      	ldr	r3, [pc, #676]	; (8003390 <_Z15commandCallbackP7Command+0x2bc>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	3b41      	subs	r3, #65	; 0x41
 80030f0:	2b28      	cmp	r3, #40	; 0x28
 80030f2:	f200 81a6 	bhi.w	8003442 <_Z15commandCallbackP7Command+0x36e>
 80030f6:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <_Z15commandCallbackP7Command+0x28>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	080031d9 	.word	0x080031d9
 8003100:	08003207 	.word	0x08003207
 8003104:	08003235 	.word	0x08003235
 8003108:	08003263 	.word	0x08003263
 800310c:	08003291 	.word	0x08003291
 8003110:	080032bf 	.word	0x080032bf
 8003114:	080032ed 	.word	0x080032ed
 8003118:	0800331b 	.word	0x0800331b
 800311c:	08003349 	.word	0x08003349
 8003120:	08003443 	.word	0x08003443
 8003124:	08003443 	.word	0x08003443
 8003128:	08003443 	.word	0x08003443
 800312c:	08003443 	.word	0x08003443
 8003130:	08003443 	.word	0x08003443
 8003134:	08003377 	.word	0x08003377
 8003138:	08003441 	.word	0x08003441
 800313c:	080033bd 	.word	0x080033bd
 8003140:	08003441 	.word	0x08003441
 8003144:	080031a9 	.word	0x080031a9
 8003148:	080031b9 	.word	0x080031b9
 800314c:	08003443 	.word	0x08003443
 8003150:	08003443 	.word	0x08003443
 8003154:	08003443 	.word	0x08003443
 8003158:	080031b1 	.word	0x080031b1
 800315c:	08003441 	.word	0x08003441
 8003160:	08003443 	.word	0x08003443
 8003164:	08003443 	.word	0x08003443
 8003168:	08003443 	.word	0x08003443
 800316c:	08003443 	.word	0x08003443
 8003170:	08003443 	.word	0x08003443
 8003174:	08003443 	.word	0x08003443
 8003178:	08003443 	.word	0x08003443
 800317c:	08003443 	.word	0x08003443
 8003180:	08003443 	.word	0x08003443
 8003184:	08003443 	.word	0x08003443
 8003188:	08003443 	.word	0x08003443
 800318c:	08003443 	.word	0x08003443
 8003190:	08003443 	.word	0x08003443
 8003194:	08003443 	.word	0x08003443
 8003198:	08003443 	.word	0x08003443
 800319c:	080031a1 	.word	0x080031a1
  {

  case 'i': //handshake from Proto+ that UART connection is well established
    init_drone = true;
 80031a0:	4b7c      	ldr	r3, [pc, #496]	; (8003394 <_Z15commandCallbackP7Command+0x2c0>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
    break;
 80031a6:	e14c      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'S': //start the drone
    state = DRONE_FLY;
 80031a8:	4b7b      	ldr	r3, [pc, #492]	; (8003398 <_Z15commandCallbackP7Command+0x2c4>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
    break;
 80031ae:	e148      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'X': //stop the drone
    state = DRONE_STOP;
 80031b0:	4b79      	ldr	r3, [pc, #484]	; (8003398 <_Z15commandCallbackP7Command+0x2c4>)
 80031b2:	2202      	movs	r2, #2
 80031b4:	701a      	strb	r2, [r3, #0]
    break;
 80031b6:	e144      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'T': //Thrust command
    thrust_cmd = command->getParam(0)->getIntValue();
 80031b8:	2100      	movs	r1, #0
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd ff93 	bl	80010e6 <_ZN7Command8getParamEh>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd ffd5 	bl	8001172 <_ZN9Parameter11getIntValueEv>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd fca0 	bl	8000b10 <__aeabi_i2f>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4a72      	ldr	r2, [pc, #456]	; (800339c <_Z15commandCallbackP7Command+0x2c8>)
 80031d4:	6013      	str	r3, [r2, #0]
    // escs.drive(cmd_val, cmd_val, cmd_val, cmd_val);
    break;
 80031d6:	e134      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>
  case 'Y': //yaw command (IN: degrees/sec)
    /*CODE*/
    break;

  case 'A': //kp_pitch setting
    pid_pitch.setProportional(command->getParam(0)->getIntValue() / 100.0f);
 80031d8:	2100      	movs	r1, #0
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd ff83 	bl	80010e6 <_ZN7Command8getParamEh>
 80031e0:	4603      	mov	r3, r0
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd ffc5 	bl	8001172 <_ZN9Parameter11getIntValueEv>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd fc90 	bl	8000b10 <__aeabi_i2f>
 80031f0:	4603      	mov	r3, r0
 80031f2:	496b      	ldr	r1, [pc, #428]	; (80033a0 <_Z15commandCallbackP7Command+0x2cc>)
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd fd93 	bl	8000d20 <__aeabi_fdiv>
 80031fa:	4603      	mov	r3, r0
 80031fc:	4619      	mov	r1, r3
 80031fe:	4869      	ldr	r0, [pc, #420]	; (80033a4 <_Z15commandCallbackP7Command+0x2d0>)
 8003200:	f7ff f86d 	bl	80022de <_ZN3PID15setProportionalEf>
    break;
 8003204:	e11d      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'B': //ki_pitch setting
    pid_pitch.setIntegral(command->getParam(0)->getIntValue() / 1000.0f);
 8003206:	2100      	movs	r1, #0
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7fd ff6c 	bl	80010e6 <_ZN7Command8getParamEh>
 800320e:	4603      	mov	r3, r0
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd ffae 	bl	8001172 <_ZN9Parameter11getIntValueEv>
 8003216:	4603      	mov	r3, r0
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd fc79 	bl	8000b10 <__aeabi_i2f>
 800321e:	4603      	mov	r3, r0
 8003220:	4961      	ldr	r1, [pc, #388]	; (80033a8 <_Z15commandCallbackP7Command+0x2d4>)
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fd7c 	bl	8000d20 <__aeabi_fdiv>
 8003228:	4603      	mov	r3, r0
 800322a:	4619      	mov	r1, r3
 800322c:	485d      	ldr	r0, [pc, #372]	; (80033a4 <_Z15commandCallbackP7Command+0x2d0>)
 800322e:	f7ff f869 	bl	8002304 <_ZN3PID11setIntegralEf>
    break;
 8003232:	e106      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'C': //kd_pitch setting
    pid_pitch.setDerivative(command->getParam(0)->getIntValue() / 10.0f);
 8003234:	2100      	movs	r1, #0
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd ff55 	bl	80010e6 <_ZN7Command8getParamEh>
 800323c:	4603      	mov	r3, r0
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd ff97 	bl	8001172 <_ZN9Parameter11getIntValueEv>
 8003244:	4603      	mov	r3, r0
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd fc62 	bl	8000b10 <__aeabi_i2f>
 800324c:	4603      	mov	r3, r0
 800324e:	4957      	ldr	r1, [pc, #348]	; (80033ac <_Z15commandCallbackP7Command+0x2d8>)
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd fd65 	bl	8000d20 <__aeabi_fdiv>
 8003256:	4603      	mov	r3, r0
 8003258:	4619      	mov	r1, r3
 800325a:	4852      	ldr	r0, [pc, #328]	; (80033a4 <_Z15commandCallbackP7Command+0x2d0>)
 800325c:	f7ff f865 	bl	800232a <_ZN3PID13setDerivativeEf>
    break;
 8003260:	e0ef      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'D': //kp (YAW rate) setting
    pid_yaw.setProportional(command->getParam(0)->getIntValue() / 100.0f);
 8003262:	2100      	movs	r1, #0
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fd ff3e 	bl	80010e6 <_ZN7Command8getParamEh>
 800326a:	4603      	mov	r3, r0
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd ff80 	bl	8001172 <_ZN9Parameter11getIntValueEv>
 8003272:	4603      	mov	r3, r0
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd fc4b 	bl	8000b10 <__aeabi_i2f>
 800327a:	4603      	mov	r3, r0
 800327c:	4948      	ldr	r1, [pc, #288]	; (80033a0 <_Z15commandCallbackP7Command+0x2cc>)
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd fd4e 	bl	8000d20 <__aeabi_fdiv>
 8003284:	4603      	mov	r3, r0
 8003286:	4619      	mov	r1, r3
 8003288:	4849      	ldr	r0, [pc, #292]	; (80033b0 <_Z15commandCallbackP7Command+0x2dc>)
 800328a:	f7ff f828 	bl	80022de <_ZN3PID15setProportionalEf>
    break;
 800328e:	e0d8      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'E': //ki (YAW rate) setting
    pid_yaw.setIntegral(command->getParam(0)->getIntValue() / 1000.0f);
 8003290:	2100      	movs	r1, #0
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd ff27 	bl	80010e6 <_ZN7Command8getParamEh>
 8003298:	4603      	mov	r3, r0
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd ff69 	bl	8001172 <_ZN9Parameter11getIntValueEv>
 80032a0:	4603      	mov	r3, r0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd fc34 	bl	8000b10 <__aeabi_i2f>
 80032a8:	4603      	mov	r3, r0
 80032aa:	493f      	ldr	r1, [pc, #252]	; (80033a8 <_Z15commandCallbackP7Command+0x2d4>)
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fd37 	bl	8000d20 <__aeabi_fdiv>
 80032b2:	4603      	mov	r3, r0
 80032b4:	4619      	mov	r1, r3
 80032b6:	483e      	ldr	r0, [pc, #248]	; (80033b0 <_Z15commandCallbackP7Command+0x2dc>)
 80032b8:	f7ff f824 	bl	8002304 <_ZN3PID11setIntegralEf>
    break;
 80032bc:	e0c1      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'F': //kd (YAW rate) setting
    pid_yaw.setDerivative(command->getParam(0)->getIntValue() / 10.0f);
 80032be:	2100      	movs	r1, #0
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fd ff10 	bl	80010e6 <_ZN7Command8getParamEh>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd ff52 	bl	8001172 <_ZN9Parameter11getIntValueEv>
 80032ce:	4603      	mov	r3, r0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd fc1d 	bl	8000b10 <__aeabi_i2f>
 80032d6:	4603      	mov	r3, r0
 80032d8:	4934      	ldr	r1, [pc, #208]	; (80033ac <_Z15commandCallbackP7Command+0x2d8>)
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd fd20 	bl	8000d20 <__aeabi_fdiv>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4619      	mov	r1, r3
 80032e4:	4832      	ldr	r0, [pc, #200]	; (80033b0 <_Z15commandCallbackP7Command+0x2dc>)
 80032e6:	f7ff f820 	bl	800232a <_ZN3PID13setDerivativeEf>
    break;
 80032ea:	e0aa      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'G': //kp_roll 
    pid_roll.setProportional(command->getParam(0)->getIntValue() / 100.0f);
 80032ec:	2100      	movs	r1, #0
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fef9 	bl	80010e6 <_ZN7Command8getParamEh>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd ff3b 	bl	8001172 <_ZN9Parameter11getIntValueEv>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd fc06 	bl	8000b10 <__aeabi_i2f>
 8003304:	4603      	mov	r3, r0
 8003306:	4926      	ldr	r1, [pc, #152]	; (80033a0 <_Z15commandCallbackP7Command+0x2cc>)
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd fd09 	bl	8000d20 <__aeabi_fdiv>
 800330e:	4603      	mov	r3, r0
 8003310:	4619      	mov	r1, r3
 8003312:	4828      	ldr	r0, [pc, #160]	; (80033b4 <_Z15commandCallbackP7Command+0x2e0>)
 8003314:	f7fe ffe3 	bl	80022de <_ZN3PID15setProportionalEf>
    break;
 8003318:	e093      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'H': //ki_roll 
    pid_roll.setIntegral(command->getParam(0)->getIntValue() / 1000.0f);
 800331a:	2100      	movs	r1, #0
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7fd fee2 	bl	80010e6 <_ZN7Command8getParamEh>
 8003322:	4603      	mov	r3, r0
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd ff24 	bl	8001172 <_ZN9Parameter11getIntValueEv>
 800332a:	4603      	mov	r3, r0
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd fbef 	bl	8000b10 <__aeabi_i2f>
 8003332:	4603      	mov	r3, r0
 8003334:	491c      	ldr	r1, [pc, #112]	; (80033a8 <_Z15commandCallbackP7Command+0x2d4>)
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd fcf2 	bl	8000d20 <__aeabi_fdiv>
 800333c:	4603      	mov	r3, r0
 800333e:	4619      	mov	r1, r3
 8003340:	481c      	ldr	r0, [pc, #112]	; (80033b4 <_Z15commandCallbackP7Command+0x2e0>)
 8003342:	f7fe ffdf 	bl	8002304 <_ZN3PID11setIntegralEf>
    break;
 8003346:	e07c      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'I': //kd_roll 
    pid_roll.setDerivative(command->getParam(0)->getIntValue() / 10.0f);
 8003348:	2100      	movs	r1, #0
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fd fecb 	bl	80010e6 <_ZN7Command8getParamEh>
 8003350:	4603      	mov	r3, r0
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd ff0d 	bl	8001172 <_ZN9Parameter11getIntValueEv>
 8003358:	4603      	mov	r3, r0
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd fbd8 	bl	8000b10 <__aeabi_i2f>
 8003360:	4603      	mov	r3, r0
 8003362:	4912      	ldr	r1, [pc, #72]	; (80033ac <_Z15commandCallbackP7Command+0x2d8>)
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd fcdb 	bl	8000d20 <__aeabi_fdiv>
 800336a:	4603      	mov	r3, r0
 800336c:	4619      	mov	r1, r3
 800336e:	4811      	ldr	r0, [pc, #68]	; (80033b4 <_Z15commandCallbackP7Command+0x2e0>)
 8003370:	f7fe ffdb 	bl	800232a <_ZN3PID13setDerivativeEf>
    break;
 8003374:	e065      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>

  case 'O':
    pwm_operating = command->getParam(0)->getIntValue();
 8003376:	2100      	movs	r1, #0
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7fd feb4 	bl	80010e6 <_ZN7Command8getParamEh>
 800337e:	4603      	mov	r3, r0
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd fef6 	bl	8001172 <_ZN9Parameter11getIntValueEv>
 8003386:	4603      	mov	r3, r0
 8003388:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <_Z15commandCallbackP7Command+0x2e4>)
 800338a:	6013      	str	r3, [r2, #0]
    break;
 800338c:	e059      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>
 800338e:	bf00      	nop
 8003390:	200001fc 	.word	0x200001fc
 8003394:	20000208 	.word	0x20000208
 8003398:	20000211 	.word	0x20000211
 800339c:	20000004 	.word	0x20000004
 80033a0:	42c80000 	.word	0x42c80000
 80033a4:	20000270 	.word	0x20000270
 80033a8:	447a0000 	.word	0x447a0000
 80033ac:	41200000 	.word	0x41200000
 80033b0:	200002d0 	.word	0x200002d0
 80033b4:	200002a0 	.word	0x200002a0
 80033b8:	2000020c 	.word	0x2000020c
  case 'Q':
	char pData[60];
	int pitch = imu.angle_pitch *100;
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <_Z15commandCallbackP7Command+0x378>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	4923      	ldr	r1, [pc, #140]	; (8003450 <_Z15commandCallbackP7Command+0x37c>)
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd fbf7 	bl	8000bb8 <__aeabi_fmul>
 80033ca:	4603      	mov	r3, r0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fdcf 	bl	8000f70 <__aeabi_f2iz>
 80033d2:	4603      	mov	r3, r0
 80033d4:	657b      	str	r3, [r7, #84]	; 0x54
	int roll  = imu.angle_roll *100 ;
 80033d6:	4b1d      	ldr	r3, [pc, #116]	; (800344c <_Z15commandCallbackP7Command+0x378>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	491c      	ldr	r1, [pc, #112]	; (8003450 <_Z15commandCallbackP7Command+0x37c>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd fbea 	bl	8000bb8 <__aeabi_fmul>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fdc2 	bl	8000f70 <__aeabi_f2iz>
 80033ec:	4603      	mov	r3, r0
 80033ee:	653b      	str	r3, [r7, #80]	; 0x50
	int yaw   = imu.gyro_yaw_rate_pid *100;
 80033f0:	4b16      	ldr	r3, [pc, #88]	; (800344c <_Z15commandCallbackP7Command+0x378>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4916      	ldr	r1, [pc, #88]	; (8003450 <_Z15commandCallbackP7Command+0x37c>)
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd fbdd 	bl	8000bb8 <__aeabi_fmul>
 80033fe:	4603      	mov	r3, r0
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd fdb5 	bl	8000f70 <__aeabi_f2iz>
 8003406:	4603      	mov	r3, r0
 8003408:	64fb      	str	r3, [r7, #76]	; 0x4c
	sprintf(pData, "p: %d | r: %d | y: %d \n\0", pitch, roll, yaw);
 800340a:	f107 000c 	add.w	r0, r7, #12
 800340e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003416:	490f      	ldr	r1, [pc, #60]	; (8003454 <_Z15commandCallbackP7Command+0x380>)
 8003418:	f004 fa82 	bl	8007920 <siprintf>
	uint16_t size = strlen(pData);
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	4618      	mov	r0, r3
 8003422:	f7fc fe95 	bl	8000150 <strlen>
 8003426:	4603      	mov	r3, r0
 8003428:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit(&huart1, (uint8_t*) pData, size, 1000);
 800342c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8003430:	f107 010c 	add.w	r1, r7, #12
 8003434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003438:	4807      	ldr	r0, [pc, #28]	; (8003458 <_Z15commandCallbackP7Command+0x384>)
 800343a:	f003 fa16 	bl	800686a <HAL_UART_Transmit>
	break;
 800343e:	e000      	b.n	8003442 <_Z15commandCallbackP7Command+0x36e>
    break;
 8003440:	bf00      	nop
  }
}
 8003442:	bf00      	nop
 8003444:	3758      	adds	r7, #88	; 0x58
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000258 	.word	0x20000258
 8003450:	42c80000 	.word	0x42c80000
 8003454:	08008210 	.word	0x08008210
 8003458:	20000214 	.word	0x20000214

0800345c <_Z41__static_initialization_and_destruction_0ii>:
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af02      	add	r7, sp, #8
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d13e      	bne.n	80034ea <_Z41__static_initialization_and_destruction_0ii+0x8e>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003472:	4293      	cmp	r3, r2
 8003474:	d139      	bne.n	80034ea <_Z41__static_initialization_and_destruction_0ii+0x8e>
I2CIMU &imu = I2CIMU::getInstance();
 8003476:	f7fe f83b 	bl	80014f0 <_ZN6I2CIMU11getInstanceEv>
 800347a:	4603      	mov	r3, r0
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800347e:	6013      	str	r3, [r2, #0]
ESC &escs = ESC::getInstance();
 8003480:	f7fe fd90 	bl	8001fa4 <_ZN3ESC11getInstanceEv>
 8003484:	4603      	mov	r3, r0
 8003486:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003488:	6013      	str	r3, [r2, #0]
ProtoHelper &phelper = ProtoHelper::getInstance();
 800348a:	f7fd feab 	bl	80011e4 <_ZN11ProtoHelper11getInstanceEv>
 800348e:	4603      	mov	r3, r0
 8003490:	4a1a      	ldr	r2, [pc, #104]	; (80034fc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003492:	6013      	str	r3, [r2, #0]
PID pid_pitch(0,0, 0, 1800, PID_DIRECTION_NEGATIVE); // 1800 is MAX/2 motor output
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	4816      	ldr	r0, [pc, #88]	; (8003504 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80034ac:	f7fe fed6 	bl	800225c <_ZN3PIDC1Efffif>
PID pid_roll(0, 0, 0, 1800, PID_DIRECTION_NEGATIVE);  // 1800 is MAX/2 motor output
 80034b0:	4b13      	ldr	r3, [pc, #76]	; (8003500 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0100 	mov.w	r1, #0
 80034c6:	4810      	ldr	r0, [pc, #64]	; (8003508 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80034c8:	f7fe fec8 	bl	800225c <_ZN3PIDC1Efffif>
PID pid_yaw(0, 0, 0, 1800, PID_DIRECTION_POSITIVE);   // 1800 is MAX/2 motor output
 80034cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	4809      	ldr	r0, [pc, #36]	; (800350c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80034e6:	f7fe feb9 	bl	800225c <_ZN3PIDC1Efffif>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000258 	.word	0x20000258
 80034f8:	2000025c 	.word	0x2000025c
 80034fc:	20000260 	.word	0x20000260
 8003500:	bf800000 	.word	0xbf800000
 8003504:	20000270 	.word	0x20000270
 8003508:	200002a0 	.word	0x200002a0
 800350c:	200002d0 	.word	0x200002d0

08003510 <_GLOBAL__sub_I__ZN6I2CIMU18setI2cErrorHandlerEPFvvE>:
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
 8003514:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003518:	2001      	movs	r0, #1
 800351a:	f7ff ff9f 	bl	800345c <_Z41__static_initialization_and_destruction_0ii>
 800351e:	bd80      	pop	{r7, pc}

08003520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db0b      	blt.n	800354a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4906      	ldr	r1, [pc, #24]	; (8003554 <__NVIC_EnableIRQ+0x34>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	2b00      	cmp	r3, #0
 800356a:	db0a      	blt.n	8003582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	490c      	ldr	r1, [pc, #48]	; (80035a4 <__NVIC_SetPriority+0x4c>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	0112      	lsls	r2, r2, #4
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	440b      	add	r3, r1
 800357c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003580:	e00a      	b.n	8003598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4908      	ldr	r1, [pc, #32]	; (80035a8 <__NVIC_SetPriority+0x50>)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	3b04      	subs	r3, #4
 8003590:	0112      	lsls	r2, r2, #4
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	440b      	add	r3, r1
 8003596:	761a      	strb	r2, [r3, #24]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000e100 	.word	0xe000e100
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <micros_init>:
 */

#include "micros.h"


void micros_init(){
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0

	// Enable clock for that module for TIM3. Bit1 in RCC APB1ENR register
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN_Msk;
 80035b0:	4b18      	ldr	r3, [pc, #96]	; (8003614 <micros_init+0x68>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	4a17      	ldr	r2, [pc, #92]	; (8003614 <micros_init+0x68>)
 80035b6:	f043 0302 	orr.w	r3, r3, #2
 80035ba:	61d3      	str	r3, [r2, #28]

	// CONFIG USING COTROL REGISTER 1 TO:
	TIM3->CR1 = 0; // Reset CR1 just in case
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <micros_init+0x6c>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
	TIM3->CR1 |= TIM_CR1_ARPE_Msk; // enable auto-reload preload
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <micros_init+0x6c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a14      	ldr	r2, [pc, #80]	; (8003618 <micros_init+0x6c>)
 80035c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035cc:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= TIM_CR1_URS_Msk; // only overflow generates event
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <micros_init+0x6c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a11      	ldr	r2, [pc, #68]	; (8003618 <micros_init+0x6c>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	6013      	str	r3, [r2, #0]
	
	// set prescaler to no division
	TIM3->PSC = 0;
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <micros_init+0x6c>)
 80035dc:	2200      	movs	r2, #0
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
	// which should generate 10 uS update events, ie 0.1MHz interrupts
	// TIM3->ARR = 719; 
	
	// Set the auto-reload value to count from 0 to 287 (div clock by 288)
	// which should generate 4 uS update events, ie 0.1MHz interrupts
	TIM3->ARR = 287; 
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <micros_init+0x6c>)
 80035e2:	f240 121f 	movw	r2, #287	; 0x11f
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update Interrupt Enable
	TIM3->DIER |= TIM_DIER_UIE_Msk;
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <micros_init+0x6c>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <micros_init+0x6c>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	60d3      	str	r3, [r2, #12]

	// Priority level 3
	NVIC_SetPriority(TIM3_IRQn, 0x03); //TODO: try level 0 (Max priority)
 80035f4:	2103      	movs	r1, #3
 80035f6:	201d      	movs	r0, #29
 80035f8:	f7ff ffae 	bl	8003558 <__NVIC_SetPriority>
	// Enable TIM3 from NVIC register
	NVIC_EnableIRQ(TIM3_IRQn);
 80035fc:	201d      	movs	r0, #29
 80035fe:	f7ff ff8f 	bl	8003520 <__NVIC_EnableIRQ>

	// Finally enable TIM3 module
	TIM3->CR1 |= TIM_CR1_CEN_Msk;
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <micros_init+0x6c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a04      	ldr	r2, [pc, #16]	; (8003618 <micros_init+0x6c>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6013      	str	r3, [r2, #0]

}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	40000400 	.word	0x40000400

0800361c <micros>:

uint64_t micros(){
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
	return uu_ticks;
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <micros+0x14>)
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	20000328 	.word	0x20000328

08003634 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
	// check the update event flag "UIF" 
	if((TIM3->SR & TIM_SR_UIF_Msk) == TIM_SR_UIF_Msk){
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <TIM3_IRQHandler+0x38>)
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d10e      	bne.n	8003662 <TIM3_IRQHandler+0x2e>
		// uu_ticks+=10; // increment each 10 Micro-seconds
		uu_ticks+=4; // increment each 4 Micro-seconds
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <TIM3_IRQHandler+0x3c>)
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	1d10      	adds	r0, r2, #4
 800364c:	f143 0100 	adc.w	r1, r3, #0
 8003650:	4b07      	ldr	r3, [pc, #28]	; (8003670 <TIM3_IRQHandler+0x3c>)
 8003652:	e9c3 0100 	strd	r0, r1, [r3]
		TIM3->SR &= ~TIM_SR_UIF_Msk; //rest the flag
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <TIM3_IRQHandler+0x38>)
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	4a04      	ldr	r2, [pc, #16]	; (800366c <TIM3_IRQHandler+0x38>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	6113      	str	r3, [r2, #16]
	}
}
 8003662:	bf00      	nop
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40000400 	.word	0x40000400
 8003670:	20000328 	.word	0x20000328

08003674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <HAL_MspInit+0x5c>)
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <HAL_MspInit+0x5c>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6193      	str	r3, [r2, #24]
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_MspInit+0x5c>)
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <HAL_MspInit+0x5c>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <HAL_MspInit+0x5c>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	61d3      	str	r3, [r2, #28]
 800369e:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <HAL_MspInit+0x5c>)
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80036aa:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <HAL_MspInit+0x60>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <HAL_MspInit+0x60>)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40010000 	.word	0x40010000

080036d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0310 	add.w	r3, r7, #16
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a15      	ldr	r2, [pc, #84]	; (8003748 <HAL_I2C_MspInit+0x70>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d123      	bne.n	8003740 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <HAL_I2C_MspInit+0x74>)
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <HAL_I2C_MspInit+0x74>)
 80036fe:	f043 0308 	orr.w	r3, r3, #8
 8003702:	6193      	str	r3, [r2, #24]
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <HAL_I2C_MspInit+0x74>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003710:	23c0      	movs	r3, #192	; 0xc0
 8003712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003714:	2312      	movs	r3, #18
 8003716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003718:	2303      	movs	r3, #3
 800371a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800371c:	f107 0310 	add.w	r3, r7, #16
 8003720:	4619      	mov	r1, r3
 8003722:	480b      	ldr	r0, [pc, #44]	; (8003750 <HAL_I2C_MspInit+0x78>)
 8003724:	f000 fbb8 	bl	8003e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <HAL_I2C_MspInit+0x74>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4a07      	ldr	r2, [pc, #28]	; (800374c <HAL_I2C_MspInit+0x74>)
 800372e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003732:	61d3      	str	r3, [r2, #28]
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_I2C_MspInit+0x74>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003740:	bf00      	nop
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40005400 	.word	0x40005400
 800374c:	40021000 	.word	0x40021000
 8003750:	40010c00 	.word	0x40010c00

08003754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d10b      	bne.n	800377e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <HAL_TIM_Base_MspInit+0x34>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	4a07      	ldr	r2, [pc, #28]	; (8003788 <HAL_TIM_Base_MspInit+0x34>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	61d3      	str	r3, [r2, #28]
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_TIM_Base_MspInit+0x34>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	40021000 	.word	0x40021000

0800378c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037aa:	d117      	bne.n	80037dc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_TIM_MspPostInit+0x58>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <HAL_TIM_MspPostInit+0x58>)
 80037b2:	f043 0304 	orr.w	r3, r3, #4
 80037b6:	6193      	str	r3, [r2, #24]
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_TIM_MspPostInit+0x58>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80037c4:	230f      	movs	r3, #15
 80037c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037cc:	2302      	movs	r3, #2
 80037ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d0:	f107 0310 	add.w	r3, r7, #16
 80037d4:	4619      	mov	r1, r3
 80037d6:	4804      	ldr	r0, [pc, #16]	; (80037e8 <HAL_TIM_MspPostInit+0x5c>)
 80037d8:	f000 fb5e 	bl	8003e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80037dc:	bf00      	nop
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40010800 	.word	0x40010800

080037ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 0310 	add.w	r3, r7, #16
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a20      	ldr	r2, [pc, #128]	; (8003888 <HAL_UART_MspInit+0x9c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d139      	bne.n	8003880 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_UART_MspInit+0xa0>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	4a1e      	ldr	r2, [pc, #120]	; (800388c <HAL_UART_MspInit+0xa0>)
 8003812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003816:	6193      	str	r3, [r2, #24]
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_UART_MspInit+0xa0>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_UART_MspInit+0xa0>)
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	4a18      	ldr	r2, [pc, #96]	; (800388c <HAL_UART_MspInit+0xa0>)
 800382a:	f043 0304 	orr.w	r3, r3, #4
 800382e:	6193      	str	r3, [r2, #24]
 8003830:	4b16      	ldr	r3, [pc, #88]	; (800388c <HAL_UART_MspInit+0xa0>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800383c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003846:	2303      	movs	r3, #3
 8003848:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384a:	f107 0310 	add.w	r3, r7, #16
 800384e:	4619      	mov	r1, r3
 8003850:	480f      	ldr	r0, [pc, #60]	; (8003890 <HAL_UART_MspInit+0xa4>)
 8003852:	f000 fb21 	bl	8003e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800385a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003864:	f107 0310 	add.w	r3, r7, #16
 8003868:	4619      	mov	r1, r3
 800386a:	4809      	ldr	r0, [pc, #36]	; (8003890 <HAL_UART_MspInit+0xa4>)
 800386c:	f000 fb14 	bl	8003e98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003870:	2200      	movs	r2, #0
 8003872:	2100      	movs	r1, #0
 8003874:	2025      	movs	r0, #37	; 0x25
 8003876:	f000 fa28 	bl	8003cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800387a:	2025      	movs	r0, #37	; 0x25
 800387c:	f000 fa41 	bl	8003d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003880:	bf00      	nop
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40013800 	.word	0x40013800
 800388c:	40021000 	.word	0x40021000
 8003890:	40010800 	.word	0x40010800

08003894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003898:	e7fe      	b.n	8003898 <NMI_Handler+0x4>

0800389a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800389e:	e7fe      	b.n	800389e <HardFault_Handler+0x4>

080038a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038a4:	e7fe      	b.n	80038a4 <MemManage_Handler+0x4>

080038a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038aa:	e7fe      	b.n	80038aa <BusFault_Handler+0x4>

080038ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <UsageFault_Handler+0x4>

080038b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038da:	f000 f8df 	bl	8003a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80038e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80038ea:	f000 fca1 	bl	8004230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038f8:	4802      	ldr	r0, [pc, #8]	; (8003904 <USART1_IRQHandler+0x10>)
 80038fa:	f003 f879 	bl	80069f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000214 	.word	0x20000214

08003908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
	return 1;
 800390c:	2301      	movs	r3, #1
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <_kill>:

int _kill(int pid, int sig)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003920:	f003 feb4 	bl	800768c <__errno>
 8003924:	4603      	mov	r3, r0
 8003926:	2216      	movs	r2, #22
 8003928:	601a      	str	r2, [r3, #0]
	return -1;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <_exit>:

void _exit (int status)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800393e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ffe7 	bl	8003916 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003948:	e7fe      	b.n	8003948 <_exit+0x12>
	...

0800394c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003954:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <_sbrk+0x5c>)
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <_sbrk+0x60>)
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <_sbrk+0x64>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <_sbrk+0x64>)
 800396a:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <_sbrk+0x68>)
 800396c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <_sbrk+0x64>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4413      	add	r3, r2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	429a      	cmp	r2, r3
 800397a:	d207      	bcs.n	800398c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800397c:	f003 fe86 	bl	800768c <__errno>
 8003980:	4603      	mov	r3, r0
 8003982:	220c      	movs	r2, #12
 8003984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800398a:	e009      	b.n	80039a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800398c:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <_sbrk+0x64>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <_sbrk+0x64>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	4a05      	ldr	r2, [pc, #20]	; (80039b0 <_sbrk+0x64>)
 800399c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800399e:	68fb      	ldr	r3, [r7, #12]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20005000 	.word	0x20005000
 80039ac:	00000400 	.word	0x00000400
 80039b0:	20000330 	.word	0x20000330
 80039b4:	200003e8 	.word	0x200003e8

080039b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <Reset_Handler>:
 80039c4:	480c      	ldr	r0, [pc, #48]	; (80039f8 <LoopFillZerobss+0x12>)
 80039c6:	490d      	ldr	r1, [pc, #52]	; (80039fc <LoopFillZerobss+0x16>)
 80039c8:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <LoopFillZerobss+0x1a>)
 80039ca:	2300      	movs	r3, #0
 80039cc:	e002      	b.n	80039d4 <LoopCopyDataInit>

080039ce <CopyDataInit>:
 80039ce:	58d4      	ldr	r4, [r2, r3]
 80039d0:	50c4      	str	r4, [r0, r3]
 80039d2:	3304      	adds	r3, #4

080039d4 <LoopCopyDataInit>:
 80039d4:	18c4      	adds	r4, r0, r3
 80039d6:	428c      	cmp	r4, r1
 80039d8:	d3f9      	bcc.n	80039ce <CopyDataInit>
 80039da:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <LoopFillZerobss+0x1e>)
 80039dc:	4c0a      	ldr	r4, [pc, #40]	; (8003a08 <LoopFillZerobss+0x22>)
 80039de:	2300      	movs	r3, #0
 80039e0:	e001      	b.n	80039e6 <LoopFillZerobss>

080039e2 <FillZerobss>:
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	3204      	adds	r2, #4

080039e6 <LoopFillZerobss>:
 80039e6:	42a2      	cmp	r2, r4
 80039e8:	d3fb      	bcc.n	80039e2 <FillZerobss>
 80039ea:	f7ff ffe5 	bl	80039b8 <SystemInit>
 80039ee:	f003 fe53 	bl	8007698 <__libc_init_array>
 80039f2:	f7fe fe43 	bl	800267c <main>
 80039f6:	4770      	bx	lr
 80039f8:	20000000 	.word	0x20000000
 80039fc:	20000080 	.word	0x20000080
 8003a00:	080083f4 	.word	0x080083f4
 8003a04:	20000080 	.word	0x20000080
 8003a08:	200003e4 	.word	0x200003e4

08003a0c <ADC1_2_IRQHandler>:
 8003a0c:	e7fe      	b.n	8003a0c <ADC1_2_IRQHandler>
	...

08003a10 <HAL_Init>:
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_Init+0x28>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <HAL_Init+0x28>)
 8003a1a:	f043 0310 	orr.w	r3, r3, #16
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	2003      	movs	r0, #3
 8003a22:	f000 f947 	bl	8003cb4 <HAL_NVIC_SetPriorityGrouping>
 8003a26:	200f      	movs	r0, #15
 8003a28:	f000 f808 	bl	8003a3c <HAL_InitTick>
 8003a2c:	f7ff fe22 	bl	8003674 <HAL_MspInit>
 8003a30:	2300      	movs	r3, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40022000 	.word	0x40022000

08003a3c <HAL_InitTick>:
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_InitTick+0x54>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_InitTick+0x58>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f95f 	bl	8003d1e <HAL_SYSTICK_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_InitTick+0x2e>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e00e      	b.n	8003a88 <HAL_InitTick+0x4c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b0f      	cmp	r3, #15
 8003a6e:	d80a      	bhi.n	8003a86 <HAL_InitTick+0x4a>
 8003a70:	2200      	movs	r2, #0
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a78:	f000 f927 	bl	8003cca <HAL_NVIC_SetPriority>
 8003a7c:	4a06      	ldr	r2, [pc, #24]	; (8003a98 <HAL_InitTick+0x5c>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	e000      	b.n	8003a88 <HAL_InitTick+0x4c>
 8003a86:	2301      	movs	r3, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	2000000c 	.word	0x2000000c
 8003a94:	20000014 	.word	0x20000014
 8003a98:	20000010 	.word	0x20000010

08003a9c <HAL_IncTick>:
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_IncTick+0x1c>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_IncTick+0x20>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4413      	add	r3, r2
 8003aac:	4a03      	ldr	r2, [pc, #12]	; (8003abc <HAL_IncTick+0x20>)
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	20000014 	.word	0x20000014
 8003abc:	200003d0 	.word	0x200003d0

08003ac0 <HAL_GetTick>:
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4b02      	ldr	r3, [pc, #8]	; (8003ad0 <HAL_GetTick+0x10>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	200003d0 	.word	0x200003d0

08003ad4 <HAL_Delay>:
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	f7ff fff0 	bl	8003ac0 <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aec:	d005      	beq.n	8003afa <HAL_Delay+0x26>
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <HAL_Delay+0x44>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	bf00      	nop
 8003afc:	f7ff ffe0 	bl	8003ac0 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d8f7      	bhi.n	8003afc <HAL_Delay+0x28>
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000014 	.word	0x20000014

08003b1c <__NVIC_SetPriorityGrouping>:
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <__NVIC_SetPriorityGrouping+0x44>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	021a      	lsls	r2, r3, #8
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <__NVIC_SetPriorityGrouping+0x44>)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	60d3      	str	r3, [r2, #12]
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <__NVIC_GetPriorityGrouping>:
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <__NVIC_GetPriorityGrouping+0x18>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	4618      	mov	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <__NVIC_EnableIRQ>:
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	db0b      	blt.n	8003baa <__NVIC_EnableIRQ+0x2a>
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	f003 021f 	and.w	r2, r3, #31
 8003b98:	4906      	ldr	r1, [pc, #24]	; (8003bb4 <__NVIC_EnableIRQ+0x34>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr
 8003bb4:	e000e100 	.word	0xe000e100

08003bb8 <__NVIC_SetPriority>:
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	6039      	str	r1, [r7, #0]
 8003bc2:	71fb      	strb	r3, [r7, #7]
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	db0a      	blt.n	8003be2 <__NVIC_SetPriority+0x2a>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	490c      	ldr	r1, [pc, #48]	; (8003c04 <__NVIC_SetPriority+0x4c>)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	0112      	lsls	r2, r2, #4
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003be0:	e00a      	b.n	8003bf8 <__NVIC_SetPriority+0x40>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4908      	ldr	r1, [pc, #32]	; (8003c08 <__NVIC_SetPriority+0x50>)
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	3b04      	subs	r3, #4
 8003bf0:	0112      	lsls	r2, r2, #4
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	761a      	strb	r2, [r3, #24]
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000e100 	.word	0xe000e100
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <NVIC_EncodePriority>:
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	61fb      	str	r3, [r7, #28]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f1c3 0307 	rsb	r3, r3, #7
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	bf28      	it	cs
 8003c2a:	2304      	movcs	r3, #4
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3304      	adds	r3, #4
 8003c32:	2b06      	cmp	r3, #6
 8003c34:	d902      	bls.n	8003c3c <NVIC_EncodePriority+0x30>
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3b03      	subs	r3, #3
 8003c3a:	e000      	b.n	8003c3e <NVIC_EncodePriority+0x32>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	401a      	ands	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	409a      	lsls	r2, r3
 8003c54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	43d9      	mvns	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	400b      	ands	r3, r1
 8003c64:	4313      	orrs	r3, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	3724      	adds	r7, #36	; 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <SysTick_Config>:
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c80:	d301      	bcc.n	8003c86 <SysTick_Config+0x16>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e00f      	b.n	8003ca6 <SysTick_Config+0x36>
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <SysTick_Config+0x40>)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	6053      	str	r3, [r2, #4]
 8003c8e:	210f      	movs	r1, #15
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c94:	f7ff ff90 	bl	8003bb8 <__NVIC_SetPriority>
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <SysTick_Config+0x40>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
 8003c9e:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <SysTick_Config+0x40>)
 8003ca0:	2207      	movs	r2, #7
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	e000e010 	.word	0xe000e010

08003cb4 <HAL_NVIC_SetPriorityGrouping>:
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff2d 	bl	8003b1c <__NVIC_SetPriorityGrouping>
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_NVIC_SetPriority>:
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	73fb      	strb	r3, [r7, #15]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	f7ff ff42 	bl	8003b64 <__NVIC_GetPriorityGrouping>
 8003ce0:	6178      	str	r0, [r7, #20]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	6978      	ldr	r0, [r7, #20]
 8003ce8:	f7ff ff90 	bl	8003c0c <NVIC_EncodePriority>
 8003cec:	4602      	mov	r2, r0
 8003cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ff5f 	bl	8003bb8 <__NVIC_SetPriority>
 8003cfa:	bf00      	nop
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_NVIC_EnableIRQ>:
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	4603      	mov	r3, r0
 8003d0a:	71fb      	strb	r3, [r7, #7]
 8003d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff ff35 	bl	8003b80 <__NVIC_EnableIRQ>
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_SYSTICK_Config>:
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff ffa2 	bl	8003c70 <SysTick_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_DMA_Abort>:
 8003d36:	b480      	push	{r7}
 8003d38:	b085      	sub	sp, #20
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d008      	beq.n	8003d5e <HAL_DMA_Abort+0x28>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2020 	strb.w	r2, [r3, #32]
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e020      	b.n	8003da0 <HAL_DMA_Abort+0x6a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 020e 	bic.w	r2, r2, #14
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0201 	bic.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	2101      	movs	r1, #1
 8003d88:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2020 	strb.w	r2, [r3, #32]
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
	...

08003dac <HAL_DMA_Abort_IT>:
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	2300      	movs	r3, #0
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d005      	beq.n	8003dce <HAL_DMA_Abort_IT+0x22>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	e051      	b.n	8003e72 <HAL_DMA_Abort_IT+0xc6>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 020e 	bic.w	r2, r2, #14
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a22      	ldr	r2, [pc, #136]	; (8003e7c <HAL_DMA_Abort_IT+0xd0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d029      	beq.n	8003e4c <HAL_DMA_Abort_IT+0xa0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <HAL_DMA_Abort_IT+0xd4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d022      	beq.n	8003e48 <HAL_DMA_Abort_IT+0x9c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <HAL_DMA_Abort_IT+0xd8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d01a      	beq.n	8003e42 <HAL_DMA_Abort_IT+0x96>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <HAL_DMA_Abort_IT+0xdc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d012      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x90>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <HAL_DMA_Abort_IT+0xe0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00a      	beq.n	8003e36 <HAL_DMA_Abort_IT+0x8a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1a      	ldr	r2, [pc, #104]	; (8003e90 <HAL_DMA_Abort_IT+0xe4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d102      	bne.n	8003e30 <HAL_DMA_Abort_IT+0x84>
 8003e2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e2e:	e00e      	b.n	8003e4e <HAL_DMA_Abort_IT+0xa2>
 8003e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e34:	e00b      	b.n	8003e4e <HAL_DMA_Abort_IT+0xa2>
 8003e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e3a:	e008      	b.n	8003e4e <HAL_DMA_Abort_IT+0xa2>
 8003e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e40:	e005      	b.n	8003e4e <HAL_DMA_Abort_IT+0xa2>
 8003e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e46:	e002      	b.n	8003e4e <HAL_DMA_Abort_IT+0xa2>
 8003e48:	2310      	movs	r3, #16
 8003e4a:	e000      	b.n	8003e4e <HAL_DMA_Abort_IT+0xa2>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	4a11      	ldr	r2, [pc, #68]	; (8003e94 <HAL_DMA_Abort_IT+0xe8>)
 8003e50:	6053      	str	r3, [r2, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2020 	strb.w	r2, [r3, #32]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_DMA_Abort_IT+0xc6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40020008 	.word	0x40020008
 8003e80:	4002001c 	.word	0x4002001c
 8003e84:	40020030 	.word	0x40020030
 8003e88:	40020044 	.word	0x40020044
 8003e8c:	40020058 	.word	0x40020058
 8003e90:	4002006c 	.word	0x4002006c
 8003e94:	40020000 	.word	0x40020000

08003e98 <HAL_GPIO_Init>:
 8003e98:	b480      	push	{r7}
 8003e9a:	b08b      	sub	sp, #44	; 0x2c
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	623b      	str	r3, [r7, #32]
 8003eaa:	e169      	b.n	8004180 <HAL_GPIO_Init+0x2e8>
 8003eac:	2201      	movs	r2, #1
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	f040 8158 	bne.w	800417a <HAL_GPIO_Init+0x2e2>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4a9a      	ldr	r2, [pc, #616]	; (8004138 <HAL_GPIO_Init+0x2a0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d05e      	beq.n	8003f92 <HAL_GPIO_Init+0xfa>
 8003ed4:	4a98      	ldr	r2, [pc, #608]	; (8004138 <HAL_GPIO_Init+0x2a0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d875      	bhi.n	8003fc6 <HAL_GPIO_Init+0x12e>
 8003eda:	4a98      	ldr	r2, [pc, #608]	; (800413c <HAL_GPIO_Init+0x2a4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d058      	beq.n	8003f92 <HAL_GPIO_Init+0xfa>
 8003ee0:	4a96      	ldr	r2, [pc, #600]	; (800413c <HAL_GPIO_Init+0x2a4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d86f      	bhi.n	8003fc6 <HAL_GPIO_Init+0x12e>
 8003ee6:	4a96      	ldr	r2, [pc, #600]	; (8004140 <HAL_GPIO_Init+0x2a8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d052      	beq.n	8003f92 <HAL_GPIO_Init+0xfa>
 8003eec:	4a94      	ldr	r2, [pc, #592]	; (8004140 <HAL_GPIO_Init+0x2a8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d869      	bhi.n	8003fc6 <HAL_GPIO_Init+0x12e>
 8003ef2:	4a94      	ldr	r2, [pc, #592]	; (8004144 <HAL_GPIO_Init+0x2ac>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d04c      	beq.n	8003f92 <HAL_GPIO_Init+0xfa>
 8003ef8:	4a92      	ldr	r2, [pc, #584]	; (8004144 <HAL_GPIO_Init+0x2ac>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d863      	bhi.n	8003fc6 <HAL_GPIO_Init+0x12e>
 8003efe:	4a92      	ldr	r2, [pc, #584]	; (8004148 <HAL_GPIO_Init+0x2b0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d046      	beq.n	8003f92 <HAL_GPIO_Init+0xfa>
 8003f04:	4a90      	ldr	r2, [pc, #576]	; (8004148 <HAL_GPIO_Init+0x2b0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d85d      	bhi.n	8003fc6 <HAL_GPIO_Init+0x12e>
 8003f0a:	2b12      	cmp	r3, #18
 8003f0c:	d82a      	bhi.n	8003f64 <HAL_GPIO_Init+0xcc>
 8003f0e:	2b12      	cmp	r3, #18
 8003f10:	d859      	bhi.n	8003fc6 <HAL_GPIO_Init+0x12e>
 8003f12:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <HAL_GPIO_Init+0x80>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f93 	.word	0x08003f93
 8003f1c:	08003f6d 	.word	0x08003f6d
 8003f20:	08003f7f 	.word	0x08003f7f
 8003f24:	08003fc1 	.word	0x08003fc1
 8003f28:	08003fc7 	.word	0x08003fc7
 8003f2c:	08003fc7 	.word	0x08003fc7
 8003f30:	08003fc7 	.word	0x08003fc7
 8003f34:	08003fc7 	.word	0x08003fc7
 8003f38:	08003fc7 	.word	0x08003fc7
 8003f3c:	08003fc7 	.word	0x08003fc7
 8003f40:	08003fc7 	.word	0x08003fc7
 8003f44:	08003fc7 	.word	0x08003fc7
 8003f48:	08003fc7 	.word	0x08003fc7
 8003f4c:	08003fc7 	.word	0x08003fc7
 8003f50:	08003fc7 	.word	0x08003fc7
 8003f54:	08003fc7 	.word	0x08003fc7
 8003f58:	08003fc7 	.word	0x08003fc7
 8003f5c:	08003f75 	.word	0x08003f75
 8003f60:	08003f89 	.word	0x08003f89
 8003f64:	4a79      	ldr	r2, [pc, #484]	; (800414c <HAL_GPIO_Init+0x2b4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <HAL_GPIO_Init+0xfa>
 8003f6a:	e02c      	b.n	8003fc6 <HAL_GPIO_Init+0x12e>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	623b      	str	r3, [r7, #32]
 8003f72:	e029      	b.n	8003fc8 <HAL_GPIO_Init+0x130>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	623b      	str	r3, [r7, #32]
 8003f7c:	e024      	b.n	8003fc8 <HAL_GPIO_Init+0x130>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	3308      	adds	r3, #8
 8003f84:	623b      	str	r3, [r7, #32]
 8003f86:	e01f      	b.n	8003fc8 <HAL_GPIO_Init+0x130>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	623b      	str	r3, [r7, #32]
 8003f90:	e01a      	b.n	8003fc8 <HAL_GPIO_Init+0x130>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <HAL_GPIO_Init+0x108>
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	623b      	str	r3, [r7, #32]
 8003f9e:	e013      	b.n	8003fc8 <HAL_GPIO_Init+0x130>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d105      	bne.n	8003fb4 <HAL_GPIO_Init+0x11c>
 8003fa8:	2308      	movs	r3, #8
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	611a      	str	r2, [r3, #16]
 8003fb2:	e009      	b.n	8003fc8 <HAL_GPIO_Init+0x130>
 8003fb4:	2308      	movs	r3, #8
 8003fb6:	623b      	str	r3, [r7, #32]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	615a      	str	r2, [r3, #20]
 8003fbe:	e003      	b.n	8003fc8 <HAL_GPIO_Init+0x130>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	623b      	str	r3, [r7, #32]
 8003fc4:	e000      	b.n	8003fc8 <HAL_GPIO_Init+0x130>
 8003fc6:	bf00      	nop
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2bff      	cmp	r3, #255	; 0xff
 8003fcc:	d801      	bhi.n	8003fd2 <HAL_GPIO_Init+0x13a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	e001      	b.n	8003fd6 <HAL_GPIO_Init+0x13e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2bff      	cmp	r3, #255	; 0xff
 8003fdc:	d802      	bhi.n	8003fe4 <HAL_GPIO_Init+0x14c>
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	e002      	b.n	8003fea <HAL_GPIO_Init+0x152>
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	3b08      	subs	r3, #8
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	210f      	movs	r1, #15
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	6a39      	ldr	r1, [r7, #32]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	431a      	orrs	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80b1 	beq.w	800417a <HAL_GPIO_Init+0x2e2>
 8004018:	4b4d      	ldr	r3, [pc, #308]	; (8004150 <HAL_GPIO_Init+0x2b8>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	4a4c      	ldr	r2, [pc, #304]	; (8004150 <HAL_GPIO_Init+0x2b8>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6193      	str	r3, [r2, #24]
 8004024:	4b4a      	ldr	r3, [pc, #296]	; (8004150 <HAL_GPIO_Init+0x2b8>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4a48      	ldr	r2, [pc, #288]	; (8004154 <HAL_GPIO_Init+0x2bc>)
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	089b      	lsrs	r3, r3, #2
 8004036:	3302      	adds	r3, #2
 8004038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	220f      	movs	r2, #15
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4013      	ands	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a40      	ldr	r2, [pc, #256]	; (8004158 <HAL_GPIO_Init+0x2c0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <HAL_GPIO_Init+0x1ec>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a3f      	ldr	r2, [pc, #252]	; (800415c <HAL_GPIO_Init+0x2c4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00d      	beq.n	8004080 <HAL_GPIO_Init+0x1e8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a3e      	ldr	r2, [pc, #248]	; (8004160 <HAL_GPIO_Init+0x2c8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d007      	beq.n	800407c <HAL_GPIO_Init+0x1e4>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a3d      	ldr	r2, [pc, #244]	; (8004164 <HAL_GPIO_Init+0x2cc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_GPIO_Init+0x1e0>
 8004074:	2303      	movs	r3, #3
 8004076:	e006      	b.n	8004086 <HAL_GPIO_Init+0x1ee>
 8004078:	2304      	movs	r3, #4
 800407a:	e004      	b.n	8004086 <HAL_GPIO_Init+0x1ee>
 800407c:	2302      	movs	r3, #2
 800407e:	e002      	b.n	8004086 <HAL_GPIO_Init+0x1ee>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_GPIO_Init+0x1ee>
 8004084:	2300      	movs	r3, #0
 8004086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004088:	f002 0203 	and.w	r2, r2, #3
 800408c:	0092      	lsls	r2, r2, #2
 800408e:	4093      	lsls	r3, r2
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	492f      	ldr	r1, [pc, #188]	; (8004154 <HAL_GPIO_Init+0x2bc>)
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	089b      	lsrs	r3, r3, #2
 800409c:	3302      	adds	r3, #2
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d006      	beq.n	80040be <HAL_GPIO_Init+0x226>
 80040b0:	4b2d      	ldr	r3, [pc, #180]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	492c      	ldr	r1, [pc, #176]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]
 80040bc:	e006      	b.n	80040cc <HAL_GPIO_Init+0x234>
 80040be:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	4928      	ldr	r1, [pc, #160]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d006      	beq.n	80040e6 <HAL_GPIO_Init+0x24e>
 80040d8:	4b23      	ldr	r3, [pc, #140]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	4922      	ldr	r1, [pc, #136]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
 80040e4:	e006      	b.n	80040f4 <HAL_GPIO_Init+0x25c>
 80040e6:	4b20      	ldr	r3, [pc, #128]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	491e      	ldr	r1, [pc, #120]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	604b      	str	r3, [r1, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d006      	beq.n	800410e <HAL_GPIO_Init+0x276>
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	4918      	ldr	r1, [pc, #96]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	4313      	orrs	r3, r2
 800410a:	608b      	str	r3, [r1, #8]
 800410c:	e006      	b.n	800411c <HAL_GPIO_Init+0x284>
 800410e:	4b16      	ldr	r3, [pc, #88]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	43db      	mvns	r3, r3
 8004116:	4914      	ldr	r1, [pc, #80]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 8004118:	4013      	ands	r3, r2
 800411a:	608b      	str	r3, [r1, #8]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d021      	beq.n	800416c <HAL_GPIO_Init+0x2d4>
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	490e      	ldr	r1, [pc, #56]	; (8004168 <HAL_GPIO_Init+0x2d0>)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	4313      	orrs	r3, r2
 8004132:	60cb      	str	r3, [r1, #12]
 8004134:	e021      	b.n	800417a <HAL_GPIO_Init+0x2e2>
 8004136:	bf00      	nop
 8004138:	10320000 	.word	0x10320000
 800413c:	10310000 	.word	0x10310000
 8004140:	10220000 	.word	0x10220000
 8004144:	10210000 	.word	0x10210000
 8004148:	10120000 	.word	0x10120000
 800414c:	10110000 	.word	0x10110000
 8004150:	40021000 	.word	0x40021000
 8004154:	40010000 	.word	0x40010000
 8004158:	40010800 	.word	0x40010800
 800415c:	40010c00 	.word	0x40010c00
 8004160:	40011000 	.word	0x40011000
 8004164:	40011400 	.word	0x40011400
 8004168:	40010400 	.word	0x40010400
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_GPIO_Init+0x304>)
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	43db      	mvns	r3, r3
 8004174:	4909      	ldr	r1, [pc, #36]	; (800419c <HAL_GPIO_Init+0x304>)
 8004176:	4013      	ands	r3, r2
 8004178:	60cb      	str	r3, [r1, #12]
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	3301      	adds	r3, #1
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	fa22 f303 	lsr.w	r3, r2, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	f47f ae8e 	bne.w	8003eac <HAL_GPIO_Init+0x14>
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	372c      	adds	r7, #44	; 0x2c
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	40010400 	.word	0x40010400

080041a0 <HAL_GPIO_ReadPin>:
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	807b      	strh	r3, [r7, #2]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	887b      	ldrh	r3, [r7, #2]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_GPIO_ReadPin+0x1e>
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
 80041bc:	e001      	b.n	80041c2 <HAL_GPIO_ReadPin+0x22>
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <HAL_GPIO_WritePin>:
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	807b      	strh	r3, [r7, #2]
 80041da:	4613      	mov	r3, r2
 80041dc:	707b      	strb	r3, [r7, #1]
 80041de:	787b      	ldrb	r3, [r7, #1]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_GPIO_WritePin+0x1e>
 80041e4:	887a      	ldrh	r2, [r7, #2]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	611a      	str	r2, [r3, #16]
 80041ea:	e003      	b.n	80041f4 <HAL_GPIO_WritePin+0x26>
 80041ec:	887b      	ldrh	r3, [r7, #2]
 80041ee:	041a      	lsls	r2, r3, #16
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	611a      	str	r2, [r3, #16]
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <HAL_GPIO_TogglePin>:
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	807b      	strh	r3, [r7, #2]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	887a      	ldrh	r2, [r7, #2]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4013      	ands	r3, r2
 8004216:	041a      	lsls	r2, r3, #16
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	43d9      	mvns	r1, r3
 800421c:	887b      	ldrh	r3, [r7, #2]
 800421e:	400b      	ands	r3, r1
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	611a      	str	r2, [r3, #16]
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <HAL_GPIO_EXTI_IRQHandler>:
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	80fb      	strh	r3, [r7, #6]
 800423a:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d006      	beq.n	8004254 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8004246:	4a05      	ldr	r2, [pc, #20]	; (800425c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	6153      	str	r3, [r2, #20]
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fd48 	bl	8002ce4 <HAL_GPIO_EXTI_Callback>
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40010400 	.word	0x40010400

08004260 <HAL_I2C_Init>:
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_I2C_Init+0x12>
 800426e:	2301      	movs	r3, #1
 8004270:	e12b      	b.n	80044ca <HAL_I2C_Init+0x26a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_I2C_Init+0x2c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fa26 	bl	80036d8 <HAL_I2C_MspInit>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	; 0x24
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	f001 fba0 	bl	8005a08 <HAL_RCC_GetPCLK1Freq>
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4a81      	ldr	r2, [pc, #516]	; (80044d4 <HAL_I2C_Init+0x274>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d807      	bhi.n	80042e4 <HAL_I2C_Init+0x84>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a80      	ldr	r2, [pc, #512]	; (80044d8 <HAL_I2C_Init+0x278>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	bf94      	ite	ls
 80042dc:	2301      	movls	r3, #1
 80042de:	2300      	movhi	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	e006      	b.n	80042f2 <HAL_I2C_Init+0x92>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a7d      	ldr	r2, [pc, #500]	; (80044dc <HAL_I2C_Init+0x27c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bf94      	ite	ls
 80042ec:	2301      	movls	r3, #1
 80042ee:	2300      	movhi	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Init+0x9a>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0e7      	b.n	80044ca <HAL_I2C_Init+0x26a>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a78      	ldr	r2, [pc, #480]	; (80044e0 <HAL_I2C_Init+0x280>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	0c9b      	lsrs	r3, r3, #18
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a6a      	ldr	r2, [pc, #424]	; (80044d4 <HAL_I2C_Init+0x274>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d802      	bhi.n	8004334 <HAL_I2C_Init+0xd4>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	3301      	adds	r3, #1
 8004332:	e009      	b.n	8004348 <HAL_I2C_Init+0xe8>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	4a69      	ldr	r2, [pc, #420]	; (80044e4 <HAL_I2C_Init+0x284>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	3301      	adds	r3, #1
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	430b      	orrs	r3, r1
 800434e:	6213      	str	r3, [r2, #32]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800435a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	495c      	ldr	r1, [pc, #368]	; (80044d4 <HAL_I2C_Init+0x274>)
 8004364:	428b      	cmp	r3, r1
 8004366:	d819      	bhi.n	800439c <HAL_I2C_Init+0x13c>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1e59      	subs	r1, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fbb1 f3f3 	udiv	r3, r1, r3
 8004376:	1c59      	adds	r1, r3, #1
 8004378:	f640 73fc 	movw	r3, #4092	; 0xffc
 800437c:	400b      	ands	r3, r1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_I2C_Init+0x138>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1e59      	subs	r1, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004390:	3301      	adds	r3, #1
 8004392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004396:	e051      	b.n	800443c <HAL_I2C_Init+0x1dc>
 8004398:	2304      	movs	r3, #4
 800439a:	e04f      	b.n	800443c <HAL_I2C_Init+0x1dc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d111      	bne.n	80043c8 <HAL_I2C_Init+0x168>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e58      	subs	r0, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	440b      	add	r3, r1
 80043b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e012      	b.n	80043ee <HAL_I2C_Init+0x18e>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e58      	subs	r0, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	0099      	lsls	r1, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	fbb0 f3f3 	udiv	r3, r0, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_I2C_Init+0x196>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e022      	b.n	800443c <HAL_I2C_Init+0x1dc>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10e      	bne.n	800441c <HAL_I2C_Init+0x1bc>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1e58      	subs	r0, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	440b      	add	r3, r1
 800440c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004410:	3301      	adds	r3, #1
 8004412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441a:	e00f      	b.n	800443c <HAL_I2C_Init+0x1dc>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e58      	subs	r0, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	0099      	lsls	r1, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	6809      	ldr	r1, [r1, #0]
 8004440:	4313      	orrs	r3, r2
 8004442:	61cb      	str	r3, [r1, #28]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800446a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6911      	ldr	r1, [r2, #16]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68d2      	ldr	r2, [r2, #12]
 8004476:	4311      	orrs	r1, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	430b      	orrs	r3, r1
 800447e:	6093      	str	r3, [r2, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	60da      	str	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c8:	2300      	movs	r3, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	000186a0 	.word	0x000186a0
 80044d8:	001e847f 	.word	0x001e847f
 80044dc:	003d08ff 	.word	0x003d08ff
 80044e0:	431bde83 	.word	0x431bde83
 80044e4:	10624dd3 	.word	0x10624dd3

080044e8 <HAL_I2C_Mem_Write>:
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	461a      	mov	r2, r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	817b      	strh	r3, [r7, #10]
 80044fa:	460b      	mov	r3, r1
 80044fc:	813b      	strh	r3, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
 8004502:	f7ff fadd 	bl	8003ac0 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b20      	cmp	r3, #32
 8004512:	f040 80d9 	bne.w	80046c8 <HAL_I2C_Mem_Write+0x1e0>
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2319      	movs	r3, #25
 800451c:	2201      	movs	r2, #1
 800451e:	496d      	ldr	r1, [pc, #436]	; (80046d4 <HAL_I2C_Mem_Write+0x1ec>)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fcc1 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_Mem_Write+0x48>
 800452c:	2302      	movs	r3, #2
 800452e:	e0cc      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_I2C_Mem_Write+0x56>
 800453a:	2302      	movs	r3, #2
 800453c:	e0c5      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d007      	beq.n	8004564 <HAL_I2C_Mem_Write+0x7c>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2221      	movs	r2, #33	; 0x21
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2240      	movs	r2, #64	; 0x40
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a3a      	ldr	r2, [r7, #32]
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	; 0x28
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a4d      	ldr	r2, [pc, #308]	; (80046d8 <HAL_I2C_Mem_Write+0x1f0>)
 80045a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80045a6:	88f8      	ldrh	r0, [r7, #6]
 80045a8:	893a      	ldrh	r2, [r7, #8]
 80045aa:	8979      	ldrh	r1, [r7, #10]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	4603      	mov	r3, r0
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 faf8 	bl	8004bac <I2C_RequestMemoryWrite>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d052      	beq.n	8004668 <HAL_I2C_Mem_Write+0x180>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e081      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fd42 	bl	8005054 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <HAL_I2C_Mem_Write+0x10a>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d107      	bne.n	80045ee <HAL_I2C_Mem_Write+0x106>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	2301      	movs	r3, #1
 80045f0:	e06b      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	611a      	str	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	625a      	str	r2, [r3, #36]	; 0x24
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	851a      	strh	r2, [r3, #40]	; 0x28
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b04      	cmp	r3, #4
 800462e:	d11b      	bne.n	8004668 <HAL_I2C_Mem_Write+0x180>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004634:	2b00      	cmp	r3, #0
 8004636:	d017      	beq.n	8004668 <HAL_I2C_Mem_Write+0x180>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	781a      	ldrb	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	611a      	str	r2, [r3, #16]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	851a      	strh	r2, [r3, #40]	; 0x28
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1aa      	bne.n	80045c6 <HAL_I2C_Mem_Write+0xde>
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fd2e 	bl	80050d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00d      	beq.n	800469c <HAL_I2C_Mem_Write+0x1b4>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	2b04      	cmp	r3, #4
 8004686:	d107      	bne.n	8004698 <HAL_I2C_Mem_Write+0x1b0>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	2301      	movs	r3, #1
 800469a:	e016      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046c4:	2300      	movs	r3, #0
 80046c6:	e000      	b.n	80046ca <HAL_I2C_Mem_Write+0x1e2>
 80046c8:	2302      	movs	r3, #2
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	00100002 	.word	0x00100002
 80046d8:	ffff0000 	.word	0xffff0000

080046dc <HAL_I2C_Mem_Read>:
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	; 0x30
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	4608      	mov	r0, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	461a      	mov	r2, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	817b      	strh	r3, [r7, #10]
 80046ee:	460b      	mov	r3, r1
 80046f0:	813b      	strh	r3, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
 80046f6:	2300      	movs	r3, #0
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	f7ff f9e1 	bl	8003ac0 <HAL_GetTick>
 80046fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b20      	cmp	r3, #32
 800470a:	f040 8244 	bne.w	8004b96 <HAL_I2C_Mem_Read+0x4ba>
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	2319      	movs	r3, #25
 8004714:	2201      	movs	r2, #1
 8004716:	4982      	ldr	r1, [pc, #520]	; (8004920 <HAL_I2C_Mem_Read+0x244>)
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fbc5 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_I2C_Mem_Read+0x4c>
 8004724:	2302      	movs	r3, #2
 8004726:	e237      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4bc>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_I2C_Mem_Read+0x5a>
 8004732:	2302      	movs	r3, #2
 8004734:	e230      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4bc>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b01      	cmp	r3, #1
 800474a:	d007      	beq.n	800475c <HAL_I2C_Mem_Read+0x80>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2222      	movs	r2, #34	; 0x22
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2240      	movs	r2, #64	; 0x40
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004786:	625a      	str	r2, [r3, #36]	; 0x24
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800478c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	; 0x28
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a62      	ldr	r2, [pc, #392]	; (8004924 <HAL_I2C_Mem_Read+0x248>)
 800479c:	62da      	str	r2, [r3, #44]	; 0x2c
 800479e:	88f8      	ldrh	r0, [r7, #6]
 80047a0:	893a      	ldrh	r2, [r7, #8]
 80047a2:	8979      	ldrh	r1, [r7, #10]
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	4603      	mov	r3, r0
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa92 	bl	8004cd8 <I2C_RequestMemoryRead>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Mem_Read+0xe2>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e1ec      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4bc>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d113      	bne.n	80047ee <HAL_I2C_Mem_Read+0x112>
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e1c0      	b.n	8004b70 <HAL_I2C_Mem_Read+0x494>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d11e      	bne.n	8004834 <HAL_I2C_Mem_Read+0x158>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	b672      	cpsid	i
 8004808:	bf00      	nop
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	b662      	cpsie	i
 8004832:	e035      	b.n	80048a0 <HAL_I2C_Mem_Read+0x1c4>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004838:	2b02      	cmp	r3, #2
 800483a:	d11e      	bne.n	800487a <HAL_I2C_Mem_Read+0x19e>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	b672      	cpsid	i
 800484e:	bf00      	nop
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	b662      	cpsie	i
 8004878:	e012      	b.n	80048a0 <HAL_I2C_Mem_Read+0x1c4>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	e166      	b.n	8004b70 <HAL_I2C_Mem_Read+0x494>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	f200 811f 	bhi.w	8004aea <HAL_I2C_Mem_Read+0x40e>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d123      	bne.n	80048fc <HAL_I2C_Mem_Read+0x220>
 80048b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fc4d 	bl	8005158 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_I2C_Mem_Read+0x1ec>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e167      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4bc>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048fa:	e139      	b.n	8004b70 <HAL_I2C_Mem_Read+0x494>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004900:	2b02      	cmp	r3, #2
 8004902:	d152      	bne.n	80049aa <HAL_I2C_Mem_Read+0x2ce>
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490a:	2200      	movs	r2, #0
 800490c:	4906      	ldr	r1, [pc, #24]	; (8004928 <HAL_I2C_Mem_Read+0x24c>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 faca 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_I2C_Mem_Read+0x250>
 800491a:	2301      	movs	r3, #1
 800491c:	e13c      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4bc>
 800491e:	bf00      	nop
 8004920:	00100002 	.word	0x00100002
 8004924:	ffff0000 	.word	0xffff0000
 8004928:	00010004 	.word	0x00010004
 800492c:	b672      	cpsid	i
 800492e:	bf00      	nop
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	625a      	str	r2, [r3, #36]	; 0x24
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004972:	b662      	cpsie	i
 8004974:	bf00      	nop
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	625a      	str	r2, [r3, #36]	; 0x24
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	851a      	strh	r2, [r3, #40]	; 0x28
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049a8:	e0e2      	b.n	8004b70 <HAL_I2C_Mem_Read+0x494>
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	2200      	movs	r2, #0
 80049b2:	497b      	ldr	r1, [pc, #492]	; (8004ba0 <HAL_I2C_Mem_Read+0x4c4>)
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fa77 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_I2C_Mem_Read+0x2e8>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0e9      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4bc>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	b672      	cpsid	i
 80049d6:	bf00      	nop
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a0a:	4b66      	ldr	r3, [pc, #408]	; (8004ba4 <HAL_I2C_Mem_Read+0x4c8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	08db      	lsrs	r3, r3, #3
 8004a10:	4a65      	ldr	r2, [pc, #404]	; (8004ba8 <HAL_I2C_Mem_Read+0x4cc>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	0a1a      	lsrs	r2, r3, #8
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	00da      	lsls	r2, r3, #3
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	623b      	str	r3, [r7, #32]
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	623b      	str	r3, [r7, #32]
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d118      	bne.n	8004a62 <HAL_I2C_Mem_Read+0x386>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f043 0220 	orr.w	r2, r3, #32
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
 8004a52:	b662      	cpsie	i
 8004a54:	bf00      	nop
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e09a      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4bc>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d1d9      	bne.n	8004a24 <HAL_I2C_Mem_Read+0x348>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	851a      	strh	r2, [r3, #40]	; 0x28
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ab2:	b662      	cpsie	i
 8004ab4:	bf00      	nop
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ae8:	e042      	b.n	8004b70 <HAL_I2C_Mem_Read+0x494>
 8004aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fb32 	bl	8005158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_I2C_Mem_Read+0x422>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e04c      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4bc>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	625a      	str	r2, [r3, #36]	; 0x24
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	851a      	strh	r2, [r3, #40]	; 0x28
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d118      	bne.n	8004b70 <HAL_I2C_Mem_Read+0x494>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	851a      	strh	r2, [r3, #40]	; 0x28
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f47f ae94 	bne.w	80048a2 <HAL_I2C_Mem_Read+0x1c6>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4bc>
 8004b96:	2302      	movs	r3, #2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3728      	adds	r7, #40	; 0x28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	00010004 	.word	0x00010004
 8004ba4:	2000000c 	.word	0x2000000c
 8004ba8:	14f8b589 	.word	0x14f8b589

08004bac <I2C_RequestMemoryWrite>:
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	817b      	strh	r3, [r7, #10]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	813b      	strh	r3, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f960 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <I2C_RequestMemoryWrite+0x5e>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfc:	d103      	bne.n	8004c06 <I2C_RequestMemoryWrite+0x5a>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
 8004c06:	2303      	movs	r3, #3
 8004c08:	e05f      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c18:	611a      	str	r2, [r3, #16]
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	6a3a      	ldr	r2, [r7, #32]
 8004c1e:	492d      	ldr	r1, [pc, #180]	; (8004cd4 <I2C_RequestMemoryWrite+0x128>)
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f998 	bl	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <I2C_RequestMemoryWrite+0x84>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e04c      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c48:	6a39      	ldr	r1, [r7, #32]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fa02 	bl	8005054 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <I2C_RequestMemoryWrite+0xc6>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d107      	bne.n	8004c6e <I2C_RequestMemoryWrite+0xc2>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e02b      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d105      	bne.n	8004c84 <I2C_RequestMemoryWrite+0xd8>
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]
 8004c82:	e021      	b.n	8004cc8 <I2C_RequestMemoryWrite+0x11c>
 8004c84:	893b      	ldrh	r3, [r7, #8]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	611a      	str	r2, [r3, #16]
 8004c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c94:	6a39      	ldr	r1, [r7, #32]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f9dc 	bl	8005054 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <I2C_RequestMemoryWrite+0x112>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d107      	bne.n	8004cba <I2C_RequestMemoryWrite+0x10e>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e005      	b.n	8004cca <I2C_RequestMemoryWrite+0x11e>
 8004cbe:	893b      	ldrh	r3, [r7, #8]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	611a      	str	r2, [r3, #16]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	00010002 	.word	0x00010002

08004cd8 <I2C_RequestMemoryRead>:
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	817b      	strh	r3, [r7, #10]
 8004cea:	460b      	mov	r3, r1
 8004cec:	813b      	strh	r3, [r7, #8]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f8c2 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <I2C_RequestMemoryRead+0x6e>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d38:	d103      	bne.n	8004d42 <I2C_RequestMemoryRead+0x6a>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40
 8004d42:	2303      	movs	r3, #3
 8004d44:	e0aa      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
 8004d46:	897b      	ldrh	r3, [r7, #10]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d54:	611a      	str	r2, [r3, #16]
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	4952      	ldr	r1, [pc, #328]	; (8004ea4 <I2C_RequestMemoryRead+0x1cc>)
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f8fa 	bl	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <I2C_RequestMemoryRead+0x94>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e097      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d84:	6a39      	ldr	r1, [r7, #32]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f964 	bl	8005054 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00d      	beq.n	8004dae <I2C_RequestMemoryRead+0xd6>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d107      	bne.n	8004daa <I2C_RequestMemoryRead+0xd2>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	2301      	movs	r3, #1
 8004dac:	e076      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d105      	bne.n	8004dc0 <I2C_RequestMemoryRead+0xe8>
 8004db4:	893b      	ldrh	r3, [r7, #8]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]
 8004dbe:	e021      	b.n	8004e04 <I2C_RequestMemoryRead+0x12c>
 8004dc0:	893b      	ldrh	r3, [r7, #8]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	611a      	str	r2, [r3, #16]
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	6a39      	ldr	r1, [r7, #32]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 f93e 	bl	8005054 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <I2C_RequestMemoryRead+0x122>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d107      	bne.n	8004df6 <I2C_RequestMemoryRead+0x11e>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	2301      	movs	r3, #1
 8004df8:	e050      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
 8004dfa:	893b      	ldrh	r3, [r7, #8]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	611a      	str	r2, [r3, #16]
 8004e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e06:	6a39      	ldr	r1, [r7, #32]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f923 	bl	8005054 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00d      	beq.n	8004e30 <I2C_RequestMemoryRead+0x158>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d107      	bne.n	8004e2c <I2C_RequestMemoryRead+0x154>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e035      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f82b 	bl	8004ea8 <I2C_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00d      	beq.n	8004e74 <I2C_RequestMemoryRead+0x19c>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e66:	d103      	bne.n	8004e70 <I2C_RequestMemoryRead+0x198>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8004e70:	2303      	movs	r3, #3
 8004e72:	e013      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
 8004e74:	897b      	ldrh	r3, [r7, #10]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	6a3a      	ldr	r2, [r7, #32]
 8004e88:	4906      	ldr	r1, [pc, #24]	; (8004ea4 <I2C_RequestMemoryRead+0x1cc>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f863 	bl	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <I2C_RequestMemoryRead+0x1c2>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <I2C_RequestMemoryRead+0x1c4>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	00010002 	.word	0x00010002

08004ea8 <I2C_WaitOnFlagUntilTimeout>:
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	71fb      	strb	r3, [r7, #7]
 8004eb8:	e025      	b.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec0:	d021      	beq.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8004ec2:	f7fe fdfd 	bl	8003ac0 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d116      	bne.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f043 0220 	orr.w	r2, r3, #32
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f02:	2301      	movs	r3, #1
 8004f04:	e023      	b.n	8004f4e <I2C_WaitOnFlagUntilTimeout+0xa6>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	0c1b      	lsrs	r3, r3, #16
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d10d      	bne.n	8004f2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	43da      	mvns	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	e00c      	b.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	43da      	mvns	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4013      	ands	r3, r2
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d0b6      	beq.n	8004eba <I2C_WaitOnFlagUntilTimeout+0x12>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	e051      	b.n	800500a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f74:	d123      	bne.n	8004fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f8e:	615a      	str	r2, [r3, #20]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f043 0204 	orr.w	r2, r3, #4
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e046      	b.n	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fc4:	d021      	beq.n	800500a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8004fc6:	f7fe fd7b 	bl	8003ac0 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d302      	bcc.n	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d116      	bne.n	800500a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f043 0220 	orr.w	r2, r3, #32
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005006:	2301      	movs	r3, #1
 8005008:	e020      	b.n	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10c      	bne.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	43da      	mvns	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	bf14      	ite	ne
 8005026:	2301      	movne	r3, #1
 8005028:	2300      	moveq	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	e00b      	b.n	8005046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	43da      	mvns	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d18d      	bne.n	8004f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800504a:	2300      	movs	r3, #0
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <I2C_WaitOnTXEFlagUntilTimeout>:
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	e02d      	b.n	80050be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f8ce 	bl	8005204 <I2C_IsAcknowledgeFailed>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800506e:	2301      	movs	r3, #1
 8005070:	e02d      	b.n	80050ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005078:	d021      	beq.n	80050be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 800507a:	f7fe fd21 	bl	8003ac0 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	d302      	bcc.n	8005090 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d116      	bne.n	80050be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050ba:	2301      	movs	r3, #1
 80050bc:	e007      	b.n	80050ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c8:	2b80      	cmp	r3, #128	; 0x80
 80050ca:	d1ca      	bne.n	8005062 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80050cc:	2300      	movs	r3, #0
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <I2C_WaitOnBTFFlagUntilTimeout>:
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	e02d      	b.n	8005140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f88d 	bl	8005204 <I2C_IsAcknowledgeFailed>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e02d      	b.n	8005150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fa:	d021      	beq.n	8005140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 80050fc:	f7fe fce0 	bl	8003ac0 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d116      	bne.n	8005140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	f043 0220 	orr.w	r2, r3, #32
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	641a      	str	r2, [r3, #64]	; 0x40
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800513c:	2301      	movs	r3, #1
 800513e:	e007      	b.n	8005150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b04      	cmp	r3, #4
 800514c:	d1ca      	bne.n	80050e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 800514e:	2300      	movs	r3, #0
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	e042      	b.n	80051ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b10      	cmp	r3, #16
 8005172:	d119      	bne.n	80051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0210 	mvn.w	r2, #16
 800517c:	615a      	str	r2, [r3, #20]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051a4:	2301      	movs	r3, #1
 80051a6:	e029      	b.n	80051fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 80051a8:	f7fe fc8a 	bl	8003ac0 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d302      	bcc.n	80051be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d116      	bne.n	80051ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	641a      	str	r2, [r3, #64]	; 0x40
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051e8:	2301      	movs	r3, #1
 80051ea:	e007      	b.n	80051fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d1b5      	bne.n	8005166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80051fa:	2300      	movs	r3, #0
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_IsAcknowledgeFailed>:
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521a:	d11b      	bne.n	8005254 <I2C_IsAcknowledgeFailed+0x50>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005224:	615a      	str	r2, [r3, #20]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	f043 0204 	orr.w	r2, r3, #4
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	641a      	str	r2, [r3, #64]	; 0x40
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <I2C_IsAcknowledgeFailed+0x52>
 8005254:	2300      	movs	r3, #0
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <HAL_RCC_OscConfig>:
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_OscConfig+0x12>
 800526e:	2301      	movs	r3, #1
 8005270:	e26c      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8087 	beq.w	800538e <HAL_RCC_OscConfig+0x12e>
 8005280:	4b92      	ldr	r3, [pc, #584]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 030c 	and.w	r3, r3, #12
 8005288:	2b04      	cmp	r3, #4
 800528a:	d00c      	beq.n	80052a6 <HAL_RCC_OscConfig+0x46>
 800528c:	4b8f      	ldr	r3, [pc, #572]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f003 030c 	and.w	r3, r3, #12
 8005294:	2b08      	cmp	r3, #8
 8005296:	d112      	bne.n	80052be <HAL_RCC_OscConfig+0x5e>
 8005298:	4b8c      	ldr	r3, [pc, #560]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a4:	d10b      	bne.n	80052be <HAL_RCC_OscConfig+0x5e>
 80052a6:	4b89      	ldr	r3, [pc, #548]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d06c      	beq.n	800538c <HAL_RCC_OscConfig+0x12c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d168      	bne.n	800538c <HAL_RCC_OscConfig+0x12c>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e246      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c6:	d106      	bne.n	80052d6 <HAL_RCC_OscConfig+0x76>
 80052c8:	4b80      	ldr	r3, [pc, #512]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a7f      	ldr	r2, [pc, #508]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	e02e      	b.n	8005334 <HAL_RCC_OscConfig+0xd4>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x98>
 80052de:	4b7b      	ldr	r3, [pc, #492]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a7a      	ldr	r2, [pc, #488]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	4b78      	ldr	r3, [pc, #480]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a77      	ldr	r2, [pc, #476]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80052f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e01d      	b.n	8005334 <HAL_RCC_OscConfig+0xd4>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005300:	d10c      	bne.n	800531c <HAL_RCC_OscConfig+0xbc>
 8005302:	4b72      	ldr	r3, [pc, #456]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a71      	ldr	r2, [pc, #452]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4b6f      	ldr	r3, [pc, #444]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a6e      	ldr	r2, [pc, #440]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	e00b      	b.n	8005334 <HAL_RCC_OscConfig+0xd4>
 800531c:	4b6b      	ldr	r3, [pc, #428]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a6a      	ldr	r2, [pc, #424]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	4b68      	ldr	r3, [pc, #416]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a67      	ldr	r2, [pc, #412]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800532e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d013      	beq.n	8005364 <HAL_RCC_OscConfig+0x104>
 800533c:	f7fe fbc0 	bl	8003ac0 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0xf6>
 8005344:	f7fe fbbc 	bl	8003ac0 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	; 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0xf6>
 8005352:	2303      	movs	r3, #3
 8005354:	e1fa      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 8005356:	4b5d      	ldr	r3, [pc, #372]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0xe4>
 8005362:	e014      	b.n	800538e <HAL_RCC_OscConfig+0x12e>
 8005364:	f7fe fbac 	bl	8003ac0 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x11e>
 800536c:	f7fe fba8 	bl	8003ac0 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b64      	cmp	r3, #100	; 0x64
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x11e>
 800537a:	2303      	movs	r3, #3
 800537c:	e1e6      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 800537e:	4b53      	ldr	r3, [pc, #332]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x10c>
 800538a:	e000      	b.n	800538e <HAL_RCC_OscConfig+0x12e>
 800538c:	bf00      	nop
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d063      	beq.n	8005462 <HAL_RCC_OscConfig+0x202>
 800539a:	4b4c      	ldr	r3, [pc, #304]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <HAL_RCC_OscConfig+0x15e>
 80053a6:	4b49      	ldr	r3, [pc, #292]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 030c 	and.w	r3, r3, #12
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d11c      	bne.n	80053ec <HAL_RCC_OscConfig+0x18c>
 80053b2:	4b46      	ldr	r3, [pc, #280]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d116      	bne.n	80053ec <HAL_RCC_OscConfig+0x18c>
 80053be:	4b43      	ldr	r3, [pc, #268]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_RCC_OscConfig+0x176>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d001      	beq.n	80053d6 <HAL_RCC_OscConfig+0x176>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e1ba      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 80053d6:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4939      	ldr	r1, [pc, #228]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	600b      	str	r3, [r1, #0]
 80053ea:	e03a      	b.n	8005462 <HAL_RCC_OscConfig+0x202>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d020      	beq.n	8005436 <HAL_RCC_OscConfig+0x1d6>
 80053f4:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <HAL_RCC_OscConfig+0x270>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	f7fe fb61 	bl	8003ac0 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x1b4>
 8005402:	f7fe fb5d 	bl	8003ac0 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x1b4>
 8005410:	2303      	movs	r3, #3
 8005412:	e19b      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 8005414:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <HAL_RCC_OscConfig+0x1a2>
 8005420:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4927      	ldr	r1, [pc, #156]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005430:	4313      	orrs	r3, r2
 8005432:	600b      	str	r3, [r1, #0]
 8005434:	e015      	b.n	8005462 <HAL_RCC_OscConfig+0x202>
 8005436:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	f7fe fb40 	bl	8003ac0 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x1f6>
 8005444:	f7fe fb3c 	bl	8003ac0 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x1f6>
 8005452:	2303      	movs	r3, #3
 8005454:	e17a      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x1e4>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d03a      	beq.n	80054e4 <HAL_RCC_OscConfig+0x284>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d019      	beq.n	80054aa <HAL_RCC_OscConfig+0x24a>
 8005476:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <HAL_RCC_OscConfig+0x274>)
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f7fe fb20 	bl	8003ac0 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x236>
 8005484:	f7fe fb1c 	bl	8003ac0 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x236>
 8005492:	2303      	movs	r3, #3
 8005494:	e15a      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <HAL_RCC_OscConfig+0x26c>)
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x224>
 80054a2:	2001      	movs	r0, #1
 80054a4:	f000 fad8 	bl	8005a58 <RCC_Delay>
 80054a8:	e01c      	b.n	80054e4 <HAL_RCC_OscConfig+0x284>
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <HAL_RCC_OscConfig+0x274>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f7fe fb06 	bl	8003ac0 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]
 80054b6:	e00f      	b.n	80054d8 <HAL_RCC_OscConfig+0x278>
 80054b8:	f7fe fb02 	bl	8003ac0 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d908      	bls.n	80054d8 <HAL_RCC_OscConfig+0x278>
 80054c6:	2303      	movs	r3, #3
 80054c8:	e140      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	42420000 	.word	0x42420000
 80054d4:	42420480 	.word	0x42420480
 80054d8:	4b9e      	ldr	r3, [pc, #632]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e9      	bne.n	80054b8 <HAL_RCC_OscConfig+0x258>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80a6 	beq.w	800563e <HAL_RCC_OscConfig+0x3de>
 80054f2:	2300      	movs	r3, #0
 80054f4:	75fb      	strb	r3, [r7, #23]
 80054f6:	4b97      	ldr	r3, [pc, #604]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10d      	bne.n	800551e <HAL_RCC_OscConfig+0x2be>
 8005502:	4b94      	ldr	r3, [pc, #592]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	4a93      	ldr	r2, [pc, #588]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550c:	61d3      	str	r3, [r2, #28]
 800550e:	4b91      	ldr	r3, [pc, #580]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
 800551e:	4b8e      	ldr	r3, [pc, #568]	; (8005758 <HAL_RCC_OscConfig+0x4f8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d118      	bne.n	800555c <HAL_RCC_OscConfig+0x2fc>
 800552a:	4b8b      	ldr	r3, [pc, #556]	; (8005758 <HAL_RCC_OscConfig+0x4f8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a8a      	ldr	r2, [pc, #552]	; (8005758 <HAL_RCC_OscConfig+0x4f8>)
 8005530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	f7fe fac3 	bl	8003ac0 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x2f0>
 800553e:	f7fe fabf 	bl	8003ac0 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b64      	cmp	r3, #100	; 0x64
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x2f0>
 800554c:	2303      	movs	r3, #3
 800554e:	e0fd      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 8005550:	4b81      	ldr	r3, [pc, #516]	; (8005758 <HAL_RCC_OscConfig+0x4f8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f0      	beq.n	800553e <HAL_RCC_OscConfig+0x2de>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d106      	bne.n	8005572 <HAL_RCC_OscConfig+0x312>
 8005564:	4b7b      	ldr	r3, [pc, #492]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	4a7a      	ldr	r2, [pc, #488]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6213      	str	r3, [r2, #32]
 8005570:	e02d      	b.n	80055ce <HAL_RCC_OscConfig+0x36e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <HAL_RCC_OscConfig+0x334>
 800557a:	4b76      	ldr	r3, [pc, #472]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	4a75      	ldr	r2, [pc, #468]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	6213      	str	r3, [r2, #32]
 8005586:	4b73      	ldr	r3, [pc, #460]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	4a72      	ldr	r2, [pc, #456]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800558c:	f023 0304 	bic.w	r3, r3, #4
 8005590:	6213      	str	r3, [r2, #32]
 8005592:	e01c      	b.n	80055ce <HAL_RCC_OscConfig+0x36e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b05      	cmp	r3, #5
 800559a:	d10c      	bne.n	80055b6 <HAL_RCC_OscConfig+0x356>
 800559c:	4b6d      	ldr	r3, [pc, #436]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	4a6c      	ldr	r2, [pc, #432]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055a2:	f043 0304 	orr.w	r3, r3, #4
 80055a6:	6213      	str	r3, [r2, #32]
 80055a8:	4b6a      	ldr	r3, [pc, #424]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	4a69      	ldr	r2, [pc, #420]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	6213      	str	r3, [r2, #32]
 80055b4:	e00b      	b.n	80055ce <HAL_RCC_OscConfig+0x36e>
 80055b6:	4b67      	ldr	r3, [pc, #412]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	4a66      	ldr	r2, [pc, #408]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055bc:	f023 0301 	bic.w	r3, r3, #1
 80055c0:	6213      	str	r3, [r2, #32]
 80055c2:	4b64      	ldr	r3, [pc, #400]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	4a63      	ldr	r2, [pc, #396]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055c8:	f023 0304 	bic.w	r3, r3, #4
 80055cc:	6213      	str	r3, [r2, #32]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d015      	beq.n	8005602 <HAL_RCC_OscConfig+0x3a2>
 80055d6:	f7fe fa73 	bl	8003ac0 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]
 80055dc:	e00a      	b.n	80055f4 <HAL_RCC_OscConfig+0x394>
 80055de:	f7fe fa6f 	bl	8003ac0 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x394>
 80055f0:	2303      	movs	r3, #3
 80055f2:	e0ab      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 80055f4:	4b57      	ldr	r3, [pc, #348]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0ee      	beq.n	80055de <HAL_RCC_OscConfig+0x37e>
 8005600:	e014      	b.n	800562c <HAL_RCC_OscConfig+0x3cc>
 8005602:	f7fe fa5d 	bl	8003ac0 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]
 8005608:	e00a      	b.n	8005620 <HAL_RCC_OscConfig+0x3c0>
 800560a:	f7fe fa59 	bl	8003ac0 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f241 3288 	movw	r2, #5000	; 0x1388
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x3c0>
 800561c:	2303      	movs	r3, #3
 800561e:	e095      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 8005620:	4b4c      	ldr	r3, [pc, #304]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1ee      	bne.n	800560a <HAL_RCC_OscConfig+0x3aa>
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d105      	bne.n	800563e <HAL_RCC_OscConfig+0x3de>
 8005632:	4b48      	ldr	r3, [pc, #288]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	4a47      	ldr	r2, [pc, #284]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563c:	61d3      	str	r3, [r2, #28]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8081 	beq.w	800574a <HAL_RCC_OscConfig+0x4ea>
 8005648:	4b42      	ldr	r3, [pc, #264]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 030c 	and.w	r3, r3, #12
 8005650:	2b08      	cmp	r3, #8
 8005652:	d061      	beq.n	8005718 <HAL_RCC_OscConfig+0x4b8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d146      	bne.n	80056ea <HAL_RCC_OscConfig+0x48a>
 800565c:	4b3f      	ldr	r3, [pc, #252]	; (800575c <HAL_RCC_OscConfig+0x4fc>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	f7fe fa2d 	bl	8003ac0 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x41c>
 800566a:	f7fe fa29 	bl	8003ac0 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x41c>
 8005678:	2303      	movs	r3, #3
 800567a:	e067      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 800567c:	4b35      	ldr	r3, [pc, #212]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f0      	bne.n	800566a <HAL_RCC_OscConfig+0x40a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005690:	d108      	bne.n	80056a4 <HAL_RCC_OscConfig+0x444>
 8005692:	4b30      	ldr	r3, [pc, #192]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	492d      	ldr	r1, [pc, #180]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	604b      	str	r3, [r1, #4]
 80056a4:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a19      	ldr	r1, [r3, #32]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	430b      	orrs	r3, r1
 80056b6:	4927      	ldr	r1, [pc, #156]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	604b      	str	r3, [r1, #4]
 80056bc:	4b27      	ldr	r3, [pc, #156]	; (800575c <HAL_RCC_OscConfig+0x4fc>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	f7fe f9fd 	bl	8003ac0 <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x47c>
 80056ca:	f7fe f9f9 	bl	8003ac0 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x47c>
 80056d8:	2303      	movs	r3, #3
 80056da:	e037      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 80056dc:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCC_OscConfig+0x46a>
 80056e8:	e02f      	b.n	800574a <HAL_RCC_OscConfig+0x4ea>
 80056ea:	4b1c      	ldr	r3, [pc, #112]	; (800575c <HAL_RCC_OscConfig+0x4fc>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f7fe f9e6 	bl	8003ac0 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x4aa>
 80056f8:	f7fe f9e2 	bl	8003ac0 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x4aa>
 8005706:	2303      	movs	r3, #3
 8005708:	e020      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 800570a:	4b12      	ldr	r3, [pc, #72]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x498>
 8005716:	e018      	b.n	800574a <HAL_RCC_OscConfig+0x4ea>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_RCC_OscConfig+0x4c4>
 8005720:	2301      	movs	r3, #1
 8005722:	e013      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_OscConfig+0x4f4>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	429a      	cmp	r2, r3
 8005736:	d106      	bne.n	8005746 <HAL_RCC_OscConfig+0x4e6>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_RCC_OscConfig+0x4ea>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <HAL_RCC_OscConfig+0x4ec>
 800574a:	2300      	movs	r3, #0
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	40007000 	.word	0x40007000
 800575c:	42420060 	.word	0x42420060

08005760 <HAL_RCC_ClockConfig>:
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_ClockConfig+0x14>
 8005770:	2301      	movs	r3, #1
 8005772:	e0d0      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
 8005774:	4b6a      	ldr	r3, [pc, #424]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d910      	bls.n	80057a4 <HAL_RCC_ClockConfig+0x44>
 8005782:	4b67      	ldr	r3, [pc, #412]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f023 0207 	bic.w	r2, r3, #7
 800578a:	4965      	ldr	r1, [pc, #404]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	4313      	orrs	r3, r2
 8005790:	600b      	str	r3, [r1, #0]
 8005792:	4b63      	ldr	r3, [pc, #396]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d001      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x44>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0b8      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d020      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x92>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x68>
 80057bc:	4b59      	ldr	r3, [pc, #356]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	4a58      	ldr	r2, [pc, #352]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057c6:	6053      	str	r3, [r2, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x80>
 80057d4:	4b53      	ldr	r3, [pc, #332]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	4a52      	ldr	r2, [pc, #328]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80057de:	6053      	str	r3, [r2, #4]
 80057e0:	4b50      	ldr	r3, [pc, #320]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	494d      	ldr	r1, [pc, #308]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d040      	beq.n	8005880 <HAL_RCC_ClockConfig+0x120>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d107      	bne.n	8005816 <HAL_RCC_ClockConfig+0xb6>
 8005806:	4b47      	ldr	r3, [pc, #284]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d115      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
 8005812:	2301      	movs	r3, #1
 8005814:	e07f      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d107      	bne.n	800582e <HAL_RCC_ClockConfig+0xce>
 800581e:	4b41      	ldr	r3, [pc, #260]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
 800582a:	2301      	movs	r3, #1
 800582c:	e073      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
 800582e:	4b3d      	ldr	r3, [pc, #244]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
 800583a:	2301      	movs	r3, #1
 800583c:	e06b      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
 800583e:	4b39      	ldr	r3, [pc, #228]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f023 0203 	bic.w	r2, r3, #3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4936      	ldr	r1, [pc, #216]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 800584c:	4313      	orrs	r3, r2
 800584e:	604b      	str	r3, [r1, #4]
 8005850:	f7fe f936 	bl	8003ac0 <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	e00a      	b.n	800586e <HAL_RCC_ClockConfig+0x10e>
 8005858:	f7fe f932 	bl	8003ac0 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	; 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_ClockConfig+0x10e>
 800586a:	2303      	movs	r3, #3
 800586c:	e053      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
 800586e:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f003 020c 	and.w	r2, r3, #12
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	429a      	cmp	r2, r3
 800587e:	d1eb      	bne.n	8005858 <HAL_RCC_ClockConfig+0xf8>
 8005880:	4b27      	ldr	r3, [pc, #156]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d210      	bcs.n	80058b0 <HAL_RCC_ClockConfig+0x150>
 800588e:	4b24      	ldr	r3, [pc, #144]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 0207 	bic.w	r2, r3, #7
 8005896:	4922      	ldr	r1, [pc, #136]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	4313      	orrs	r3, r2
 800589c:	600b      	str	r3, [r1, #0]
 800589e:	4b20      	ldr	r3, [pc, #128]	; (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x150>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e032      	b.n	8005916 <HAL_RCC_ClockConfig+0x1b6>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_RCC_ClockConfig+0x16e>
 80058bc:	4b19      	ldr	r3, [pc, #100]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4916      	ldr	r1, [pc, #88]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	604b      	str	r3, [r1, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_RCC_ClockConfig+0x18e>
 80058da:	4b12      	ldr	r3, [pc, #72]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	490e      	ldr	r1, [pc, #56]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	604b      	str	r3, [r1, #4]
 80058ee:	f000 f821 	bl	8005934 <HAL_RCC_GetSysClockFreq>
 80058f2:	4602      	mov	r2, r0
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	490a      	ldr	r1, [pc, #40]	; (8005928 <HAL_RCC_ClockConfig+0x1c8>)
 8005900:	5ccb      	ldrb	r3, [r1, r3]
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <HAL_RCC_ClockConfig+0x1cc>)
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <HAL_RCC_ClockConfig+0x1d0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe f894 	bl	8003a3c <HAL_InitTick>
 8005914:	2300      	movs	r3, #0
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40022000 	.word	0x40022000
 8005924:	40021000 	.word	0x40021000
 8005928:	0800823c 	.word	0x0800823c
 800592c:	2000000c 	.word	0x2000000c
 8005930:	20000010 	.word	0x20000010

08005934 <HAL_RCC_GetSysClockFreq>:
 8005934:	b490      	push	{r4, r7}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af00      	add	r7, sp, #0
 800593a:	4b2a      	ldr	r3, [pc, #168]	; (80059e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800593c:	1d3c      	adds	r4, r7, #4
 800593e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005944:	f240 2301 	movw	r3, #513	; 0x201
 8005948:	803b      	strh	r3, [r7, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	2300      	movs	r3, #0
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	2300      	movs	r3, #0
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	2300      	movs	r3, #0
 800595c:	623b      	str	r3, [r7, #32]
 800595e:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b04      	cmp	r3, #4
 800596c:	d002      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x40>
 800596e:	2b08      	cmp	r3, #8
 8005970:	d003      	beq.n	800597a <HAL_RCC_GetSysClockFreq+0x46>
 8005972:	e02d      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0x9c>
 8005974:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005976:	623b      	str	r3, [r7, #32]
 8005978:	e02d      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0xa2>
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	0c9b      	lsrs	r3, r3, #18
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005986:	4413      	add	r3, r2
 8005988:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d013      	beq.n	80059c0 <HAL_RCC_GetSysClockFreq+0x8c>
 8005998:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	0c5b      	lsrs	r3, r3, #17
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80059a6:	4413      	add	r3, r2
 80059a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4a0e      	ldr	r2, [pc, #56]	; (80059ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80059b2:	fb02 f203 	mul.w	r2, r2, r3
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
 80059be:	e004      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x96>
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	4a0b      	ldr	r2, [pc, #44]	; (80059f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059c4:	fb02 f303 	mul.w	r3, r2, r3
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	623b      	str	r3, [r7, #32]
 80059ce:	e002      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0xa2>
 80059d0:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d2:	623b      	str	r3, [r7, #32]
 80059d4:	bf00      	nop
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	4618      	mov	r0, r3
 80059da:	3728      	adds	r7, #40	; 0x28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc90      	pop	{r4, r7}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	0800822c 	.word	0x0800822c
 80059e8:	40021000 	.word	0x40021000
 80059ec:	007a1200 	.word	0x007a1200
 80059f0:	003d0900 	.word	0x003d0900

080059f4 <HAL_RCC_GetHCLKFreq>:
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	4b02      	ldr	r3, [pc, #8]	; (8005a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr
 8005a04:	2000000c 	.word	0x2000000c

08005a08 <HAL_RCC_GetPCLK1Freq>:
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	f7ff fff2 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a10:	4602      	mov	r2, r0
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	4903      	ldr	r1, [pc, #12]	; (8005a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a1e:	5ccb      	ldrb	r3, [r1, r3]
 8005a20:	fa22 f303 	lsr.w	r3, r2, r3
 8005a24:	4618      	mov	r0, r3
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	0800824c 	.word	0x0800824c

08005a30 <HAL_RCC_GetPCLK2Freq>:
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	f7ff ffde 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	0adb      	lsrs	r3, r3, #11
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	4903      	ldr	r1, [pc, #12]	; (8005a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a46:	5ccb      	ldrb	r3, [r1, r3]
 8005a48:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40021000 	.word	0x40021000
 8005a54:	0800824c 	.word	0x0800824c

08005a58 <RCC_Delay>:
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <RCC_Delay+0x34>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <RCC_Delay+0x38>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0a5b      	lsrs	r3, r3, #9
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	bf00      	nop
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	1e5a      	subs	r2, r3, #1
 8005a7a:	60fa      	str	r2, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f9      	bne.n	8005a74 <RCC_Delay+0x1c>
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr
 8005a8c:	2000000c 	.word	0x2000000c
 8005a90:	10624dd3 	.word	0x10624dd3

08005a94 <HAL_TIM_Base_Init>:
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_TIM_Base_Init+0x12>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e041      	b.n	8005b2a <HAL_TIM_Base_Init+0x96>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <HAL_TIM_Base_Init+0x2c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fd fe4a 	bl	8003754 <HAL_TIM_Base_MspInit>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f000 faec 	bl	80060b0 <TIM_Base_SetConfig>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b28:	2300      	movs	r3, #0
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_TIM_PWM_Init>:
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIM_PWM_Init+0x12>
 8005b40:	2301      	movs	r3, #1
 8005b42:	e041      	b.n	8005bc8 <HAL_TIM_PWM_Init+0x96>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <HAL_TIM_PWM_Init+0x2c>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f839 	bl	8005bd0 <HAL_TIM_PWM_MspInit>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f000 fa9d 	bl	80060b0 <TIM_Base_SetConfig>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_TIM_PWM_MspInit>:
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr
	...

08005be4 <HAL_TIM_PWM_Start>:
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <HAL_TIM_PWM_Start+0x24>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	bf14      	ite	ne
 8005c00:	2301      	movne	r3, #1
 8005c02:	2300      	moveq	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e022      	b.n	8005c4e <HAL_TIM_PWM_Start+0x6a>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d109      	bne.n	8005c22 <HAL_TIM_PWM_Start+0x3e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	bf14      	ite	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	2300      	moveq	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	e015      	b.n	8005c4e <HAL_TIM_PWM_Start+0x6a>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d109      	bne.n	8005c3c <HAL_TIM_PWM_Start+0x58>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	bf14      	ite	ne
 8005c34:	2301      	movne	r3, #1
 8005c36:	2300      	moveq	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	e008      	b.n	8005c4e <HAL_TIM_PWM_Start+0x6a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	bf14      	ite	ne
 8005c48:	2301      	movne	r3, #1
 8005c4a:	2300      	moveq	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_TIM_PWM_Start+0x72>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e05e      	b.n	8005d14 <HAL_TIM_PWM_Start+0x130>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_PWM_Start+0x82>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c64:	e013      	b.n	8005c8e <HAL_TIM_PWM_Start+0xaa>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d104      	bne.n	8005c76 <HAL_TIM_PWM_Start+0x92>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c74:	e00b      	b.n	8005c8e <HAL_TIM_PWM_Start+0xaa>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PWM_Start+0xa2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c84:	e003      	b.n	8005c8e <HAL_TIM_PWM_Start+0xaa>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2201      	movs	r2, #1
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fd18 	bl	80066cc <TIM_CCxChannelCmd>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1e      	ldr	r2, [pc, #120]	; (8005d1c <HAL_TIM_PWM_Start+0x138>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d107      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0xd2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cb4:	645a      	str	r2, [r3, #68]	; 0x44
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <HAL_TIM_PWM_Start+0x138>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_TIM_PWM_Start+0xfa>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d009      	beq.n	8005cde <HAL_TIM_PWM_Start+0xfa>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <HAL_TIM_PWM_Start+0x13c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_TIM_PWM_Start+0xfa>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a12      	ldr	r2, [pc, #72]	; (8005d24 <HAL_TIM_PWM_Start+0x140>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d111      	bne.n	8005d02 <HAL_TIM_PWM_Start+0x11e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b06      	cmp	r3, #6
 8005cee:	d010      	beq.n	8005d12 <HAL_TIM_PWM_Start+0x12e>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	e007      	b.n	8005d12 <HAL_TIM_PWM_Start+0x12e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0201 	orr.w	r2, r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	2300      	movs	r3, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800

08005d28 <HAL_TIM_PWM_ConfigChannel>:
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e0ac      	b.n	8005e9c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b0c      	cmp	r3, #12
 8005d4e:	f200 809f 	bhi.w	8005e90 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005d52:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d8d 	.word	0x08005d8d
 8005d5c:	08005e91 	.word	0x08005e91
 8005d60:	08005e91 	.word	0x08005e91
 8005d64:	08005e91 	.word	0x08005e91
 8005d68:	08005dcd 	.word	0x08005dcd
 8005d6c:	08005e91 	.word	0x08005e91
 8005d70:	08005e91 	.word	0x08005e91
 8005d74:	08005e91 	.word	0x08005e91
 8005d78:	08005e0f 	.word	0x08005e0f
 8005d7c:	08005e91 	.word	0x08005e91
 8005d80:	08005e91 	.word	0x08005e91
 8005d84:	08005e91 	.word	0x08005e91
 8005d88:	08005e4f 	.word	0x08005e4f
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f9ee 	bl	8006174 <TIM_OC1_SetConfig>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0208 	orr.w	r2, r2, #8
 8005da6:	619a      	str	r2, [r3, #24]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0204 	bic.w	r2, r2, #4
 8005db6:	619a      	str	r2, [r3, #24]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6999      	ldr	r1, [r3, #24]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	619a      	str	r2, [r3, #24]
 8005dca:	e062      	b.n	8005e92 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fa34 	bl	8006240 <TIM_OC2_SetConfig>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de6:	619a      	str	r2, [r3, #24]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df6:	619a      	str	r2, [r3, #24]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6999      	ldr	r1, [r3, #24]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	021a      	lsls	r2, r3, #8
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	619a      	str	r2, [r3, #24]
 8005e0c:	e041      	b.n	8005e92 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fa7d 	bl	8006314 <TIM_OC3_SetConfig>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0208 	orr.w	r2, r2, #8
 8005e28:	61da      	str	r2, [r3, #28]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0204 	bic.w	r2, r2, #4
 8005e38:	61da      	str	r2, [r3, #28]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69d9      	ldr	r1, [r3, #28]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	61da      	str	r2, [r3, #28]
 8005e4c:	e021      	b.n	8005e92 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fac7 	bl	80063e8 <TIM_OC4_SetConfig>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e68:	61da      	str	r2, [r3, #28]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e78:	61da      	str	r2, [r3, #28]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69d9      	ldr	r1, [r3, #28]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	021a      	lsls	r2, r3, #8
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	61da      	str	r2, [r3, #28]
 8005e8e:	e000      	b.n	8005e92 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005e90:	bf00      	nop
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_TIM_ConfigClockSource>:
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_TIM_ConfigClockSource+0x18>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e0b3      	b.n	8006024 <HAL_TIM_ConfigClockSource+0x180>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	609a      	str	r2, [r3, #8]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef4:	d03e      	beq.n	8005f74 <HAL_TIM_ConfigClockSource+0xd0>
 8005ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efa:	f200 8087 	bhi.w	800600c <HAL_TIM_ConfigClockSource+0x168>
 8005efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f02:	f000 8085 	beq.w	8006010 <HAL_TIM_ConfigClockSource+0x16c>
 8005f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0a:	d87f      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x168>
 8005f0c:	2b70      	cmp	r3, #112	; 0x70
 8005f0e:	d01a      	beq.n	8005f46 <HAL_TIM_ConfigClockSource+0xa2>
 8005f10:	2b70      	cmp	r3, #112	; 0x70
 8005f12:	d87b      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x168>
 8005f14:	2b60      	cmp	r3, #96	; 0x60
 8005f16:	d050      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x116>
 8005f18:	2b60      	cmp	r3, #96	; 0x60
 8005f1a:	d877      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x168>
 8005f1c:	2b50      	cmp	r3, #80	; 0x50
 8005f1e:	d03c      	beq.n	8005f9a <HAL_TIM_ConfigClockSource+0xf6>
 8005f20:	2b50      	cmp	r3, #80	; 0x50
 8005f22:	d873      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x168>
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d058      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x136>
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d86f      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x168>
 8005f2c:	2b30      	cmp	r3, #48	; 0x30
 8005f2e:	d064      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x156>
 8005f30:	2b30      	cmp	r3, #48	; 0x30
 8005f32:	d86b      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x168>
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d060      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x156>
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d867      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x168>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d05c      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x156>
 8005f40:	2b10      	cmp	r3, #16
 8005f42:	d05a      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x156>
 8005f44:	e062      	b.n	800600c <HAL_TIM_ConfigClockSource+0x168>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6899      	ldr	r1, [r3, #8]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f000 fb9a 	bl	800668e <TIM_ETR_SetConfig>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	609a      	str	r2, [r3, #8]
 8005f72:	e04e      	b.n	8006012 <HAL_TIM_ConfigClockSource+0x16e>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	6899      	ldr	r1, [r3, #8]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f000 fb83 	bl	800668e <TIM_ETR_SetConfig>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f96:	609a      	str	r2, [r3, #8]
 8005f98:	e03b      	b.n	8006012 <HAL_TIM_ConfigClockSource+0x16e>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6859      	ldr	r1, [r3, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f000 fafa 	bl	80065a0 <TIM_TI1_ConfigInputStage>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2150      	movs	r1, #80	; 0x50
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fb51 	bl	800665a <TIM_ITRx_SetConfig>
 8005fb8:	e02b      	b.n	8006012 <HAL_TIM_ConfigClockSource+0x16e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6859      	ldr	r1, [r3, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f000 fb18 	bl	80065fc <TIM_TI2_ConfigInputStage>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2160      	movs	r1, #96	; 0x60
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fb41 	bl	800665a <TIM_ITRx_SetConfig>
 8005fd8:	e01b      	b.n	8006012 <HAL_TIM_ConfigClockSource+0x16e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6859      	ldr	r1, [r3, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f000 fada 	bl	80065a0 <TIM_TI1_ConfigInputStage>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2140      	movs	r1, #64	; 0x40
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fb31 	bl	800665a <TIM_ITRx_SetConfig>
 8005ff8:	e00b      	b.n	8006012 <HAL_TIM_ConfigClockSource+0x16e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f000 fb28 	bl	800665a <TIM_ITRx_SetConfig>
 800600a:	e002      	b.n	8006012 <HAL_TIM_ConfigClockSource+0x16e>
 800600c:	bf00      	nop
 800600e:	e000      	b.n	8006012 <HAL_TIM_ConfigClockSource+0x16e>
 8006010:	bf00      	nop
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006022:	2300      	movs	r3, #0
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_TIM_SlaveConfigSynchro>:
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006040:	2302      	movs	r3, #2
 8006042:	e031      	b.n	80060a8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fa14 	bl	8006484 <TIM_SlaveTimer_SetConfig>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <HAL_TIM_SlaveConfigSynchro+0x4a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006072:	2301      	movs	r3, #1
 8006074:	e018      	b.n	80060a8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006084:	60da      	str	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060a6:	2300      	movs	r3, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <TIM_Base_SetConfig>:
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a29      	ldr	r2, [pc, #164]	; (8006168 <TIM_Base_SetConfig+0xb8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00b      	beq.n	80060e0 <TIM_Base_SetConfig+0x30>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ce:	d007      	beq.n	80060e0 <TIM_Base_SetConfig+0x30>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a26      	ldr	r2, [pc, #152]	; (800616c <TIM_Base_SetConfig+0xbc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d003      	beq.n	80060e0 <TIM_Base_SetConfig+0x30>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a25      	ldr	r2, [pc, #148]	; (8006170 <TIM_Base_SetConfig+0xc0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d108      	bne.n	80060f2 <TIM_Base_SetConfig+0x42>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <TIM_Base_SetConfig+0xb8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00b      	beq.n	8006112 <TIM_Base_SetConfig+0x62>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d007      	beq.n	8006112 <TIM_Base_SetConfig+0x62>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a19      	ldr	r2, [pc, #100]	; (800616c <TIM_Base_SetConfig+0xbc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d003      	beq.n	8006112 <TIM_Base_SetConfig+0x62>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a18      	ldr	r2, [pc, #96]	; (8006170 <TIM_Base_SetConfig+0xc0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d108      	bne.n	8006124 <TIM_Base_SetConfig+0x74>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a07      	ldr	r2, [pc, #28]	; (8006168 <TIM_Base_SetConfig+0xb8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d103      	bne.n	8006158 <TIM_Base_SetConfig+0xa8>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	615a      	str	r2, [r3, #20]
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr
 8006168:	40012c00 	.word	0x40012c00
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800

08006174 <TIM_OC1_SetConfig>:
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	f023 0201 	bic.w	r2, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	621a      	str	r2, [r3, #32]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0303 	bic.w	r3, r3, #3
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f023 0302 	bic.w	r3, r3, #2
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a1c      	ldr	r2, [pc, #112]	; (800623c <TIM_OC1_SetConfig+0xc8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d10c      	bne.n	80061ea <TIM_OC1_SetConfig+0x76>
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 0308 	bic.w	r3, r3, #8
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f023 0304 	bic.w	r3, r3, #4
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a13      	ldr	r2, [pc, #76]	; (800623c <TIM_OC1_SetConfig+0xc8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d111      	bne.n	8006216 <TIM_OC1_SetConfig+0xa2>
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	605a      	str	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	619a      	str	r2, [r3, #24]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	635a      	str	r2, [r3, #52]	; 0x34
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	621a      	str	r2, [r3, #32]
 8006230:	bf00      	nop
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40012c00 	.word	0x40012c00

08006240 <TIM_OC2_SetConfig>:
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f023 0210 	bic.w	r2, r3, #16
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	621a      	str	r2, [r3, #32]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f023 0320 	bic.w	r3, r3, #32
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a1d      	ldr	r2, [pc, #116]	; (8006310 <TIM_OC2_SetConfig+0xd0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d10d      	bne.n	80062bc <TIM_OC2_SetConfig+0x7c>
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a14      	ldr	r2, [pc, #80]	; (8006310 <TIM_OC2_SetConfig+0xd0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d113      	bne.n	80062ec <TIM_OC2_SetConfig+0xac>
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062d2:	613b      	str	r3, [r7, #16]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	605a      	str	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	619a      	str	r2, [r3, #24]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	621a      	str	r2, [r3, #32]
 8006306:	bf00      	nop
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	40012c00 	.word	0x40012c00

08006314 <TIM_OC3_SetConfig>:
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	621a      	str	r2, [r3, #32]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0303 	bic.w	r3, r3, #3
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <TIM_OC3_SetConfig+0xd0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d10d      	bne.n	800638e <TIM_OC3_SetConfig+0x7a>
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	021b      	lsls	r3, r3, #8
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a14      	ldr	r2, [pc, #80]	; (80063e4 <TIM_OC3_SetConfig+0xd0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d113      	bne.n	80063be <TIM_OC3_SetConfig+0xaa>
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	605a      	str	r2, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	61da      	str	r2, [r3, #28]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40012c00 	.word	0x40012c00

080063e8 <TIM_OC4_SetConfig>:
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	621a      	str	r2, [r3, #32]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	031b      	lsls	r3, r3, #12
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a0f      	ldr	r2, [pc, #60]	; (8006480 <TIM_OC4_SetConfig+0x98>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d109      	bne.n	800645c <TIM_OC4_SetConfig+0x74>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	019b      	lsls	r3, r3, #6
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	61da      	str	r2, [r3, #28]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	641a      	str	r2, [r3, #64]	; 0x40
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	621a      	str	r2, [r3, #32]
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr
 8006480:	40012c00 	.word	0x40012c00

08006484 <TIM_SlaveTimer_SetConfig>:
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649c:	617b      	str	r3, [r7, #20]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0307 	bic.w	r3, r3, #7
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	609a      	str	r2, [r3, #8]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b70      	cmp	r3, #112	; 0x70
 80064c8:	d01a      	beq.n	8006500 <TIM_SlaveTimer_SetConfig+0x7c>
 80064ca:	2b70      	cmp	r3, #112	; 0x70
 80064cc:	d860      	bhi.n	8006590 <TIM_SlaveTimer_SetConfig+0x10c>
 80064ce:	2b60      	cmp	r3, #96	; 0x60
 80064d0:	d054      	beq.n	800657c <TIM_SlaveTimer_SetConfig+0xf8>
 80064d2:	2b60      	cmp	r3, #96	; 0x60
 80064d4:	d85c      	bhi.n	8006590 <TIM_SlaveTimer_SetConfig+0x10c>
 80064d6:	2b50      	cmp	r3, #80	; 0x50
 80064d8:	d046      	beq.n	8006568 <TIM_SlaveTimer_SetConfig+0xe4>
 80064da:	2b50      	cmp	r3, #80	; 0x50
 80064dc:	d858      	bhi.n	8006590 <TIM_SlaveTimer_SetConfig+0x10c>
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d019      	beq.n	8006516 <TIM_SlaveTimer_SetConfig+0x92>
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d854      	bhi.n	8006590 <TIM_SlaveTimer_SetConfig+0x10c>
 80064e6:	2b30      	cmp	r3, #48	; 0x30
 80064e8:	d054      	beq.n	8006594 <TIM_SlaveTimer_SetConfig+0x110>
 80064ea:	2b30      	cmp	r3, #48	; 0x30
 80064ec:	d850      	bhi.n	8006590 <TIM_SlaveTimer_SetConfig+0x10c>
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d050      	beq.n	8006594 <TIM_SlaveTimer_SetConfig+0x110>
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d84c      	bhi.n	8006590 <TIM_SlaveTimer_SetConfig+0x10c>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d04c      	beq.n	8006594 <TIM_SlaveTimer_SetConfig+0x110>
 80064fa:	2b10      	cmp	r3, #16
 80064fc:	d04a      	beq.n	8006594 <TIM_SlaveTimer_SetConfig+0x110>
 80064fe:	e047      	b.n	8006590 <TIM_SlaveTimer_SetConfig+0x10c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68d9      	ldr	r1, [r3, #12]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f000 f8bd 	bl	800668e <TIM_ETR_SetConfig>
 8006514:	e03f      	b.n	8006596 <TIM_SlaveTimer_SetConfig+0x112>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b05      	cmp	r3, #5
 800651c:	d101      	bne.n	8006522 <TIM_SlaveTimer_SetConfig+0x9e>
 800651e:	2301      	movs	r3, #1
 8006520:	e03a      	b.n	8006598 <TIM_SlaveTimer_SetConfig+0x114>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6a1a      	ldr	r2, [r3, #32]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0201 	bic.w	r2, r2, #1
 8006538:	621a      	str	r2, [r3, #32]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	619a      	str	r2, [r3, #24]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	621a      	str	r2, [r3, #32]
 8006566:	e016      	b.n	8006596 <TIM_SlaveTimer_SetConfig+0x112>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6899      	ldr	r1, [r3, #8]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	461a      	mov	r2, r3
 8006576:	f000 f813 	bl	80065a0 <TIM_TI1_ConfigInputStage>
 800657a:	e00c      	b.n	8006596 <TIM_SlaveTimer_SetConfig+0x112>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	6899      	ldr	r1, [r3, #8]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	461a      	mov	r2, r3
 800658a:	f000 f837 	bl	80065fc <TIM_TI2_ConfigInputStage>
 800658e:	e002      	b.n	8006596 <TIM_SlaveTimer_SetConfig+0x112>
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <TIM_SlaveTimer_SetConfig+0x112>
 8006594:	bf00      	nop
 8006596:	2300      	movs	r3, #0
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <TIM_TI1_ConfigInputStage>:
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	f023 0201 	bic.w	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	621a      	str	r2, [r3, #32]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f023 030a 	bic.w	r3, r3, #10
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	619a      	str	r2, [r3, #24]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	621a      	str	r2, [r3, #32]
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr

080065fc <TIM_TI2_ConfigInputStage>:
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f023 0210 	bic.w	r2, r3, #16
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	621a      	str	r2, [r3, #32]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	031b      	lsls	r3, r3, #12
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	619a      	str	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	621a      	str	r2, [r3, #32]
 8006650:	bf00      	nop
 8006652:	371c      	adds	r7, #28
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr

0800665a <TIM_ITRx_SetConfig>:
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	f043 0307 	orr.w	r3, r3, #7
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	609a      	str	r2, [r3, #8]
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr

0800668e <TIM_ETR_SetConfig>:
 800668e:	b480      	push	{r7}
 8006690:	b087      	sub	sp, #28
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	021a      	lsls	r2, r3, #8
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	609a      	str	r2, [r3, #8]
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr

080066cc <TIM_CCxChannelCmd>:
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 031f 	and.w	r3, r3, #31
 80066de:	2201      	movs	r2, #1
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1a      	ldr	r2, [r3, #32]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	43db      	mvns	r3, r3
 80066ee:	401a      	ands	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	621a      	str	r2, [r3, #32]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	fa01 f303 	lsl.w	r3, r1, r3
 8006704:	431a      	orrs	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr

08006714 <HAL_TIMEx_MasterConfigSynchronization>:
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006728:	2302      	movs	r3, #2
 800672a:	e046      	b.n	80067ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	60bb      	str	r3, [r7, #8]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a16      	ldr	r2, [pc, #88]	; (80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00e      	beq.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006778:	d009      	beq.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a12      	ldr	r2, [pc, #72]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d004      	beq.n	800678e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a10      	ldr	r2, [pc, #64]	; (80067cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d10c      	bne.n	80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006794:	60bb      	str	r3, [r7, #8]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	4313      	orrs	r3, r2
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	609a      	str	r2, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80067b8:	2300      	movs	r3, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr
 80067c4:	40012c00 	.word	0x40012c00
 80067c8:	40000400 	.word	0x40000400
 80067cc:	40000800 	.word	0x40000800

080067d0 <HAL_UART_Init>:
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_UART_Init+0x12>
 80067de:	2301      	movs	r3, #1
 80067e0:	e03f      	b.n	8006862 <HAL_UART_Init+0x92>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_UART_Init+0x2c>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fc fff8 	bl	80037ec <HAL_UART_MspInit>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2224      	movs	r2, #36	; 0x24
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006812:	60da      	str	r2, [r3, #12]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fc85 	bl	8007124 <UART_SetConfig>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006828:	611a      	str	r2, [r3, #16]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695a      	ldr	r2, [r3, #20]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006838:	615a      	str	r2, [r3, #20]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006848:	60da      	str	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	641a      	str	r2, [r3, #64]	; 0x40
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006860:	2300      	movs	r3, #0
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_UART_Transmit>:
 800686a:	b580      	push	{r7, lr}
 800686c:	b08a      	sub	sp, #40	; 0x28
 800686e:	af02      	add	r7, sp, #8
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b20      	cmp	r3, #32
 8006888:	d17c      	bne.n	8006984 <HAL_UART_Transmit+0x11a>
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <HAL_UART_Transmit+0x2c>
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_UART_Transmit+0x30>
 8006896:	2301      	movs	r3, #1
 8006898:	e075      	b.n	8006986 <HAL_UART_Transmit+0x11c>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_UART_Transmit+0x3e>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e06e      	b.n	8006986 <HAL_UART_Transmit+0x11c>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2221      	movs	r2, #33	; 0x21
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068be:	f7fd f8ff 	bl	8003ac0 <HAL_GetTick>
 80068c2:	6178      	str	r0, [r7, #20]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	88fa      	ldrh	r2, [r7, #6]
 80068c8:	849a      	strh	r2, [r3, #36]	; 0x24
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	88fa      	ldrh	r2, [r7, #6]
 80068ce:	84da      	strh	r2, [r3, #38]	; 0x26
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d8:	d108      	bne.n	80068ec <HAL_UART_Transmit+0x82>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d104      	bne.n	80068ec <HAL_UART_Transmit+0x82>
 80068e2:	2300      	movs	r3, #0
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e003      	b.n	80068f4 <HAL_UART_Transmit+0x8a>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	61fb      	str	r3, [r7, #28]
 80068f0:	2300      	movs	r3, #0
 80068f2:	61bb      	str	r3, [r7, #24]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068fc:	e02a      	b.n	8006954 <HAL_UART_Transmit+0xea>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2200      	movs	r2, #0
 8006906:	2180      	movs	r1, #128	; 0x80
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 fa38 	bl	8006d7e <UART_WaitOnFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <HAL_UART_Transmit+0xae>
 8006914:	2303      	movs	r3, #3
 8006916:	e036      	b.n	8006986 <HAL_UART_Transmit+0x11c>
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <HAL_UART_Transmit+0xcc>
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	3302      	adds	r3, #2
 8006932:	61bb      	str	r3, [r7, #24]
 8006934:	e007      	b.n	8006946 <HAL_UART_Transmit+0xdc>
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	781a      	ldrb	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	605a      	str	r2, [r3, #4]
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	3301      	adds	r3, #1
 8006944:	61fb      	str	r3, [r7, #28]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	84da      	strh	r2, [r3, #38]	; 0x26
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006958:	b29b      	uxth	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1cf      	bne.n	80068fe <HAL_UART_Transmit+0x94>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2200      	movs	r2, #0
 8006966:	2140      	movs	r1, #64	; 0x40
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 fa08 	bl	8006d7e <UART_WaitOnFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <HAL_UART_Transmit+0x10e>
 8006974:	2303      	movs	r3, #3
 8006976:	e006      	b.n	8006986 <HAL_UART_Transmit+0x11c>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <HAL_UART_Transmit+0x11c>
 8006984:	2302      	movs	r3, #2
 8006986:	4618      	mov	r0, r3
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <HAL_UART_Receive_IT>:
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	4613      	mov	r3, r2
 800699a:	80fb      	strh	r3, [r7, #6]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d11d      	bne.n	80069e4 <HAL_UART_Receive_IT+0x56>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <HAL_UART_Receive_IT+0x26>
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_UART_Receive_IT+0x2a>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e016      	b.n	80069e6 <HAL_UART_Receive_IT+0x58>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d101      	bne.n	80069c6 <HAL_UART_Receive_IT+0x38>
 80069c2:	2302      	movs	r3, #2
 80069c4:	e00f      	b.n	80069e6 <HAL_UART_Receive_IT+0x58>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	461a      	mov	r2, r3
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 fa19 	bl	8006e12 <UART_Start_Receive_IT>
 80069e0:	4603      	mov	r3, r0
 80069e2:	e000      	b.n	80069e6 <HAL_UART_Receive_IT+0x58>
 80069e4:	2302      	movs	r3, #2
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <HAL_UART_IRQHandler>:
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	623b      	str	r3, [r7, #32]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	61fb      	str	r3, [r7, #28]
 8006a10:	2300      	movs	r3, #0
 8006a12:	61bb      	str	r3, [r7, #24]
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10d      	bne.n	8006a42 <HAL_UART_IRQHandler+0x52>
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <HAL_UART_IRQHandler+0x52>
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_UART_IRQHandler+0x52>
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fac9 	bl	8006fd2 <UART_Receive_IT>
 8006a40:	e17b      	b.n	8006d3a <HAL_UART_IRQHandler+0x34a>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 80b1 	beq.w	8006bac <HAL_UART_IRQHandler+0x1bc>
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d105      	bne.n	8006a60 <HAL_UART_IRQHandler+0x70>
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80a6 	beq.w	8006bac <HAL_UART_IRQHandler+0x1bc>
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <HAL_UART_IRQHandler+0x90>
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <HAL_UART_IRQHandler+0x90>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	f043 0201 	orr.w	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <HAL_UART_IRQHandler+0xb0>
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <HAL_UART_IRQHandler+0xb0>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	f043 0202 	orr.w	r2, r3, #2
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <HAL_UART_IRQHandler+0xd0>
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_UART_IRQHandler+0xd0>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	f043 0204 	orr.w	r2, r3, #4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00f      	beq.n	8006aea <HAL_UART_IRQHandler+0xfa>
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <HAL_UART_IRQHandler+0xee>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <HAL_UART_IRQHandler+0xfa>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f043 0208 	orr.w	r2, r3, #8
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 811e 	beq.w	8006d30 <HAL_UART_IRQHandler+0x340>
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <HAL_UART_IRQHandler+0x11e>
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <HAL_UART_IRQHandler+0x11e>
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa62 	bl	8006fd2 <UART_Receive_IT>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bf14      	ite	ne
 8006b1c:	2301      	movne	r3, #1
 8006b1e:	2300      	moveq	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <HAL_UART_IRQHandler+0x146>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d031      	beq.n	8006b9a <HAL_UART_IRQHandler+0x1aa>
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f9a4 	bl	8006e84 <UART_EndRxTransfer>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d023      	beq.n	8006b92 <HAL_UART_IRQHandler+0x1a2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695a      	ldr	r2, [r3, #20]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b58:	615a      	str	r2, [r3, #20]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d013      	beq.n	8006b8a <HAL_UART_IRQHandler+0x19a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	4a76      	ldr	r2, [pc, #472]	; (8006d40 <HAL_UART_IRQHandler+0x350>)
 8006b68:	635a      	str	r2, [r3, #52]	; 0x34
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fd f91c 	bl	8003dac <HAL_DMA_Abort_IT>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d016      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x1b8>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b84:	4610      	mov	r0, r2
 8006b86:	4798      	blx	r3
 8006b88:	e00e      	b.n	8006ba8 <HAL_UART_IRQHandler+0x1b8>
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f8e3 	bl	8006d56 <HAL_UART_ErrorCallback>
 8006b90:	e00a      	b.n	8006ba8 <HAL_UART_IRQHandler+0x1b8>
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f8df 	bl	8006d56 <HAL_UART_ErrorCallback>
 8006b98:	e006      	b.n	8006ba8 <HAL_UART_IRQHandler+0x1b8>
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8db 	bl	8006d56 <HAL_UART_ErrorCallback>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40
 8006ba6:	e0c3      	b.n	8006d30 <HAL_UART_IRQHandler+0x340>
 8006ba8:	bf00      	nop
 8006baa:	e0c1      	b.n	8006d30 <HAL_UART_IRQHandler+0x340>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	f040 80a1 	bne.w	8006cf8 <HAL_UART_IRQHandler+0x308>
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 809b 	beq.w	8006cf8 <HAL_UART_IRQHandler+0x308>
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8095 	beq.w	8006cf8 <HAL_UART_IRQHandler+0x308>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d04e      	beq.n	8006c90 <HAL_UART_IRQHandler+0x2a0>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	823b      	strh	r3, [r7, #16]
 8006bfc:	8a3b      	ldrh	r3, [r7, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 8098 	beq.w	8006d34 <HAL_UART_IRQHandler+0x344>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c08:	8a3a      	ldrh	r2, [r7, #16]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	f080 8092 	bcs.w	8006d34 <HAL_UART_IRQHandler+0x344>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8a3a      	ldrh	r2, [r7, #16]
 8006c14:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d02b      	beq.n	8006c78 <HAL_UART_IRQHandler+0x288>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c2e:	60da      	str	r2, [r3, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695a      	ldr	r2, [r3, #20]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0201 	bic.w	r2, r2, #1
 8006c3e:	615a      	str	r2, [r3, #20]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695a      	ldr	r2, [r3, #20]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c4e:	615a      	str	r2, [r3, #20]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0210 	bic.w	r2, r2, #16
 8006c6c:	60da      	str	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fd f85f 	bl	8003d36 <HAL_DMA_Abort>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f86d 	bl	8006d68 <HAL_UARTEx_RxEventCallback>
 8006c8e:	e051      	b.n	8006d34 <HAL_UART_IRQHandler+0x344>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	827b      	strh	r3, [r7, #18]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d047      	beq.n	8006d38 <HAL_UART_IRQHandler+0x348>
 8006ca8:	8a7b      	ldrh	r3, [r7, #18]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d044      	beq.n	8006d38 <HAL_UART_IRQHandler+0x348>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cbc:	60da      	str	r2, [r3, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	695a      	ldr	r2, [r3, #20]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0201 	bic.w	r2, r2, #1
 8006ccc:	615a      	str	r2, [r3, #20]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0210 	bic.w	r2, r2, #16
 8006cea:	60da      	str	r2, [r3, #12]
 8006cec:	8a7b      	ldrh	r3, [r7, #18]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f839 	bl	8006d68 <HAL_UARTEx_RxEventCallback>
 8006cf6:	e01f      	b.n	8006d38 <HAL_UART_IRQHandler+0x348>
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <HAL_UART_IRQHandler+0x324>
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_UART_IRQHandler+0x324>
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f8f9 	bl	8006f04 <UART_Transmit_IT>
 8006d12:	e012      	b.n	8006d3a <HAL_UART_IRQHandler+0x34a>
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00d      	beq.n	8006d3a <HAL_UART_IRQHandler+0x34a>
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <HAL_UART_IRQHandler+0x34a>
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f93a 	bl	8006fa2 <UART_EndTransmit_IT>
 8006d2e:	e004      	b.n	8006d3a <HAL_UART_IRQHandler+0x34a>
 8006d30:	bf00      	nop
 8006d32:	e002      	b.n	8006d3a <HAL_UART_IRQHandler+0x34a>
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <HAL_UART_IRQHandler+0x34a>
 8006d38:	bf00      	nop
 8006d3a:	3728      	adds	r7, #40	; 0x28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	08006edd 	.word	0x08006edd

08006d44 <HAL_UART_TxCpltCallback>:
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr

08006d56 <HAL_UART_ErrorCallback>:
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <HAL_UARTEx_RxEventCallback>:
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	807b      	strh	r3, [r7, #2]
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr

08006d7e <UART_WaitOnFlagUntilTimeout>:
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	71fb      	strb	r3, [r7, #7]
 8006d8e:	e02c      	b.n	8006dea <UART_WaitOnFlagUntilTimeout+0x6c>
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d96:	d028      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0x6c>
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <UART_WaitOnFlagUntilTimeout+0x30>
 8006d9e:	f7fc fe8f 	bl	8003ac0 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d21d      	bcs.n	8006dea <UART_WaitOnFlagUntilTimeout+0x6c>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dbc:	60da      	str	r2, [r3, #12]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695a      	ldr	r2, [r3, #20]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0201 	bic.w	r2, r2, #1
 8006dcc:	615a      	str	r2, [r3, #20]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006de6:	2303      	movs	r3, #3
 8006de8:	e00f      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0x8c>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4013      	ands	r3, r2
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	bf0c      	ite	eq
 8006dfa:	2301      	moveq	r3, #1
 8006dfc:	2300      	movne	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d0c3      	beq.n	8006d90 <UART_WaitOnFlagUntilTimeout+0x12>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_Start_Receive_IT>:
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	80fb      	strh	r3, [r7, #6]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	629a      	str	r2, [r3, #40]	; 0x28
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	88fa      	ldrh	r2, [r7, #6]
 8006e2a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	88fa      	ldrh	r2, [r7, #6]
 8006e30:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2222      	movs	r2, #34	; 0x22
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e56:	60da      	str	r2, [r3, #12]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695a      	ldr	r2, [r3, #20]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	615a      	str	r2, [r3, #20]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0220 	orr.w	r2, r2, #32
 8006e76:	60da      	str	r2, [r3, #12]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bc80      	pop	{r7}
 8006e82:	4770      	bx	lr

08006e84 <UART_EndRxTransfer>:
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e9a:	60da      	str	r2, [r3, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695a      	ldr	r2, [r3, #20]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0201 	bic.w	r2, r2, #1
 8006eaa:	615a      	str	r2, [r3, #20]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d107      	bne.n	8006ec4 <UART_EndRxTransfer+0x40>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0210 	bic.w	r2, r2, #16
 8006ec2:	60da      	str	r2, [r3, #12]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr

08006edc <UART_DMAAbortOnError>:
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	84da      	strh	r2, [r3, #38]	; 0x26
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff ff2d 	bl	8006d56 <HAL_UART_ErrorCallback>
 8006efc:	bf00      	nop
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <UART_Transmit_IT>:
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b21      	cmp	r3, #33	; 0x21
 8006f16:	d13e      	bne.n	8006f96 <UART_Transmit_IT+0x92>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f20:	d114      	bne.n	8006f4c <UART_Transmit_IT+0x48>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d110      	bne.n	8006f4c <UART_Transmit_IT+0x48>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f3e:	605a      	str	r2, [r3, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	1c9a      	adds	r2, r3, #2
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	621a      	str	r2, [r3, #32]
 8006f4a:	e008      	b.n	8006f5e <UART_Transmit_IT+0x5a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6211      	str	r1, [r2, #32]
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	605a      	str	r2, [r3, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	3b01      	subs	r3, #1
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10f      	bne.n	8006f92 <UART_Transmit_IT+0x8e>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f80:	60da      	str	r2, [r3, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f90:	60da      	str	r2, [r3, #12]
 8006f92:	2300      	movs	r3, #0
 8006f94:	e000      	b.n	8006f98 <UART_Transmit_IT+0x94>
 8006f96:	2302      	movs	r3, #2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <UART_EndTransmit_IT>:
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb8:	60da      	str	r2, [r3, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff febe 	bl	8006d44 <HAL_UART_TxCpltCallback>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <UART_Receive_IT>:
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b086      	sub	sp, #24
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b22      	cmp	r3, #34	; 0x22
 8006fe4:	f040 8099 	bne.w	800711a <UART_Receive_IT+0x148>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff0:	d117      	bne.n	8007022 <UART_Receive_IT+0x50>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d113      	bne.n	8007022 <UART_Receive_IT+0x50>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	b29b      	uxth	r3, r3
 800700c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007010:	b29a      	uxth	r2, r3
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	801a      	strh	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	1c9a      	adds	r2, r3, #2
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	629a      	str	r2, [r3, #40]	; 0x28
 8007020:	e026      	b.n	8007070 <UART_Receive_IT+0x9e>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007034:	d007      	beq.n	8007046 <UART_Receive_IT+0x74>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <UART_Receive_IT+0x82>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <UART_Receive_IT+0x82>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	b2da      	uxtb	r2, r3
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e008      	b.n	8007066 <UART_Receive_IT+0x94>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007060:	b2da      	uxtb	r2, r3
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	629a      	str	r2, [r3, #40]	; 0x28
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007074:	b29b      	uxth	r3, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	b29b      	uxth	r3, r3
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	4619      	mov	r1, r3
 800707e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007080:	2b00      	cmp	r3, #0
 8007082:	d148      	bne.n	8007116 <UART_Receive_IT+0x144>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0220 	bic.w	r2, r2, #32
 8007092:	60da      	str	r2, [r3, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070a2:	60da      	str	r2, [r3, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695a      	ldr	r2, [r3, #20]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0201 	bic.w	r2, r2, #1
 80070b2:	615a      	str	r2, [r3, #20]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d123      	bne.n	800710c <UART_Receive_IT+0x13a>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0210 	bic.w	r2, r2, #16
 80070d8:	60da      	str	r2, [r3, #12]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0310 	and.w	r3, r3, #16
 80070e4:	2b10      	cmp	r3, #16
 80070e6:	d10a      	bne.n	80070fe <UART_Receive_IT+0x12c>
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff fe2f 	bl	8006d68 <HAL_UARTEx_RxEventCallback>
 800710a:	e002      	b.n	8007112 <UART_Receive_IT+0x140>
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7fb fd21 	bl	8002b54 <HAL_UART_RxCpltCallback>
 8007112:	2300      	movs	r3, #0
 8007114:	e002      	b.n	800711c <UART_Receive_IT+0x14a>
 8007116:	2300      	movs	r3, #0
 8007118:	e000      	b.n	800711c <UART_Receive_IT+0x14a>
 800711a:	2302      	movs	r3, #2
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <UART_SetConfig>:
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	611a      	str	r2, [r3, #16]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	4313      	orrs	r3, r2
 8007152:	60bb      	str	r3, [r7, #8]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800715e:	f023 030c 	bic.w	r3, r3, #12
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	430b      	orrs	r3, r1
 800716a:	60d3      	str	r3, [r2, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	615a      	str	r2, [r3, #20]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a2c      	ldr	r2, [pc, #176]	; (8007238 <UART_SetConfig+0x114>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d103      	bne.n	8007194 <UART_SetConfig+0x70>
 800718c:	f7fe fc50 	bl	8005a30 <HAL_RCC_GetPCLK2Freq>
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	e002      	b.n	800719a <UART_SetConfig+0x76>
 8007194:	f7fe fc38 	bl	8005a08 <HAL_RCC_GetPCLK1Freq>
 8007198:	60f8      	str	r0, [r7, #12]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	009a      	lsls	r2, r3, #2
 80071a4:	441a      	add	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b0:	4a22      	ldr	r2, [pc, #136]	; (800723c <UART_SetConfig+0x118>)
 80071b2:	fba2 2303 	umull	r2, r3, r2, r3
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	0119      	lsls	r1, r3, #4
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4613      	mov	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	009a      	lsls	r2, r3, #2
 80071c4:	441a      	add	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80071d0:	4b1a      	ldr	r3, [pc, #104]	; (800723c <UART_SetConfig+0x118>)
 80071d2:	fba3 0302 	umull	r0, r3, r3, r2
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	2064      	movs	r0, #100	; 0x64
 80071da:	fb00 f303 	mul.w	r3, r0, r3
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	3332      	adds	r3, #50	; 0x32
 80071e4:	4a15      	ldr	r2, [pc, #84]	; (800723c <UART_SetConfig+0x118>)
 80071e6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071f0:	4419      	add	r1, r3
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	009a      	lsls	r2, r3, #2
 80071fc:	441a      	add	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	fbb2 f2f3 	udiv	r2, r2, r3
 8007208:	4b0c      	ldr	r3, [pc, #48]	; (800723c <UART_SetConfig+0x118>)
 800720a:	fba3 0302 	umull	r0, r3, r3, r2
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	2064      	movs	r0, #100	; 0x64
 8007212:	fb00 f303 	mul.w	r3, r0, r3
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	011b      	lsls	r3, r3, #4
 800721a:	3332      	adds	r3, #50	; 0x32
 800721c:	4a07      	ldr	r2, [pc, #28]	; (800723c <UART_SetConfig+0x118>)
 800721e:	fba2 2303 	umull	r2, r3, r2, r3
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	f003 020f 	and.w	r2, r3, #15
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	440a      	add	r2, r1
 800722e:	609a      	str	r2, [r3, #8]
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40013800 	.word	0x40013800
 800723c:	51eb851f 	.word	0x51eb851f

08007240 <_ZdlPvj>:
 8007240:	f000 b824 	b.w	800728c <_ZdlPv>

08007244 <_ZdaPv>:
 8007244:	f000 b822 	b.w	800728c <_ZdlPv>

08007248 <__cxa_guard_acquire>:
 8007248:	6802      	ldr	r2, [r0, #0]
 800724a:	4603      	mov	r3, r0
 800724c:	07d2      	lsls	r2, r2, #31
 800724e:	d405      	bmi.n	800725c <__cxa_guard_acquire+0x14>
 8007250:	7842      	ldrb	r2, [r0, #1]
 8007252:	b102      	cbz	r2, 8007256 <__cxa_guard_acquire+0xe>
 8007254:	deff      	udf	#255	; 0xff
 8007256:	2001      	movs	r0, #1
 8007258:	7058      	strb	r0, [r3, #1]
 800725a:	4770      	bx	lr
 800725c:	2000      	movs	r0, #0
 800725e:	4770      	bx	lr

08007260 <__cxa_guard_release>:
 8007260:	2301      	movs	r3, #1
 8007262:	6003      	str	r3, [r0, #0]
 8007264:	4770      	bx	lr

08007266 <_Znwj>:
 8007266:	2801      	cmp	r0, #1
 8007268:	bf38      	it	cc
 800726a:	2001      	movcc	r0, #1
 800726c:	b510      	push	{r4, lr}
 800726e:	4604      	mov	r4, r0
 8007270:	4620      	mov	r0, r4
 8007272:	f000 fa35 	bl	80076e0 <malloc>
 8007276:	b930      	cbnz	r0, 8007286 <_Znwj+0x20>
 8007278:	f000 f80a 	bl	8007290 <_ZSt15get_new_handlerv>
 800727c:	b908      	cbnz	r0, 8007282 <_Znwj+0x1c>
 800727e:	f000 f9f3 	bl	8007668 <abort>
 8007282:	4780      	blx	r0
 8007284:	e7f4      	b.n	8007270 <_Znwj+0xa>
 8007286:	bd10      	pop	{r4, pc}

08007288 <_Znaj>:
 8007288:	f7ff bfed 	b.w	8007266 <_Znwj>

0800728c <_ZdlPv>:
 800728c:	f000 ba30 	b.w	80076f0 <free>

08007290 <_ZSt15get_new_handlerv>:
 8007290:	4b02      	ldr	r3, [pc, #8]	; (800729c <_ZSt15get_new_handlerv+0xc>)
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	f3bf 8f5b 	dmb	ish
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	20000334 	.word	0x20000334

080072a0 <asinf>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4604      	mov	r4, r0
 80072a4:	f000 f844 	bl	8007330 <__ieee754_asinf>
 80072a8:	4b0e      	ldr	r3, [pc, #56]	; (80072e4 <asinf+0x44>)
 80072aa:	4605      	mov	r5, r0
 80072ac:	f993 3000 	ldrsb.w	r3, [r3]
 80072b0:	3301      	adds	r3, #1
 80072b2:	d015      	beq.n	80072e0 <asinf+0x40>
 80072b4:	4621      	mov	r1, r4
 80072b6:	4620      	mov	r0, r4
 80072b8:	f7f9 fe44 	bl	8000f44 <__aeabi_fcmpun>
 80072bc:	b980      	cbnz	r0, 80072e0 <asinf+0x40>
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 f9cb 	bl	800765a <fabsf>
 80072c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80072c8:	f7f9 fe32 	bl	8000f30 <__aeabi_fcmpgt>
 80072cc:	b140      	cbz	r0, 80072e0 <asinf+0x40>
 80072ce:	f000 f9dd 	bl	800768c <__errno>
 80072d2:	2321      	movs	r3, #33	; 0x21
 80072d4:	6003      	str	r3, [r0, #0]
 80072d6:	4804      	ldr	r0, [pc, #16]	; (80072e8 <asinf+0x48>)
 80072d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072dc:	f000 b9c0 	b.w	8007660 <nanf>
 80072e0:	4628      	mov	r0, r5
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	20000015 	.word	0x20000015
 80072e8:	0800835a 	.word	0x0800835a

080072ec <sqrtf>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4605      	mov	r5, r0
 80072f0:	f000 f962 	bl	80075b8 <__ieee754_sqrtf>
 80072f4:	4b0d      	ldr	r3, [pc, #52]	; (800732c <sqrtf+0x40>)
 80072f6:	4604      	mov	r4, r0
 80072f8:	f993 3000 	ldrsb.w	r3, [r3]
 80072fc:	3301      	adds	r3, #1
 80072fe:	d012      	beq.n	8007326 <sqrtf+0x3a>
 8007300:	4629      	mov	r1, r5
 8007302:	4628      	mov	r0, r5
 8007304:	f7f9 fe1e 	bl	8000f44 <__aeabi_fcmpun>
 8007308:	b968      	cbnz	r0, 8007326 <sqrtf+0x3a>
 800730a:	2100      	movs	r1, #0
 800730c:	4628      	mov	r0, r5
 800730e:	f7f9 fdf1 	bl	8000ef4 <__aeabi_fcmplt>
 8007312:	b140      	cbz	r0, 8007326 <sqrtf+0x3a>
 8007314:	f000 f9ba 	bl	800768c <__errno>
 8007318:	2321      	movs	r3, #33	; 0x21
 800731a:	2100      	movs	r1, #0
 800731c:	6003      	str	r3, [r0, #0]
 800731e:	4608      	mov	r0, r1
 8007320:	f7f9 fcfe 	bl	8000d20 <__aeabi_fdiv>
 8007324:	4604      	mov	r4, r0
 8007326:	4620      	mov	r0, r4
 8007328:	bd38      	pop	{r3, r4, r5, pc}
 800732a:	bf00      	nop
 800732c:	20000015 	.word	0x20000015

08007330 <__ieee754_asinf>:
 8007330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8007338:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800733c:	4604      	mov	r4, r0
 800733e:	4605      	mov	r5, r0
 8007340:	d10c      	bne.n	800735c <__ieee754_asinf+0x2c>
 8007342:	498d      	ldr	r1, [pc, #564]	; (8007578 <__ieee754_asinf+0x248>)
 8007344:	f7f9 fc38 	bl	8000bb8 <__aeabi_fmul>
 8007348:	498c      	ldr	r1, [pc, #560]	; (800757c <__ieee754_asinf+0x24c>)
 800734a:	4605      	mov	r5, r0
 800734c:	4620      	mov	r0, r4
 800734e:	f7f9 fc33 	bl	8000bb8 <__aeabi_fmul>
 8007352:	4601      	mov	r1, r0
 8007354:	4628      	mov	r0, r5
 8007356:	f7f9 fb27 	bl	80009a8 <__addsf3>
 800735a:	e006      	b.n	800736a <__ieee754_asinf+0x3a>
 800735c:	dd07      	ble.n	800736e <__ieee754_asinf+0x3e>
 800735e:	4601      	mov	r1, r0
 8007360:	f7f9 fb20 	bl	80009a4 <__aeabi_fsub>
 8007364:	4601      	mov	r1, r0
 8007366:	f7f9 fcdb 	bl	8000d20 <__aeabi_fdiv>
 800736a:	4604      	mov	r4, r0
 800736c:	e00e      	b.n	800738c <__ieee754_asinf+0x5c>
 800736e:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8007372:	da58      	bge.n	8007426 <__ieee754_asinf+0xf6>
 8007374:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8007378:	da0b      	bge.n	8007392 <__ieee754_asinf+0x62>
 800737a:	4981      	ldr	r1, [pc, #516]	; (8007580 <__ieee754_asinf+0x250>)
 800737c:	f7f9 fb14 	bl	80009a8 <__addsf3>
 8007380:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007384:	f7f9 fdd4 	bl	8000f30 <__aeabi_fcmpgt>
 8007388:	2800      	cmp	r0, #0
 800738a:	d04c      	beq.n	8007426 <__ieee754_asinf+0xf6>
 800738c:	4620      	mov	r0, r4
 800738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007392:	4601      	mov	r1, r0
 8007394:	f7f9 fc10 	bl	8000bb8 <__aeabi_fmul>
 8007398:	4605      	mov	r5, r0
 800739a:	497a      	ldr	r1, [pc, #488]	; (8007584 <__ieee754_asinf+0x254>)
 800739c:	f7f9 fc0c 	bl	8000bb8 <__aeabi_fmul>
 80073a0:	4979      	ldr	r1, [pc, #484]	; (8007588 <__ieee754_asinf+0x258>)
 80073a2:	f7f9 fb01 	bl	80009a8 <__addsf3>
 80073a6:	4629      	mov	r1, r5
 80073a8:	f7f9 fc06 	bl	8000bb8 <__aeabi_fmul>
 80073ac:	4977      	ldr	r1, [pc, #476]	; (800758c <__ieee754_asinf+0x25c>)
 80073ae:	f7f9 faf9 	bl	80009a4 <__aeabi_fsub>
 80073b2:	4629      	mov	r1, r5
 80073b4:	f7f9 fc00 	bl	8000bb8 <__aeabi_fmul>
 80073b8:	4975      	ldr	r1, [pc, #468]	; (8007590 <__ieee754_asinf+0x260>)
 80073ba:	f7f9 faf5 	bl	80009a8 <__addsf3>
 80073be:	4629      	mov	r1, r5
 80073c0:	f7f9 fbfa 	bl	8000bb8 <__aeabi_fmul>
 80073c4:	4973      	ldr	r1, [pc, #460]	; (8007594 <__ieee754_asinf+0x264>)
 80073c6:	f7f9 faed 	bl	80009a4 <__aeabi_fsub>
 80073ca:	4629      	mov	r1, r5
 80073cc:	f7f9 fbf4 	bl	8000bb8 <__aeabi_fmul>
 80073d0:	4971      	ldr	r1, [pc, #452]	; (8007598 <__ieee754_asinf+0x268>)
 80073d2:	f7f9 fae9 	bl	80009a8 <__addsf3>
 80073d6:	4629      	mov	r1, r5
 80073d8:	f7f9 fbee 	bl	8000bb8 <__aeabi_fmul>
 80073dc:	496f      	ldr	r1, [pc, #444]	; (800759c <__ieee754_asinf+0x26c>)
 80073de:	4606      	mov	r6, r0
 80073e0:	4628      	mov	r0, r5
 80073e2:	f7f9 fbe9 	bl	8000bb8 <__aeabi_fmul>
 80073e6:	496e      	ldr	r1, [pc, #440]	; (80075a0 <__ieee754_asinf+0x270>)
 80073e8:	f7f9 fadc 	bl	80009a4 <__aeabi_fsub>
 80073ec:	4629      	mov	r1, r5
 80073ee:	f7f9 fbe3 	bl	8000bb8 <__aeabi_fmul>
 80073f2:	496c      	ldr	r1, [pc, #432]	; (80075a4 <__ieee754_asinf+0x274>)
 80073f4:	f7f9 fad8 	bl	80009a8 <__addsf3>
 80073f8:	4629      	mov	r1, r5
 80073fa:	f7f9 fbdd 	bl	8000bb8 <__aeabi_fmul>
 80073fe:	496a      	ldr	r1, [pc, #424]	; (80075a8 <__ieee754_asinf+0x278>)
 8007400:	f7f9 fad0 	bl	80009a4 <__aeabi_fsub>
 8007404:	4629      	mov	r1, r5
 8007406:	f7f9 fbd7 	bl	8000bb8 <__aeabi_fmul>
 800740a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800740e:	f7f9 facb 	bl	80009a8 <__addsf3>
 8007412:	4601      	mov	r1, r0
 8007414:	4630      	mov	r0, r6
 8007416:	f7f9 fc83 	bl	8000d20 <__aeabi_fdiv>
 800741a:	4621      	mov	r1, r4
 800741c:	f7f9 fbcc 	bl	8000bb8 <__aeabi_fmul>
 8007420:	4601      	mov	r1, r0
 8007422:	4620      	mov	r0, r4
 8007424:	e797      	b.n	8007356 <__ieee754_asinf+0x26>
 8007426:	4620      	mov	r0, r4
 8007428:	f000 f917 	bl	800765a <fabsf>
 800742c:	4601      	mov	r1, r0
 800742e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007432:	f7f9 fab7 	bl	80009a4 <__aeabi_fsub>
 8007436:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800743a:	f7f9 fbbd 	bl	8000bb8 <__aeabi_fmul>
 800743e:	4606      	mov	r6, r0
 8007440:	4950      	ldr	r1, [pc, #320]	; (8007584 <__ieee754_asinf+0x254>)
 8007442:	f7f9 fbb9 	bl	8000bb8 <__aeabi_fmul>
 8007446:	4950      	ldr	r1, [pc, #320]	; (8007588 <__ieee754_asinf+0x258>)
 8007448:	f7f9 faae 	bl	80009a8 <__addsf3>
 800744c:	4631      	mov	r1, r6
 800744e:	f7f9 fbb3 	bl	8000bb8 <__aeabi_fmul>
 8007452:	494e      	ldr	r1, [pc, #312]	; (800758c <__ieee754_asinf+0x25c>)
 8007454:	f7f9 faa6 	bl	80009a4 <__aeabi_fsub>
 8007458:	4631      	mov	r1, r6
 800745a:	f7f9 fbad 	bl	8000bb8 <__aeabi_fmul>
 800745e:	494c      	ldr	r1, [pc, #304]	; (8007590 <__ieee754_asinf+0x260>)
 8007460:	f7f9 faa2 	bl	80009a8 <__addsf3>
 8007464:	4631      	mov	r1, r6
 8007466:	f7f9 fba7 	bl	8000bb8 <__aeabi_fmul>
 800746a:	494a      	ldr	r1, [pc, #296]	; (8007594 <__ieee754_asinf+0x264>)
 800746c:	f7f9 fa9a 	bl	80009a4 <__aeabi_fsub>
 8007470:	4631      	mov	r1, r6
 8007472:	f7f9 fba1 	bl	8000bb8 <__aeabi_fmul>
 8007476:	4948      	ldr	r1, [pc, #288]	; (8007598 <__ieee754_asinf+0x268>)
 8007478:	f7f9 fa96 	bl	80009a8 <__addsf3>
 800747c:	4631      	mov	r1, r6
 800747e:	f7f9 fb9b 	bl	8000bb8 <__aeabi_fmul>
 8007482:	4946      	ldr	r1, [pc, #280]	; (800759c <__ieee754_asinf+0x26c>)
 8007484:	4681      	mov	r9, r0
 8007486:	4630      	mov	r0, r6
 8007488:	f7f9 fb96 	bl	8000bb8 <__aeabi_fmul>
 800748c:	4944      	ldr	r1, [pc, #272]	; (80075a0 <__ieee754_asinf+0x270>)
 800748e:	f7f9 fa89 	bl	80009a4 <__aeabi_fsub>
 8007492:	4631      	mov	r1, r6
 8007494:	f7f9 fb90 	bl	8000bb8 <__aeabi_fmul>
 8007498:	4942      	ldr	r1, [pc, #264]	; (80075a4 <__ieee754_asinf+0x274>)
 800749a:	f7f9 fa85 	bl	80009a8 <__addsf3>
 800749e:	4631      	mov	r1, r6
 80074a0:	f7f9 fb8a 	bl	8000bb8 <__aeabi_fmul>
 80074a4:	4940      	ldr	r1, [pc, #256]	; (80075a8 <__ieee754_asinf+0x278>)
 80074a6:	f7f9 fa7d 	bl	80009a4 <__aeabi_fsub>
 80074aa:	4631      	mov	r1, r6
 80074ac:	f7f9 fb84 	bl	8000bb8 <__aeabi_fmul>
 80074b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80074b4:	f7f9 fa78 	bl	80009a8 <__addsf3>
 80074b8:	4682      	mov	sl, r0
 80074ba:	4630      	mov	r0, r6
 80074bc:	f000 f87c 	bl	80075b8 <__ieee754_sqrtf>
 80074c0:	4b3a      	ldr	r3, [pc, #232]	; (80075ac <__ieee754_asinf+0x27c>)
 80074c2:	4607      	mov	r7, r0
 80074c4:	4598      	cmp	r8, r3
 80074c6:	dd1a      	ble.n	80074fe <__ieee754_asinf+0x1ce>
 80074c8:	4651      	mov	r1, sl
 80074ca:	4648      	mov	r0, r9
 80074cc:	f7f9 fc28 	bl	8000d20 <__aeabi_fdiv>
 80074d0:	4639      	mov	r1, r7
 80074d2:	f7f9 fb71 	bl	8000bb8 <__aeabi_fmul>
 80074d6:	4639      	mov	r1, r7
 80074d8:	f7f9 fa66 	bl	80009a8 <__addsf3>
 80074dc:	4601      	mov	r1, r0
 80074de:	f7f9 fa63 	bl	80009a8 <__addsf3>
 80074e2:	4933      	ldr	r1, [pc, #204]	; (80075b0 <__ieee754_asinf+0x280>)
 80074e4:	f7f9 fa60 	bl	80009a8 <__addsf3>
 80074e8:	4601      	mov	r1, r0
 80074ea:	4823      	ldr	r0, [pc, #140]	; (8007578 <__ieee754_asinf+0x248>)
 80074ec:	f7f9 fa5a 	bl	80009a4 <__aeabi_fsub>
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	f73f af4a 	bgt.w	800738c <__ieee754_asinf+0x5c>
 80074f8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80074fc:	e735      	b.n	800736a <__ieee754_asinf+0x3a>
 80074fe:	4601      	mov	r1, r0
 8007500:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8007504:	f7f9 fa50 	bl	80009a8 <__addsf3>
 8007508:	4651      	mov	r1, sl
 800750a:	4604      	mov	r4, r0
 800750c:	4648      	mov	r0, r9
 800750e:	f7f9 fc07 	bl	8000d20 <__aeabi_fdiv>
 8007512:	4601      	mov	r1, r0
 8007514:	4620      	mov	r0, r4
 8007516:	f7f9 fb4f 	bl	8000bb8 <__aeabi_fmul>
 800751a:	f028 080f 	bic.w	r8, r8, #15
 800751e:	4681      	mov	r9, r0
 8007520:	4641      	mov	r1, r8
 8007522:	4640      	mov	r0, r8
 8007524:	f7f9 fb48 	bl	8000bb8 <__aeabi_fmul>
 8007528:	4601      	mov	r1, r0
 800752a:	4630      	mov	r0, r6
 800752c:	f7f9 fa3a 	bl	80009a4 <__aeabi_fsub>
 8007530:	4641      	mov	r1, r8
 8007532:	4604      	mov	r4, r0
 8007534:	4638      	mov	r0, r7
 8007536:	f7f9 fa37 	bl	80009a8 <__addsf3>
 800753a:	4601      	mov	r1, r0
 800753c:	4620      	mov	r0, r4
 800753e:	f7f9 fbef 	bl	8000d20 <__aeabi_fdiv>
 8007542:	4601      	mov	r1, r0
 8007544:	f7f9 fa30 	bl	80009a8 <__addsf3>
 8007548:	4601      	mov	r1, r0
 800754a:	480c      	ldr	r0, [pc, #48]	; (800757c <__ieee754_asinf+0x24c>)
 800754c:	f7f9 fa2a 	bl	80009a4 <__aeabi_fsub>
 8007550:	4601      	mov	r1, r0
 8007552:	4648      	mov	r0, r9
 8007554:	f7f9 fa26 	bl	80009a4 <__aeabi_fsub>
 8007558:	4641      	mov	r1, r8
 800755a:	4604      	mov	r4, r0
 800755c:	4640      	mov	r0, r8
 800755e:	f7f9 fa23 	bl	80009a8 <__addsf3>
 8007562:	4601      	mov	r1, r0
 8007564:	4813      	ldr	r0, [pc, #76]	; (80075b4 <__ieee754_asinf+0x284>)
 8007566:	f7f9 fa1d 	bl	80009a4 <__aeabi_fsub>
 800756a:	4601      	mov	r1, r0
 800756c:	4620      	mov	r0, r4
 800756e:	f7f9 fa19 	bl	80009a4 <__aeabi_fsub>
 8007572:	4601      	mov	r1, r0
 8007574:	480f      	ldr	r0, [pc, #60]	; (80075b4 <__ieee754_asinf+0x284>)
 8007576:	e7b9      	b.n	80074ec <__ieee754_asinf+0x1bc>
 8007578:	3fc90fdb 	.word	0x3fc90fdb
 800757c:	b33bbd2e 	.word	0xb33bbd2e
 8007580:	7149f2ca 	.word	0x7149f2ca
 8007584:	3811ef08 	.word	0x3811ef08
 8007588:	3a4f7f04 	.word	0x3a4f7f04
 800758c:	3d241146 	.word	0x3d241146
 8007590:	3e4e0aa8 	.word	0x3e4e0aa8
 8007594:	3ea6b090 	.word	0x3ea6b090
 8007598:	3e2aaaab 	.word	0x3e2aaaab
 800759c:	3d9dc62e 	.word	0x3d9dc62e
 80075a0:	3f303361 	.word	0x3f303361
 80075a4:	4001572d 	.word	0x4001572d
 80075a8:	4019d139 	.word	0x4019d139
 80075ac:	3f799999 	.word	0x3f799999
 80075b0:	333bbd2e 	.word	0x333bbd2e
 80075b4:	3f490fdb 	.word	0x3f490fdb

080075b8 <__ieee754_sqrtf>:
 80075b8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80075bc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	4603      	mov	r3, r0
 80075c4:	4604      	mov	r4, r0
 80075c6:	d309      	bcc.n	80075dc <__ieee754_sqrtf+0x24>
 80075c8:	4601      	mov	r1, r0
 80075ca:	f7f9 faf5 	bl	8000bb8 <__aeabi_fmul>
 80075ce:	4601      	mov	r1, r0
 80075d0:	4620      	mov	r0, r4
 80075d2:	f7f9 f9e9 	bl	80009a8 <__addsf3>
 80075d6:	4604      	mov	r4, r0
 80075d8:	4620      	mov	r0, r4
 80075da:	bd70      	pop	{r4, r5, r6, pc}
 80075dc:	2a00      	cmp	r2, #0
 80075de:	d0fb      	beq.n	80075d8 <__ieee754_sqrtf+0x20>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	da06      	bge.n	80075f2 <__ieee754_sqrtf+0x3a>
 80075e4:	4601      	mov	r1, r0
 80075e6:	f7f9 f9dd 	bl	80009a4 <__aeabi_fsub>
 80075ea:	4601      	mov	r1, r0
 80075ec:	f7f9 fb98 	bl	8000d20 <__aeabi_fdiv>
 80075f0:	e7f1      	b.n	80075d6 <__ieee754_sqrtf+0x1e>
 80075f2:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 80075f6:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80075fa:	d029      	beq.n	8007650 <__ieee754_sqrtf+0x98>
 80075fc:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8007600:	07cb      	lsls	r3, r1, #31
 8007602:	f04f 0300 	mov.w	r3, #0
 8007606:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800760a:	f04f 0419 	mov.w	r4, #25
 800760e:	461e      	mov	r6, r3
 8007610:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8007614:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007618:	bf58      	it	pl
 800761a:	0052      	lslpl	r2, r2, #1
 800761c:	1040      	asrs	r0, r0, #1
 800761e:	0052      	lsls	r2, r2, #1
 8007620:	1875      	adds	r5, r6, r1
 8007622:	4295      	cmp	r5, r2
 8007624:	bfde      	ittt	le
 8007626:	186e      	addle	r6, r5, r1
 8007628:	1b52      	suble	r2, r2, r5
 800762a:	185b      	addle	r3, r3, r1
 800762c:	3c01      	subs	r4, #1
 800762e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007632:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007636:	d1f3      	bne.n	8007620 <__ieee754_sqrtf+0x68>
 8007638:	b112      	cbz	r2, 8007640 <__ieee754_sqrtf+0x88>
 800763a:	3301      	adds	r3, #1
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	105c      	asrs	r4, r3, #1
 8007642:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8007646:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800764a:	e7c5      	b.n	80075d8 <__ieee754_sqrtf+0x20>
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	3201      	adds	r2, #1
 8007650:	0218      	lsls	r0, r3, #8
 8007652:	d5fb      	bpl.n	800764c <__ieee754_sqrtf+0x94>
 8007654:	3a01      	subs	r2, #1
 8007656:	1a89      	subs	r1, r1, r2
 8007658:	e7d0      	b.n	80075fc <__ieee754_sqrtf+0x44>

0800765a <fabsf>:
 800765a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800765e:	4770      	bx	lr

08007660 <nanf>:
 8007660:	4800      	ldr	r0, [pc, #0]	; (8007664 <nanf+0x4>)
 8007662:	4770      	bx	lr
 8007664:	7fc00000 	.word	0x7fc00000

08007668 <abort>:
 8007668:	2006      	movs	r0, #6
 800766a:	b508      	push	{r3, lr}
 800766c:	f000 f93c 	bl	80078e8 <raise>
 8007670:	2001      	movs	r0, #1
 8007672:	f7fc f960 	bl	8003936 <_exit>

08007676 <atexit>:
 8007676:	2300      	movs	r3, #0
 8007678:	4601      	mov	r1, r0
 800767a:	461a      	mov	r2, r3
 800767c:	4618      	mov	r0, r3
 800767e:	f000 b9ff 	b.w	8007a80 <__register_exitproc>

08007682 <atoi>:
 8007682:	220a      	movs	r2, #10
 8007684:	2100      	movs	r1, #0
 8007686:	f000 b9f1 	b.w	8007a6c <strtol>
	...

0800768c <__errno>:
 800768c:	4b01      	ldr	r3, [pc, #4]	; (8007694 <__errno+0x8>)
 800768e:	6818      	ldr	r0, [r3, #0]
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	20000018 	.word	0x20000018

08007698 <__libc_init_array>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	2600      	movs	r6, #0
 800769c:	4d0c      	ldr	r5, [pc, #48]	; (80076d0 <__libc_init_array+0x38>)
 800769e:	4c0d      	ldr	r4, [pc, #52]	; (80076d4 <__libc_init_array+0x3c>)
 80076a0:	1b64      	subs	r4, r4, r5
 80076a2:	10a4      	asrs	r4, r4, #2
 80076a4:	42a6      	cmp	r6, r4
 80076a6:	d109      	bne.n	80076bc <__libc_init_array+0x24>
 80076a8:	f000 fda6 	bl	80081f8 <_init>
 80076ac:	2600      	movs	r6, #0
 80076ae:	4d0a      	ldr	r5, [pc, #40]	; (80076d8 <__libc_init_array+0x40>)
 80076b0:	4c0a      	ldr	r4, [pc, #40]	; (80076dc <__libc_init_array+0x44>)
 80076b2:	1b64      	subs	r4, r4, r5
 80076b4:	10a4      	asrs	r4, r4, #2
 80076b6:	42a6      	cmp	r6, r4
 80076b8:	d105      	bne.n	80076c6 <__libc_init_array+0x2e>
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c0:	4798      	blx	r3
 80076c2:	3601      	adds	r6, #1
 80076c4:	e7ee      	b.n	80076a4 <__libc_init_array+0xc>
 80076c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ca:	4798      	blx	r3
 80076cc:	3601      	adds	r6, #1
 80076ce:	e7f2      	b.n	80076b6 <__libc_init_array+0x1e>
 80076d0:	080083e8 	.word	0x080083e8
 80076d4:	080083e8 	.word	0x080083e8
 80076d8:	080083e8 	.word	0x080083e8
 80076dc:	080083f0 	.word	0x080083f0

080076e0 <malloc>:
 80076e0:	4b02      	ldr	r3, [pc, #8]	; (80076ec <malloc+0xc>)
 80076e2:	4601      	mov	r1, r0
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	f000 b86d 	b.w	80077c4 <_malloc_r>
 80076ea:	bf00      	nop
 80076ec:	20000018 	.word	0x20000018

080076f0 <free>:
 80076f0:	4b02      	ldr	r3, [pc, #8]	; (80076fc <free+0xc>)
 80076f2:	4601      	mov	r1, r0
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	f000 b819 	b.w	800772c <_free_r>
 80076fa:	bf00      	nop
 80076fc:	20000018 	.word	0x20000018

08007700 <memcpy>:
 8007700:	440a      	add	r2, r1
 8007702:	4291      	cmp	r1, r2
 8007704:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007708:	d100      	bne.n	800770c <memcpy+0xc>
 800770a:	4770      	bx	lr
 800770c:	b510      	push	{r4, lr}
 800770e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007712:	4291      	cmp	r1, r2
 8007714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007718:	d1f9      	bne.n	800770e <memcpy+0xe>
 800771a:	bd10      	pop	{r4, pc}

0800771c <memset>:
 800771c:	4603      	mov	r3, r0
 800771e:	4402      	add	r2, r0
 8007720:	4293      	cmp	r3, r2
 8007722:	d100      	bne.n	8007726 <memset+0xa>
 8007724:	4770      	bx	lr
 8007726:	f803 1b01 	strb.w	r1, [r3], #1
 800772a:	e7f9      	b.n	8007720 <memset+0x4>

0800772c <_free_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4605      	mov	r5, r0
 8007730:	2900      	cmp	r1, #0
 8007732:	d043      	beq.n	80077bc <_free_r+0x90>
 8007734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007738:	1f0c      	subs	r4, r1, #4
 800773a:	2b00      	cmp	r3, #0
 800773c:	bfb8      	it	lt
 800773e:	18e4      	addlt	r4, r4, r3
 8007740:	f000 fa06 	bl	8007b50 <__malloc_lock>
 8007744:	4a1e      	ldr	r2, [pc, #120]	; (80077c0 <_free_r+0x94>)
 8007746:	6813      	ldr	r3, [r2, #0]
 8007748:	4610      	mov	r0, r2
 800774a:	b933      	cbnz	r3, 800775a <_free_r+0x2e>
 800774c:	6063      	str	r3, [r4, #4]
 800774e:	6014      	str	r4, [r2, #0]
 8007750:	4628      	mov	r0, r5
 8007752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007756:	f000 ba01 	b.w	8007b5c <__malloc_unlock>
 800775a:	42a3      	cmp	r3, r4
 800775c:	d90a      	bls.n	8007774 <_free_r+0x48>
 800775e:	6821      	ldr	r1, [r4, #0]
 8007760:	1862      	adds	r2, r4, r1
 8007762:	4293      	cmp	r3, r2
 8007764:	bf01      	itttt	eq
 8007766:	681a      	ldreq	r2, [r3, #0]
 8007768:	685b      	ldreq	r3, [r3, #4]
 800776a:	1852      	addeq	r2, r2, r1
 800776c:	6022      	streq	r2, [r4, #0]
 800776e:	6063      	str	r3, [r4, #4]
 8007770:	6004      	str	r4, [r0, #0]
 8007772:	e7ed      	b.n	8007750 <_free_r+0x24>
 8007774:	461a      	mov	r2, r3
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	b10b      	cbz	r3, 800777e <_free_r+0x52>
 800777a:	42a3      	cmp	r3, r4
 800777c:	d9fa      	bls.n	8007774 <_free_r+0x48>
 800777e:	6811      	ldr	r1, [r2, #0]
 8007780:	1850      	adds	r0, r2, r1
 8007782:	42a0      	cmp	r0, r4
 8007784:	d10b      	bne.n	800779e <_free_r+0x72>
 8007786:	6820      	ldr	r0, [r4, #0]
 8007788:	4401      	add	r1, r0
 800778a:	1850      	adds	r0, r2, r1
 800778c:	4283      	cmp	r3, r0
 800778e:	6011      	str	r1, [r2, #0]
 8007790:	d1de      	bne.n	8007750 <_free_r+0x24>
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	4401      	add	r1, r0
 8007798:	6011      	str	r1, [r2, #0]
 800779a:	6053      	str	r3, [r2, #4]
 800779c:	e7d8      	b.n	8007750 <_free_r+0x24>
 800779e:	d902      	bls.n	80077a6 <_free_r+0x7a>
 80077a0:	230c      	movs	r3, #12
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	e7d4      	b.n	8007750 <_free_r+0x24>
 80077a6:	6820      	ldr	r0, [r4, #0]
 80077a8:	1821      	adds	r1, r4, r0
 80077aa:	428b      	cmp	r3, r1
 80077ac:	bf01      	itttt	eq
 80077ae:	6819      	ldreq	r1, [r3, #0]
 80077b0:	685b      	ldreq	r3, [r3, #4]
 80077b2:	1809      	addeq	r1, r1, r0
 80077b4:	6021      	streq	r1, [r4, #0]
 80077b6:	6063      	str	r3, [r4, #4]
 80077b8:	6054      	str	r4, [r2, #4]
 80077ba:	e7c9      	b.n	8007750 <_free_r+0x24>
 80077bc:	bd38      	pop	{r3, r4, r5, pc}
 80077be:	bf00      	nop
 80077c0:	20000338 	.word	0x20000338

080077c4 <_malloc_r>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	1ccd      	adds	r5, r1, #3
 80077c8:	f025 0503 	bic.w	r5, r5, #3
 80077cc:	3508      	adds	r5, #8
 80077ce:	2d0c      	cmp	r5, #12
 80077d0:	bf38      	it	cc
 80077d2:	250c      	movcc	r5, #12
 80077d4:	2d00      	cmp	r5, #0
 80077d6:	4606      	mov	r6, r0
 80077d8:	db01      	blt.n	80077de <_malloc_r+0x1a>
 80077da:	42a9      	cmp	r1, r5
 80077dc:	d903      	bls.n	80077e6 <_malloc_r+0x22>
 80077de:	230c      	movs	r3, #12
 80077e0:	6033      	str	r3, [r6, #0]
 80077e2:	2000      	movs	r0, #0
 80077e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e6:	f000 f9b3 	bl	8007b50 <__malloc_lock>
 80077ea:	4921      	ldr	r1, [pc, #132]	; (8007870 <_malloc_r+0xac>)
 80077ec:	680a      	ldr	r2, [r1, #0]
 80077ee:	4614      	mov	r4, r2
 80077f0:	b99c      	cbnz	r4, 800781a <_malloc_r+0x56>
 80077f2:	4f20      	ldr	r7, [pc, #128]	; (8007874 <_malloc_r+0xb0>)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	b923      	cbnz	r3, 8007802 <_malloc_r+0x3e>
 80077f8:	4621      	mov	r1, r4
 80077fa:	4630      	mov	r0, r6
 80077fc:	f000 f83c 	bl	8007878 <_sbrk_r>
 8007800:	6038      	str	r0, [r7, #0]
 8007802:	4629      	mov	r1, r5
 8007804:	4630      	mov	r0, r6
 8007806:	f000 f837 	bl	8007878 <_sbrk_r>
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	d123      	bne.n	8007856 <_malloc_r+0x92>
 800780e:	230c      	movs	r3, #12
 8007810:	4630      	mov	r0, r6
 8007812:	6033      	str	r3, [r6, #0]
 8007814:	f000 f9a2 	bl	8007b5c <__malloc_unlock>
 8007818:	e7e3      	b.n	80077e2 <_malloc_r+0x1e>
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	1b5b      	subs	r3, r3, r5
 800781e:	d417      	bmi.n	8007850 <_malloc_r+0x8c>
 8007820:	2b0b      	cmp	r3, #11
 8007822:	d903      	bls.n	800782c <_malloc_r+0x68>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	441c      	add	r4, r3
 8007828:	6025      	str	r5, [r4, #0]
 800782a:	e004      	b.n	8007836 <_malloc_r+0x72>
 800782c:	6863      	ldr	r3, [r4, #4]
 800782e:	42a2      	cmp	r2, r4
 8007830:	bf0c      	ite	eq
 8007832:	600b      	streq	r3, [r1, #0]
 8007834:	6053      	strne	r3, [r2, #4]
 8007836:	4630      	mov	r0, r6
 8007838:	f000 f990 	bl	8007b5c <__malloc_unlock>
 800783c:	f104 000b 	add.w	r0, r4, #11
 8007840:	1d23      	adds	r3, r4, #4
 8007842:	f020 0007 	bic.w	r0, r0, #7
 8007846:	1ac2      	subs	r2, r0, r3
 8007848:	d0cc      	beq.n	80077e4 <_malloc_r+0x20>
 800784a:	1a1b      	subs	r3, r3, r0
 800784c:	50a3      	str	r3, [r4, r2]
 800784e:	e7c9      	b.n	80077e4 <_malloc_r+0x20>
 8007850:	4622      	mov	r2, r4
 8007852:	6864      	ldr	r4, [r4, #4]
 8007854:	e7cc      	b.n	80077f0 <_malloc_r+0x2c>
 8007856:	1cc4      	adds	r4, r0, #3
 8007858:	f024 0403 	bic.w	r4, r4, #3
 800785c:	42a0      	cmp	r0, r4
 800785e:	d0e3      	beq.n	8007828 <_malloc_r+0x64>
 8007860:	1a21      	subs	r1, r4, r0
 8007862:	4630      	mov	r0, r6
 8007864:	f000 f808 	bl	8007878 <_sbrk_r>
 8007868:	3001      	adds	r0, #1
 800786a:	d1dd      	bne.n	8007828 <_malloc_r+0x64>
 800786c:	e7cf      	b.n	800780e <_malloc_r+0x4a>
 800786e:	bf00      	nop
 8007870:	20000338 	.word	0x20000338
 8007874:	2000033c 	.word	0x2000033c

08007878 <_sbrk_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	2300      	movs	r3, #0
 800787c:	4d05      	ldr	r5, [pc, #20]	; (8007894 <_sbrk_r+0x1c>)
 800787e:	4604      	mov	r4, r0
 8007880:	4608      	mov	r0, r1
 8007882:	602b      	str	r3, [r5, #0]
 8007884:	f7fc f862 	bl	800394c <_sbrk>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d102      	bne.n	8007892 <_sbrk_r+0x1a>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	b103      	cbz	r3, 8007892 <_sbrk_r+0x1a>
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	bd38      	pop	{r3, r4, r5, pc}
 8007894:	200003e0 	.word	0x200003e0

08007898 <_raise_r>:
 8007898:	291f      	cmp	r1, #31
 800789a:	b538      	push	{r3, r4, r5, lr}
 800789c:	4604      	mov	r4, r0
 800789e:	460d      	mov	r5, r1
 80078a0:	d904      	bls.n	80078ac <_raise_r+0x14>
 80078a2:	2316      	movs	r3, #22
 80078a4:	6003      	str	r3, [r0, #0]
 80078a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078ae:	b112      	cbz	r2, 80078b6 <_raise_r+0x1e>
 80078b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078b4:	b94b      	cbnz	r3, 80078ca <_raise_r+0x32>
 80078b6:	4620      	mov	r0, r4
 80078b8:	f000 f830 	bl	800791c <_getpid_r>
 80078bc:	462a      	mov	r2, r5
 80078be:	4601      	mov	r1, r0
 80078c0:	4620      	mov	r0, r4
 80078c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078c6:	f000 b817 	b.w	80078f8 <_kill_r>
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d00a      	beq.n	80078e4 <_raise_r+0x4c>
 80078ce:	1c59      	adds	r1, r3, #1
 80078d0:	d103      	bne.n	80078da <_raise_r+0x42>
 80078d2:	2316      	movs	r3, #22
 80078d4:	6003      	str	r3, [r0, #0]
 80078d6:	2001      	movs	r0, #1
 80078d8:	e7e7      	b.n	80078aa <_raise_r+0x12>
 80078da:	2400      	movs	r4, #0
 80078dc:	4628      	mov	r0, r5
 80078de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078e2:	4798      	blx	r3
 80078e4:	2000      	movs	r0, #0
 80078e6:	e7e0      	b.n	80078aa <_raise_r+0x12>

080078e8 <raise>:
 80078e8:	4b02      	ldr	r3, [pc, #8]	; (80078f4 <raise+0xc>)
 80078ea:	4601      	mov	r1, r0
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	f7ff bfd3 	b.w	8007898 <_raise_r>
 80078f2:	bf00      	nop
 80078f4:	20000018 	.word	0x20000018

080078f8 <_kill_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	2300      	movs	r3, #0
 80078fc:	4d06      	ldr	r5, [pc, #24]	; (8007918 <_kill_r+0x20>)
 80078fe:	4604      	mov	r4, r0
 8007900:	4608      	mov	r0, r1
 8007902:	4611      	mov	r1, r2
 8007904:	602b      	str	r3, [r5, #0]
 8007906:	f7fc f806 	bl	8003916 <_kill>
 800790a:	1c43      	adds	r3, r0, #1
 800790c:	d102      	bne.n	8007914 <_kill_r+0x1c>
 800790e:	682b      	ldr	r3, [r5, #0]
 8007910:	b103      	cbz	r3, 8007914 <_kill_r+0x1c>
 8007912:	6023      	str	r3, [r4, #0]
 8007914:	bd38      	pop	{r3, r4, r5, pc}
 8007916:	bf00      	nop
 8007918:	200003e0 	.word	0x200003e0

0800791c <_getpid_r>:
 800791c:	f7fb bff4 	b.w	8003908 <_getpid>

08007920 <siprintf>:
 8007920:	b40e      	push	{r1, r2, r3}
 8007922:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007926:	b500      	push	{lr}
 8007928:	b09c      	sub	sp, #112	; 0x70
 800792a:	ab1d      	add	r3, sp, #116	; 0x74
 800792c:	9002      	str	r0, [sp, #8]
 800792e:	9006      	str	r0, [sp, #24]
 8007930:	9107      	str	r1, [sp, #28]
 8007932:	9104      	str	r1, [sp, #16]
 8007934:	4808      	ldr	r0, [pc, #32]	; (8007958 <siprintf+0x38>)
 8007936:	4909      	ldr	r1, [pc, #36]	; (800795c <siprintf+0x3c>)
 8007938:	f853 2b04 	ldr.w	r2, [r3], #4
 800793c:	9105      	str	r1, [sp, #20]
 800793e:	6800      	ldr	r0, [r0, #0]
 8007940:	a902      	add	r1, sp, #8
 8007942:	9301      	str	r3, [sp, #4]
 8007944:	f000 f96c 	bl	8007c20 <_svfiprintf_r>
 8007948:	2200      	movs	r2, #0
 800794a:	9b02      	ldr	r3, [sp, #8]
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	b01c      	add	sp, #112	; 0x70
 8007950:	f85d eb04 	ldr.w	lr, [sp], #4
 8007954:	b003      	add	sp, #12
 8007956:	4770      	bx	lr
 8007958:	20000018 	.word	0x20000018
 800795c:	ffff0208 	.word	0xffff0208

08007960 <_strtol_l.isra.0>:
 8007960:	2b01      	cmp	r3, #1
 8007962:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007966:	4686      	mov	lr, r0
 8007968:	d001      	beq.n	800796e <_strtol_l.isra.0+0xe>
 800796a:	2b24      	cmp	r3, #36	; 0x24
 800796c:	d906      	bls.n	800797c <_strtol_l.isra.0+0x1c>
 800796e:	f7ff fe8d 	bl	800768c <__errno>
 8007972:	2316      	movs	r3, #22
 8007974:	6003      	str	r3, [r0, #0]
 8007976:	2000      	movs	r0, #0
 8007978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797c:	468c      	mov	ip, r1
 800797e:	4e3a      	ldr	r6, [pc, #232]	; (8007a68 <_strtol_l.isra.0+0x108>)
 8007980:	4660      	mov	r0, ip
 8007982:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007986:	5da5      	ldrb	r5, [r4, r6]
 8007988:	f015 0508 	ands.w	r5, r5, #8
 800798c:	d1f8      	bne.n	8007980 <_strtol_l.isra.0+0x20>
 800798e:	2c2d      	cmp	r4, #45	; 0x2d
 8007990:	d133      	bne.n	80079fa <_strtol_l.isra.0+0x9a>
 8007992:	f04f 0801 	mov.w	r8, #1
 8007996:	f89c 4000 	ldrb.w	r4, [ip]
 800799a:	f100 0c02 	add.w	ip, r0, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d05d      	beq.n	8007a5e <_strtol_l.isra.0+0xfe>
 80079a2:	2b10      	cmp	r3, #16
 80079a4:	d10c      	bne.n	80079c0 <_strtol_l.isra.0+0x60>
 80079a6:	2c30      	cmp	r4, #48	; 0x30
 80079a8:	d10a      	bne.n	80079c0 <_strtol_l.isra.0+0x60>
 80079aa:	f89c 0000 	ldrb.w	r0, [ip]
 80079ae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80079b2:	2858      	cmp	r0, #88	; 0x58
 80079b4:	d14e      	bne.n	8007a54 <_strtol_l.isra.0+0xf4>
 80079b6:	2310      	movs	r3, #16
 80079b8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80079bc:	f10c 0c02 	add.w	ip, ip, #2
 80079c0:	2500      	movs	r5, #0
 80079c2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80079c6:	3f01      	subs	r7, #1
 80079c8:	fbb7 f9f3 	udiv	r9, r7, r3
 80079cc:	4628      	mov	r0, r5
 80079ce:	fb03 7a19 	mls	sl, r3, r9, r7
 80079d2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80079d6:	2e09      	cmp	r6, #9
 80079d8:	d818      	bhi.n	8007a0c <_strtol_l.isra.0+0xac>
 80079da:	4634      	mov	r4, r6
 80079dc:	42a3      	cmp	r3, r4
 80079de:	dd24      	ble.n	8007a2a <_strtol_l.isra.0+0xca>
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	db1f      	blt.n	8007a24 <_strtol_l.isra.0+0xc4>
 80079e4:	4581      	cmp	r9, r0
 80079e6:	d31d      	bcc.n	8007a24 <_strtol_l.isra.0+0xc4>
 80079e8:	d101      	bne.n	80079ee <_strtol_l.isra.0+0x8e>
 80079ea:	45a2      	cmp	sl, r4
 80079ec:	db1a      	blt.n	8007a24 <_strtol_l.isra.0+0xc4>
 80079ee:	2501      	movs	r5, #1
 80079f0:	fb00 4003 	mla	r0, r0, r3, r4
 80079f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80079f8:	e7eb      	b.n	80079d2 <_strtol_l.isra.0+0x72>
 80079fa:	2c2b      	cmp	r4, #43	; 0x2b
 80079fc:	bf08      	it	eq
 80079fe:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007a02:	46a8      	mov	r8, r5
 8007a04:	bf08      	it	eq
 8007a06:	f100 0c02 	addeq.w	ip, r0, #2
 8007a0a:	e7c8      	b.n	800799e <_strtol_l.isra.0+0x3e>
 8007a0c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007a10:	2e19      	cmp	r6, #25
 8007a12:	d801      	bhi.n	8007a18 <_strtol_l.isra.0+0xb8>
 8007a14:	3c37      	subs	r4, #55	; 0x37
 8007a16:	e7e1      	b.n	80079dc <_strtol_l.isra.0+0x7c>
 8007a18:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007a1c:	2e19      	cmp	r6, #25
 8007a1e:	d804      	bhi.n	8007a2a <_strtol_l.isra.0+0xca>
 8007a20:	3c57      	subs	r4, #87	; 0x57
 8007a22:	e7db      	b.n	80079dc <_strtol_l.isra.0+0x7c>
 8007a24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007a28:	e7e4      	b.n	80079f4 <_strtol_l.isra.0+0x94>
 8007a2a:	2d00      	cmp	r5, #0
 8007a2c:	da08      	bge.n	8007a40 <_strtol_l.isra.0+0xe0>
 8007a2e:	2322      	movs	r3, #34	; 0x22
 8007a30:	4638      	mov	r0, r7
 8007a32:	f8ce 3000 	str.w	r3, [lr]
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	d09e      	beq.n	8007978 <_strtol_l.isra.0+0x18>
 8007a3a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8007a3e:	e007      	b.n	8007a50 <_strtol_l.isra.0+0xf0>
 8007a40:	f1b8 0f00 	cmp.w	r8, #0
 8007a44:	d000      	beq.n	8007a48 <_strtol_l.isra.0+0xe8>
 8007a46:	4240      	negs	r0, r0
 8007a48:	2a00      	cmp	r2, #0
 8007a4a:	d095      	beq.n	8007978 <_strtol_l.isra.0+0x18>
 8007a4c:	2d00      	cmp	r5, #0
 8007a4e:	d1f4      	bne.n	8007a3a <_strtol_l.isra.0+0xda>
 8007a50:	6011      	str	r1, [r2, #0]
 8007a52:	e791      	b.n	8007978 <_strtol_l.isra.0+0x18>
 8007a54:	2430      	movs	r4, #48	; 0x30
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1b2      	bne.n	80079c0 <_strtol_l.isra.0+0x60>
 8007a5a:	2308      	movs	r3, #8
 8007a5c:	e7b0      	b.n	80079c0 <_strtol_l.isra.0+0x60>
 8007a5e:	2c30      	cmp	r4, #48	; 0x30
 8007a60:	d0a3      	beq.n	80079aa <_strtol_l.isra.0+0x4a>
 8007a62:	230a      	movs	r3, #10
 8007a64:	e7ac      	b.n	80079c0 <_strtol_l.isra.0+0x60>
 8007a66:	bf00      	nop
 8007a68:	08008255 	.word	0x08008255

08007a6c <strtol>:
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	460a      	mov	r2, r1
 8007a70:	4601      	mov	r1, r0
 8007a72:	4802      	ldr	r0, [pc, #8]	; (8007a7c <strtol+0x10>)
 8007a74:	6800      	ldr	r0, [r0, #0]
 8007a76:	f7ff bf73 	b.w	8007960 <_strtol_l.isra.0>
 8007a7a:	bf00      	nop
 8007a7c:	20000018 	.word	0x20000018

08007a80 <__register_exitproc>:
 8007a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a84:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8007b44 <__register_exitproc+0xc4>
 8007a88:	4606      	mov	r6, r0
 8007a8a:	f8d8 0000 	ldr.w	r0, [r8]
 8007a8e:	461f      	mov	r7, r3
 8007a90:	460d      	mov	r5, r1
 8007a92:	4691      	mov	r9, r2
 8007a94:	f000 f858 	bl	8007b48 <__retarget_lock_acquire_recursive>
 8007a98:	4b26      	ldr	r3, [pc, #152]	; (8007b34 <__register_exitproc+0xb4>)
 8007a9a:	681c      	ldr	r4, [r3, #0]
 8007a9c:	b934      	cbnz	r4, 8007aac <__register_exitproc+0x2c>
 8007a9e:	4c26      	ldr	r4, [pc, #152]	; (8007b38 <__register_exitproc+0xb8>)
 8007aa0:	601c      	str	r4, [r3, #0]
 8007aa2:	4b26      	ldr	r3, [pc, #152]	; (8007b3c <__register_exitproc+0xbc>)
 8007aa4:	b113      	cbz	r3, 8007aac <__register_exitproc+0x2c>
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8007aac:	6863      	ldr	r3, [r4, #4]
 8007aae:	2b1f      	cmp	r3, #31
 8007ab0:	dd07      	ble.n	8007ac2 <__register_exitproc+0x42>
 8007ab2:	f8d8 0000 	ldr.w	r0, [r8]
 8007ab6:	f000 f849 	bl	8007b4c <__retarget_lock_release_recursive>
 8007aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac2:	b35e      	cbz	r6, 8007b1c <__register_exitproc+0x9c>
 8007ac4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8007ac8:	b988      	cbnz	r0, 8007aee <__register_exitproc+0x6e>
 8007aca:	4b1d      	ldr	r3, [pc, #116]	; (8007b40 <__register_exitproc+0xc0>)
 8007acc:	b923      	cbnz	r3, 8007ad8 <__register_exitproc+0x58>
 8007ace:	f8d8 0000 	ldr.w	r0, [r8]
 8007ad2:	f000 f83a 	bl	8007b4a <__retarget_lock_release>
 8007ad6:	e7f0      	b.n	8007aba <__register_exitproc+0x3a>
 8007ad8:	f44f 7084 	mov.w	r0, #264	; 0x108
 8007adc:	f7ff fe00 	bl	80076e0 <malloc>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d0f4      	beq.n	8007ace <__register_exitproc+0x4e>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8007aea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8007aee:	2201      	movs	r2, #1
 8007af0:	6863      	ldr	r3, [r4, #4]
 8007af2:	2e02      	cmp	r6, #2
 8007af4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8007af8:	fa02 f203 	lsl.w	r2, r2, r3
 8007afc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8007b00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007b04:	ea43 0302 	orr.w	r3, r3, r2
 8007b08:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8007b0c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8007b10:	bf02      	ittt	eq
 8007b12:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8007b16:	431a      	orreq	r2, r3
 8007b18:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8007b1c:	6863      	ldr	r3, [r4, #4]
 8007b1e:	f8d8 0000 	ldr.w	r0, [r8]
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	3302      	adds	r3, #2
 8007b26:	6062      	str	r2, [r4, #4]
 8007b28:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8007b2c:	f000 f80e 	bl	8007b4c <__retarget_lock_release_recursive>
 8007b30:	2000      	movs	r0, #0
 8007b32:	e7c4      	b.n	8007abe <__register_exitproc+0x3e>
 8007b34:	200003cc 	.word	0x200003cc
 8007b38:	20000340 	.word	0x20000340
 8007b3c:	00000000 	.word	0x00000000
 8007b40:	080076e1 	.word	0x080076e1
 8007b44:	2000007c 	.word	0x2000007c

08007b48 <__retarget_lock_acquire_recursive>:
 8007b48:	4770      	bx	lr

08007b4a <__retarget_lock_release>:
 8007b4a:	4770      	bx	lr

08007b4c <__retarget_lock_release_recursive>:
 8007b4c:	4770      	bx	lr
	...

08007b50 <__malloc_lock>:
 8007b50:	4801      	ldr	r0, [pc, #4]	; (8007b58 <__malloc_lock+0x8>)
 8007b52:	f7ff bff9 	b.w	8007b48 <__retarget_lock_acquire_recursive>
 8007b56:	bf00      	nop
 8007b58:	200003d8 	.word	0x200003d8

08007b5c <__malloc_unlock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	; (8007b64 <__malloc_unlock+0x8>)
 8007b5e:	f7ff bff5 	b.w	8007b4c <__retarget_lock_release_recursive>
 8007b62:	bf00      	nop
 8007b64:	200003d8 	.word	0x200003d8

08007b68 <__ssputs_r>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	688e      	ldr	r6, [r1, #8]
 8007b6e:	4682      	mov	sl, r0
 8007b70:	429e      	cmp	r6, r3
 8007b72:	460c      	mov	r4, r1
 8007b74:	4690      	mov	r8, r2
 8007b76:	461f      	mov	r7, r3
 8007b78:	d838      	bhi.n	8007bec <__ssputs_r+0x84>
 8007b7a:	898a      	ldrh	r2, [r1, #12]
 8007b7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b80:	d032      	beq.n	8007be8 <__ssputs_r+0x80>
 8007b82:	6825      	ldr	r5, [r4, #0]
 8007b84:	6909      	ldr	r1, [r1, #16]
 8007b86:	3301      	adds	r3, #1
 8007b88:	eba5 0901 	sub.w	r9, r5, r1
 8007b8c:	6965      	ldr	r5, [r4, #20]
 8007b8e:	444b      	add	r3, r9
 8007b90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b98:	106d      	asrs	r5, r5, #1
 8007b9a:	429d      	cmp	r5, r3
 8007b9c:	bf38      	it	cc
 8007b9e:	461d      	movcc	r5, r3
 8007ba0:	0553      	lsls	r3, r2, #21
 8007ba2:	d531      	bpl.n	8007c08 <__ssputs_r+0xa0>
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	f7ff fe0d 	bl	80077c4 <_malloc_r>
 8007baa:	4606      	mov	r6, r0
 8007bac:	b950      	cbnz	r0, 8007bc4 <__ssputs_r+0x5c>
 8007bae:	230c      	movs	r3, #12
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bb4:	f8ca 3000 	str.w	r3, [sl]
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bbe:	81a3      	strh	r3, [r4, #12]
 8007bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc4:	464a      	mov	r2, r9
 8007bc6:	6921      	ldr	r1, [r4, #16]
 8007bc8:	f7ff fd9a 	bl	8007700 <memcpy>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	6126      	str	r6, [r4, #16]
 8007bda:	444e      	add	r6, r9
 8007bdc:	6026      	str	r6, [r4, #0]
 8007bde:	463e      	mov	r6, r7
 8007be0:	6165      	str	r5, [r4, #20]
 8007be2:	eba5 0509 	sub.w	r5, r5, r9
 8007be6:	60a5      	str	r5, [r4, #8]
 8007be8:	42be      	cmp	r6, r7
 8007bea:	d900      	bls.n	8007bee <__ssputs_r+0x86>
 8007bec:	463e      	mov	r6, r7
 8007bee:	4632      	mov	r2, r6
 8007bf0:	4641      	mov	r1, r8
 8007bf2:	6820      	ldr	r0, [r4, #0]
 8007bf4:	f000 fab8 	bl	8008168 <memmove>
 8007bf8:	68a3      	ldr	r3, [r4, #8]
 8007bfa:	6822      	ldr	r2, [r4, #0]
 8007bfc:	1b9b      	subs	r3, r3, r6
 8007bfe:	4432      	add	r2, r6
 8007c00:	2000      	movs	r0, #0
 8007c02:	60a3      	str	r3, [r4, #8]
 8007c04:	6022      	str	r2, [r4, #0]
 8007c06:	e7db      	b.n	8007bc0 <__ssputs_r+0x58>
 8007c08:	462a      	mov	r2, r5
 8007c0a:	f000 fac7 	bl	800819c <_realloc_r>
 8007c0e:	4606      	mov	r6, r0
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d1e1      	bne.n	8007bd8 <__ssputs_r+0x70>
 8007c14:	4650      	mov	r0, sl
 8007c16:	6921      	ldr	r1, [r4, #16]
 8007c18:	f7ff fd88 	bl	800772c <_free_r>
 8007c1c:	e7c7      	b.n	8007bae <__ssputs_r+0x46>
	...

08007c20 <_svfiprintf_r>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	4698      	mov	r8, r3
 8007c26:	898b      	ldrh	r3, [r1, #12]
 8007c28:	4607      	mov	r7, r0
 8007c2a:	061b      	lsls	r3, r3, #24
 8007c2c:	460d      	mov	r5, r1
 8007c2e:	4614      	mov	r4, r2
 8007c30:	b09d      	sub	sp, #116	; 0x74
 8007c32:	d50e      	bpl.n	8007c52 <_svfiprintf_r+0x32>
 8007c34:	690b      	ldr	r3, [r1, #16]
 8007c36:	b963      	cbnz	r3, 8007c52 <_svfiprintf_r+0x32>
 8007c38:	2140      	movs	r1, #64	; 0x40
 8007c3a:	f7ff fdc3 	bl	80077c4 <_malloc_r>
 8007c3e:	6028      	str	r0, [r5, #0]
 8007c40:	6128      	str	r0, [r5, #16]
 8007c42:	b920      	cbnz	r0, 8007c4e <_svfiprintf_r+0x2e>
 8007c44:	230c      	movs	r3, #12
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c4c:	e0d1      	b.n	8007df2 <_svfiprintf_r+0x1d2>
 8007c4e:	2340      	movs	r3, #64	; 0x40
 8007c50:	616b      	str	r3, [r5, #20]
 8007c52:	2300      	movs	r3, #0
 8007c54:	9309      	str	r3, [sp, #36]	; 0x24
 8007c56:	2320      	movs	r3, #32
 8007c58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c5c:	2330      	movs	r3, #48	; 0x30
 8007c5e:	f04f 0901 	mov.w	r9, #1
 8007c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e0c <_svfiprintf_r+0x1ec>
 8007c6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c6e:	4623      	mov	r3, r4
 8007c70:	469a      	mov	sl, r3
 8007c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c76:	b10a      	cbz	r2, 8007c7c <_svfiprintf_r+0x5c>
 8007c78:	2a25      	cmp	r2, #37	; 0x25
 8007c7a:	d1f9      	bne.n	8007c70 <_svfiprintf_r+0x50>
 8007c7c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c80:	d00b      	beq.n	8007c9a <_svfiprintf_r+0x7a>
 8007c82:	465b      	mov	r3, fp
 8007c84:	4622      	mov	r2, r4
 8007c86:	4629      	mov	r1, r5
 8007c88:	4638      	mov	r0, r7
 8007c8a:	f7ff ff6d 	bl	8007b68 <__ssputs_r>
 8007c8e:	3001      	adds	r0, #1
 8007c90:	f000 80aa 	beq.w	8007de8 <_svfiprintf_r+0x1c8>
 8007c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c96:	445a      	add	r2, fp
 8007c98:	9209      	str	r2, [sp, #36]	; 0x24
 8007c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 80a2 	beq.w	8007de8 <_svfiprintf_r+0x1c8>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007caa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cae:	f10a 0a01 	add.w	sl, sl, #1
 8007cb2:	9304      	str	r3, [sp, #16]
 8007cb4:	9307      	str	r3, [sp, #28]
 8007cb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cba:	931a      	str	r3, [sp, #104]	; 0x68
 8007cbc:	4654      	mov	r4, sl
 8007cbe:	2205      	movs	r2, #5
 8007cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cc4:	4851      	ldr	r0, [pc, #324]	; (8007e0c <_svfiprintf_r+0x1ec>)
 8007cc6:	f000 fa41 	bl	800814c <memchr>
 8007cca:	9a04      	ldr	r2, [sp, #16]
 8007ccc:	b9d8      	cbnz	r0, 8007d06 <_svfiprintf_r+0xe6>
 8007cce:	06d0      	lsls	r0, r2, #27
 8007cd0:	bf44      	itt	mi
 8007cd2:	2320      	movmi	r3, #32
 8007cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cd8:	0711      	lsls	r1, r2, #28
 8007cda:	bf44      	itt	mi
 8007cdc:	232b      	movmi	r3, #43	; 0x2b
 8007cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce8:	d015      	beq.n	8007d16 <_svfiprintf_r+0xf6>
 8007cea:	4654      	mov	r4, sl
 8007cec:	2000      	movs	r0, #0
 8007cee:	f04f 0c0a 	mov.w	ip, #10
 8007cf2:	9a07      	ldr	r2, [sp, #28]
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cfa:	3b30      	subs	r3, #48	; 0x30
 8007cfc:	2b09      	cmp	r3, #9
 8007cfe:	d94e      	bls.n	8007d9e <_svfiprintf_r+0x17e>
 8007d00:	b1b0      	cbz	r0, 8007d30 <_svfiprintf_r+0x110>
 8007d02:	9207      	str	r2, [sp, #28]
 8007d04:	e014      	b.n	8007d30 <_svfiprintf_r+0x110>
 8007d06:	eba0 0308 	sub.w	r3, r0, r8
 8007d0a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	46a2      	mov	sl, r4
 8007d12:	9304      	str	r3, [sp, #16]
 8007d14:	e7d2      	b.n	8007cbc <_svfiprintf_r+0x9c>
 8007d16:	9b03      	ldr	r3, [sp, #12]
 8007d18:	1d19      	adds	r1, r3, #4
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	9103      	str	r1, [sp, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	bfbb      	ittet	lt
 8007d22:	425b      	neglt	r3, r3
 8007d24:	f042 0202 	orrlt.w	r2, r2, #2
 8007d28:	9307      	strge	r3, [sp, #28]
 8007d2a:	9307      	strlt	r3, [sp, #28]
 8007d2c:	bfb8      	it	lt
 8007d2e:	9204      	strlt	r2, [sp, #16]
 8007d30:	7823      	ldrb	r3, [r4, #0]
 8007d32:	2b2e      	cmp	r3, #46	; 0x2e
 8007d34:	d10c      	bne.n	8007d50 <_svfiprintf_r+0x130>
 8007d36:	7863      	ldrb	r3, [r4, #1]
 8007d38:	2b2a      	cmp	r3, #42	; 0x2a
 8007d3a:	d135      	bne.n	8007da8 <_svfiprintf_r+0x188>
 8007d3c:	9b03      	ldr	r3, [sp, #12]
 8007d3e:	3402      	adds	r4, #2
 8007d40:	1d1a      	adds	r2, r3, #4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	9203      	str	r2, [sp, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bfb8      	it	lt
 8007d4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d4e:	9305      	str	r3, [sp, #20]
 8007d50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e1c <_svfiprintf_r+0x1fc>
 8007d54:	2203      	movs	r2, #3
 8007d56:	4650      	mov	r0, sl
 8007d58:	7821      	ldrb	r1, [r4, #0]
 8007d5a:	f000 f9f7 	bl	800814c <memchr>
 8007d5e:	b140      	cbz	r0, 8007d72 <_svfiprintf_r+0x152>
 8007d60:	2340      	movs	r3, #64	; 0x40
 8007d62:	eba0 000a 	sub.w	r0, r0, sl
 8007d66:	fa03 f000 	lsl.w	r0, r3, r0
 8007d6a:	9b04      	ldr	r3, [sp, #16]
 8007d6c:	3401      	adds	r4, #1
 8007d6e:	4303      	orrs	r3, r0
 8007d70:	9304      	str	r3, [sp, #16]
 8007d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d76:	2206      	movs	r2, #6
 8007d78:	4825      	ldr	r0, [pc, #148]	; (8007e10 <_svfiprintf_r+0x1f0>)
 8007d7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d7e:	f000 f9e5 	bl	800814c <memchr>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d038      	beq.n	8007df8 <_svfiprintf_r+0x1d8>
 8007d86:	4b23      	ldr	r3, [pc, #140]	; (8007e14 <_svfiprintf_r+0x1f4>)
 8007d88:	bb1b      	cbnz	r3, 8007dd2 <_svfiprintf_r+0x1b2>
 8007d8a:	9b03      	ldr	r3, [sp, #12]
 8007d8c:	3307      	adds	r3, #7
 8007d8e:	f023 0307 	bic.w	r3, r3, #7
 8007d92:	3308      	adds	r3, #8
 8007d94:	9303      	str	r3, [sp, #12]
 8007d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d98:	4433      	add	r3, r6
 8007d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d9c:	e767      	b.n	8007c6e <_svfiprintf_r+0x4e>
 8007d9e:	460c      	mov	r4, r1
 8007da0:	2001      	movs	r0, #1
 8007da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007da6:	e7a5      	b.n	8007cf4 <_svfiprintf_r+0xd4>
 8007da8:	2300      	movs	r3, #0
 8007daa:	f04f 0c0a 	mov.w	ip, #10
 8007dae:	4619      	mov	r1, r3
 8007db0:	3401      	adds	r4, #1
 8007db2:	9305      	str	r3, [sp, #20]
 8007db4:	4620      	mov	r0, r4
 8007db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dba:	3a30      	subs	r2, #48	; 0x30
 8007dbc:	2a09      	cmp	r2, #9
 8007dbe:	d903      	bls.n	8007dc8 <_svfiprintf_r+0x1a8>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0c5      	beq.n	8007d50 <_svfiprintf_r+0x130>
 8007dc4:	9105      	str	r1, [sp, #20]
 8007dc6:	e7c3      	b.n	8007d50 <_svfiprintf_r+0x130>
 8007dc8:	4604      	mov	r4, r0
 8007dca:	2301      	movs	r3, #1
 8007dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dd0:	e7f0      	b.n	8007db4 <_svfiprintf_r+0x194>
 8007dd2:	ab03      	add	r3, sp, #12
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	462a      	mov	r2, r5
 8007dd8:	4638      	mov	r0, r7
 8007dda:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <_svfiprintf_r+0x1f8>)
 8007ddc:	a904      	add	r1, sp, #16
 8007dde:	f3af 8000 	nop.w
 8007de2:	1c42      	adds	r2, r0, #1
 8007de4:	4606      	mov	r6, r0
 8007de6:	d1d6      	bne.n	8007d96 <_svfiprintf_r+0x176>
 8007de8:	89ab      	ldrh	r3, [r5, #12]
 8007dea:	065b      	lsls	r3, r3, #25
 8007dec:	f53f af2c 	bmi.w	8007c48 <_svfiprintf_r+0x28>
 8007df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007df2:	b01d      	add	sp, #116	; 0x74
 8007df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df8:	ab03      	add	r3, sp, #12
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	462a      	mov	r2, r5
 8007dfe:	4638      	mov	r0, r7
 8007e00:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <_svfiprintf_r+0x1f8>)
 8007e02:	a904      	add	r1, sp, #16
 8007e04:	f000 f87c 	bl	8007f00 <_printf_i>
 8007e08:	e7eb      	b.n	8007de2 <_svfiprintf_r+0x1c2>
 8007e0a:	bf00      	nop
 8007e0c:	08008355 	.word	0x08008355
 8007e10:	0800835f 	.word	0x0800835f
 8007e14:	00000000 	.word	0x00000000
 8007e18:	08007b69 	.word	0x08007b69
 8007e1c:	0800835b 	.word	0x0800835b

08007e20 <_printf_common>:
 8007e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e24:	4616      	mov	r6, r2
 8007e26:	4699      	mov	r9, r3
 8007e28:	688a      	ldr	r2, [r1, #8]
 8007e2a:	690b      	ldr	r3, [r1, #16]
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	bfb8      	it	lt
 8007e32:	4613      	movlt	r3, r2
 8007e34:	6033      	str	r3, [r6, #0]
 8007e36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e40:	b10a      	cbz	r2, 8007e46 <_printf_common+0x26>
 8007e42:	3301      	adds	r3, #1
 8007e44:	6033      	str	r3, [r6, #0]
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	0699      	lsls	r1, r3, #26
 8007e4a:	bf42      	ittt	mi
 8007e4c:	6833      	ldrmi	r3, [r6, #0]
 8007e4e:	3302      	addmi	r3, #2
 8007e50:	6033      	strmi	r3, [r6, #0]
 8007e52:	6825      	ldr	r5, [r4, #0]
 8007e54:	f015 0506 	ands.w	r5, r5, #6
 8007e58:	d106      	bne.n	8007e68 <_printf_common+0x48>
 8007e5a:	f104 0a19 	add.w	sl, r4, #25
 8007e5e:	68e3      	ldr	r3, [r4, #12]
 8007e60:	6832      	ldr	r2, [r6, #0]
 8007e62:	1a9b      	subs	r3, r3, r2
 8007e64:	42ab      	cmp	r3, r5
 8007e66:	dc28      	bgt.n	8007eba <_printf_common+0x9a>
 8007e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e6c:	1e13      	subs	r3, r2, #0
 8007e6e:	6822      	ldr	r2, [r4, #0]
 8007e70:	bf18      	it	ne
 8007e72:	2301      	movne	r3, #1
 8007e74:	0692      	lsls	r2, r2, #26
 8007e76:	d42d      	bmi.n	8007ed4 <_printf_common+0xb4>
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e80:	47c0      	blx	r8
 8007e82:	3001      	adds	r0, #1
 8007e84:	d020      	beq.n	8007ec8 <_printf_common+0xa8>
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	68e5      	ldr	r5, [r4, #12]
 8007e8a:	f003 0306 	and.w	r3, r3, #6
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	bf18      	it	ne
 8007e92:	2500      	movne	r5, #0
 8007e94:	6832      	ldr	r2, [r6, #0]
 8007e96:	f04f 0600 	mov.w	r6, #0
 8007e9a:	68a3      	ldr	r3, [r4, #8]
 8007e9c:	bf08      	it	eq
 8007e9e:	1aad      	subeq	r5, r5, r2
 8007ea0:	6922      	ldr	r2, [r4, #16]
 8007ea2:	bf08      	it	eq
 8007ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	bfc4      	itt	gt
 8007eac:	1a9b      	subgt	r3, r3, r2
 8007eae:	18ed      	addgt	r5, r5, r3
 8007eb0:	341a      	adds	r4, #26
 8007eb2:	42b5      	cmp	r5, r6
 8007eb4:	d11a      	bne.n	8007eec <_printf_common+0xcc>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	e008      	b.n	8007ecc <_printf_common+0xac>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4652      	mov	r2, sl
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	47c0      	blx	r8
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	d103      	bne.n	8007ed0 <_printf_common+0xb0>
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed0:	3501      	adds	r5, #1
 8007ed2:	e7c4      	b.n	8007e5e <_printf_common+0x3e>
 8007ed4:	2030      	movs	r0, #48	; 0x30
 8007ed6:	18e1      	adds	r1, r4, r3
 8007ed8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ee2:	4422      	add	r2, r4
 8007ee4:	3302      	adds	r3, #2
 8007ee6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007eea:	e7c5      	b.n	8007e78 <_printf_common+0x58>
 8007eec:	2301      	movs	r3, #1
 8007eee:	4622      	mov	r2, r4
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	47c0      	blx	r8
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	d0e6      	beq.n	8007ec8 <_printf_common+0xa8>
 8007efa:	3601      	adds	r6, #1
 8007efc:	e7d9      	b.n	8007eb2 <_printf_common+0x92>
	...

08007f00 <_printf_i>:
 8007f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f04:	460c      	mov	r4, r1
 8007f06:	7e27      	ldrb	r7, [r4, #24]
 8007f08:	4691      	mov	r9, r2
 8007f0a:	2f78      	cmp	r7, #120	; 0x78
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	469a      	mov	sl, r3
 8007f10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f16:	d807      	bhi.n	8007f28 <_printf_i+0x28>
 8007f18:	2f62      	cmp	r7, #98	; 0x62
 8007f1a:	d80a      	bhi.n	8007f32 <_printf_i+0x32>
 8007f1c:	2f00      	cmp	r7, #0
 8007f1e:	f000 80d9 	beq.w	80080d4 <_printf_i+0x1d4>
 8007f22:	2f58      	cmp	r7, #88	; 0x58
 8007f24:	f000 80a4 	beq.w	8008070 <_printf_i+0x170>
 8007f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f30:	e03a      	b.n	8007fa8 <_printf_i+0xa8>
 8007f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f36:	2b15      	cmp	r3, #21
 8007f38:	d8f6      	bhi.n	8007f28 <_printf_i+0x28>
 8007f3a:	a001      	add	r0, pc, #4	; (adr r0, 8007f40 <_printf_i+0x40>)
 8007f3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007f40:	08007f99 	.word	0x08007f99
 8007f44:	08007fad 	.word	0x08007fad
 8007f48:	08007f29 	.word	0x08007f29
 8007f4c:	08007f29 	.word	0x08007f29
 8007f50:	08007f29 	.word	0x08007f29
 8007f54:	08007f29 	.word	0x08007f29
 8007f58:	08007fad 	.word	0x08007fad
 8007f5c:	08007f29 	.word	0x08007f29
 8007f60:	08007f29 	.word	0x08007f29
 8007f64:	08007f29 	.word	0x08007f29
 8007f68:	08007f29 	.word	0x08007f29
 8007f6c:	080080bb 	.word	0x080080bb
 8007f70:	08007fdd 	.word	0x08007fdd
 8007f74:	0800809d 	.word	0x0800809d
 8007f78:	08007f29 	.word	0x08007f29
 8007f7c:	08007f29 	.word	0x08007f29
 8007f80:	080080dd 	.word	0x080080dd
 8007f84:	08007f29 	.word	0x08007f29
 8007f88:	08007fdd 	.word	0x08007fdd
 8007f8c:	08007f29 	.word	0x08007f29
 8007f90:	08007f29 	.word	0x08007f29
 8007f94:	080080a5 	.word	0x080080a5
 8007f98:	680b      	ldr	r3, [r1, #0]
 8007f9a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f9e:	1d1a      	adds	r2, r3, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	600a      	str	r2, [r1, #0]
 8007fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e0a4      	b.n	80080f6 <_printf_i+0x1f6>
 8007fac:	6825      	ldr	r5, [r4, #0]
 8007fae:	6808      	ldr	r0, [r1, #0]
 8007fb0:	062e      	lsls	r6, r5, #24
 8007fb2:	f100 0304 	add.w	r3, r0, #4
 8007fb6:	d50a      	bpl.n	8007fce <_printf_i+0xce>
 8007fb8:	6805      	ldr	r5, [r0, #0]
 8007fba:	600b      	str	r3, [r1, #0]
 8007fbc:	2d00      	cmp	r5, #0
 8007fbe:	da03      	bge.n	8007fc8 <_printf_i+0xc8>
 8007fc0:	232d      	movs	r3, #45	; 0x2d
 8007fc2:	426d      	negs	r5, r5
 8007fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc8:	230a      	movs	r3, #10
 8007fca:	485e      	ldr	r0, [pc, #376]	; (8008144 <_printf_i+0x244>)
 8007fcc:	e019      	b.n	8008002 <_printf_i+0x102>
 8007fce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007fd2:	6805      	ldr	r5, [r0, #0]
 8007fd4:	600b      	str	r3, [r1, #0]
 8007fd6:	bf18      	it	ne
 8007fd8:	b22d      	sxthne	r5, r5
 8007fda:	e7ef      	b.n	8007fbc <_printf_i+0xbc>
 8007fdc:	680b      	ldr	r3, [r1, #0]
 8007fde:	6825      	ldr	r5, [r4, #0]
 8007fe0:	1d18      	adds	r0, r3, #4
 8007fe2:	6008      	str	r0, [r1, #0]
 8007fe4:	0628      	lsls	r0, r5, #24
 8007fe6:	d501      	bpl.n	8007fec <_printf_i+0xec>
 8007fe8:	681d      	ldr	r5, [r3, #0]
 8007fea:	e002      	b.n	8007ff2 <_printf_i+0xf2>
 8007fec:	0669      	lsls	r1, r5, #25
 8007fee:	d5fb      	bpl.n	8007fe8 <_printf_i+0xe8>
 8007ff0:	881d      	ldrh	r5, [r3, #0]
 8007ff2:	2f6f      	cmp	r7, #111	; 0x6f
 8007ff4:	bf0c      	ite	eq
 8007ff6:	2308      	moveq	r3, #8
 8007ff8:	230a      	movne	r3, #10
 8007ffa:	4852      	ldr	r0, [pc, #328]	; (8008144 <_printf_i+0x244>)
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008002:	6866      	ldr	r6, [r4, #4]
 8008004:	2e00      	cmp	r6, #0
 8008006:	bfa8      	it	ge
 8008008:	6821      	ldrge	r1, [r4, #0]
 800800a:	60a6      	str	r6, [r4, #8]
 800800c:	bfa4      	itt	ge
 800800e:	f021 0104 	bicge.w	r1, r1, #4
 8008012:	6021      	strge	r1, [r4, #0]
 8008014:	b90d      	cbnz	r5, 800801a <_printf_i+0x11a>
 8008016:	2e00      	cmp	r6, #0
 8008018:	d04d      	beq.n	80080b6 <_printf_i+0x1b6>
 800801a:	4616      	mov	r6, r2
 800801c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008020:	fb03 5711 	mls	r7, r3, r1, r5
 8008024:	5dc7      	ldrb	r7, [r0, r7]
 8008026:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800802a:	462f      	mov	r7, r5
 800802c:	42bb      	cmp	r3, r7
 800802e:	460d      	mov	r5, r1
 8008030:	d9f4      	bls.n	800801c <_printf_i+0x11c>
 8008032:	2b08      	cmp	r3, #8
 8008034:	d10b      	bne.n	800804e <_printf_i+0x14e>
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	07df      	lsls	r7, r3, #31
 800803a:	d508      	bpl.n	800804e <_printf_i+0x14e>
 800803c:	6923      	ldr	r3, [r4, #16]
 800803e:	6861      	ldr	r1, [r4, #4]
 8008040:	4299      	cmp	r1, r3
 8008042:	bfde      	ittt	le
 8008044:	2330      	movle	r3, #48	; 0x30
 8008046:	f806 3c01 	strble.w	r3, [r6, #-1]
 800804a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800804e:	1b92      	subs	r2, r2, r6
 8008050:	6122      	str	r2, [r4, #16]
 8008052:	464b      	mov	r3, r9
 8008054:	4621      	mov	r1, r4
 8008056:	4640      	mov	r0, r8
 8008058:	f8cd a000 	str.w	sl, [sp]
 800805c:	aa03      	add	r2, sp, #12
 800805e:	f7ff fedf 	bl	8007e20 <_printf_common>
 8008062:	3001      	adds	r0, #1
 8008064:	d14c      	bne.n	8008100 <_printf_i+0x200>
 8008066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800806a:	b004      	add	sp, #16
 800806c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008070:	4834      	ldr	r0, [pc, #208]	; (8008144 <_printf_i+0x244>)
 8008072:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008076:	680e      	ldr	r6, [r1, #0]
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	f856 5b04 	ldr.w	r5, [r6], #4
 800807e:	061f      	lsls	r7, r3, #24
 8008080:	600e      	str	r6, [r1, #0]
 8008082:	d514      	bpl.n	80080ae <_printf_i+0x1ae>
 8008084:	07d9      	lsls	r1, r3, #31
 8008086:	bf44      	itt	mi
 8008088:	f043 0320 	orrmi.w	r3, r3, #32
 800808c:	6023      	strmi	r3, [r4, #0]
 800808e:	b91d      	cbnz	r5, 8008098 <_printf_i+0x198>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	f023 0320 	bic.w	r3, r3, #32
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	2310      	movs	r3, #16
 800809a:	e7af      	b.n	8007ffc <_printf_i+0xfc>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	f043 0320 	orr.w	r3, r3, #32
 80080a2:	6023      	str	r3, [r4, #0]
 80080a4:	2378      	movs	r3, #120	; 0x78
 80080a6:	4828      	ldr	r0, [pc, #160]	; (8008148 <_printf_i+0x248>)
 80080a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080ac:	e7e3      	b.n	8008076 <_printf_i+0x176>
 80080ae:	065e      	lsls	r6, r3, #25
 80080b0:	bf48      	it	mi
 80080b2:	b2ad      	uxthmi	r5, r5
 80080b4:	e7e6      	b.n	8008084 <_printf_i+0x184>
 80080b6:	4616      	mov	r6, r2
 80080b8:	e7bb      	b.n	8008032 <_printf_i+0x132>
 80080ba:	680b      	ldr	r3, [r1, #0]
 80080bc:	6826      	ldr	r6, [r4, #0]
 80080be:	1d1d      	adds	r5, r3, #4
 80080c0:	6960      	ldr	r0, [r4, #20]
 80080c2:	600d      	str	r5, [r1, #0]
 80080c4:	0635      	lsls	r5, r6, #24
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	d501      	bpl.n	80080ce <_printf_i+0x1ce>
 80080ca:	6018      	str	r0, [r3, #0]
 80080cc:	e002      	b.n	80080d4 <_printf_i+0x1d4>
 80080ce:	0671      	lsls	r1, r6, #25
 80080d0:	d5fb      	bpl.n	80080ca <_printf_i+0x1ca>
 80080d2:	8018      	strh	r0, [r3, #0]
 80080d4:	2300      	movs	r3, #0
 80080d6:	4616      	mov	r6, r2
 80080d8:	6123      	str	r3, [r4, #16]
 80080da:	e7ba      	b.n	8008052 <_printf_i+0x152>
 80080dc:	680b      	ldr	r3, [r1, #0]
 80080de:	1d1a      	adds	r2, r3, #4
 80080e0:	600a      	str	r2, [r1, #0]
 80080e2:	681e      	ldr	r6, [r3, #0]
 80080e4:	2100      	movs	r1, #0
 80080e6:	4630      	mov	r0, r6
 80080e8:	6862      	ldr	r2, [r4, #4]
 80080ea:	f000 f82f 	bl	800814c <memchr>
 80080ee:	b108      	cbz	r0, 80080f4 <_printf_i+0x1f4>
 80080f0:	1b80      	subs	r0, r0, r6
 80080f2:	6060      	str	r0, [r4, #4]
 80080f4:	6863      	ldr	r3, [r4, #4]
 80080f6:	6123      	str	r3, [r4, #16]
 80080f8:	2300      	movs	r3, #0
 80080fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080fe:	e7a8      	b.n	8008052 <_printf_i+0x152>
 8008100:	4632      	mov	r2, r6
 8008102:	4649      	mov	r1, r9
 8008104:	4640      	mov	r0, r8
 8008106:	6923      	ldr	r3, [r4, #16]
 8008108:	47d0      	blx	sl
 800810a:	3001      	adds	r0, #1
 800810c:	d0ab      	beq.n	8008066 <_printf_i+0x166>
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	079b      	lsls	r3, r3, #30
 8008112:	d413      	bmi.n	800813c <_printf_i+0x23c>
 8008114:	68e0      	ldr	r0, [r4, #12]
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	4298      	cmp	r0, r3
 800811a:	bfb8      	it	lt
 800811c:	4618      	movlt	r0, r3
 800811e:	e7a4      	b.n	800806a <_printf_i+0x16a>
 8008120:	2301      	movs	r3, #1
 8008122:	4632      	mov	r2, r6
 8008124:	4649      	mov	r1, r9
 8008126:	4640      	mov	r0, r8
 8008128:	47d0      	blx	sl
 800812a:	3001      	adds	r0, #1
 800812c:	d09b      	beq.n	8008066 <_printf_i+0x166>
 800812e:	3501      	adds	r5, #1
 8008130:	68e3      	ldr	r3, [r4, #12]
 8008132:	9903      	ldr	r1, [sp, #12]
 8008134:	1a5b      	subs	r3, r3, r1
 8008136:	42ab      	cmp	r3, r5
 8008138:	dcf2      	bgt.n	8008120 <_printf_i+0x220>
 800813a:	e7eb      	b.n	8008114 <_printf_i+0x214>
 800813c:	2500      	movs	r5, #0
 800813e:	f104 0619 	add.w	r6, r4, #25
 8008142:	e7f5      	b.n	8008130 <_printf_i+0x230>
 8008144:	08008366 	.word	0x08008366
 8008148:	08008377 	.word	0x08008377

0800814c <memchr>:
 800814c:	4603      	mov	r3, r0
 800814e:	b510      	push	{r4, lr}
 8008150:	b2c9      	uxtb	r1, r1
 8008152:	4402      	add	r2, r0
 8008154:	4293      	cmp	r3, r2
 8008156:	4618      	mov	r0, r3
 8008158:	d101      	bne.n	800815e <memchr+0x12>
 800815a:	2000      	movs	r0, #0
 800815c:	e003      	b.n	8008166 <memchr+0x1a>
 800815e:	7804      	ldrb	r4, [r0, #0]
 8008160:	3301      	adds	r3, #1
 8008162:	428c      	cmp	r4, r1
 8008164:	d1f6      	bne.n	8008154 <memchr+0x8>
 8008166:	bd10      	pop	{r4, pc}

08008168 <memmove>:
 8008168:	4288      	cmp	r0, r1
 800816a:	b510      	push	{r4, lr}
 800816c:	eb01 0402 	add.w	r4, r1, r2
 8008170:	d902      	bls.n	8008178 <memmove+0x10>
 8008172:	4284      	cmp	r4, r0
 8008174:	4623      	mov	r3, r4
 8008176:	d807      	bhi.n	8008188 <memmove+0x20>
 8008178:	1e43      	subs	r3, r0, #1
 800817a:	42a1      	cmp	r1, r4
 800817c:	d008      	beq.n	8008190 <memmove+0x28>
 800817e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008182:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008186:	e7f8      	b.n	800817a <memmove+0x12>
 8008188:	4601      	mov	r1, r0
 800818a:	4402      	add	r2, r0
 800818c:	428a      	cmp	r2, r1
 800818e:	d100      	bne.n	8008192 <memmove+0x2a>
 8008190:	bd10      	pop	{r4, pc}
 8008192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800819a:	e7f7      	b.n	800818c <memmove+0x24>

0800819c <_realloc_r>:
 800819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819e:	4607      	mov	r7, r0
 80081a0:	4614      	mov	r4, r2
 80081a2:	460e      	mov	r6, r1
 80081a4:	b921      	cbnz	r1, 80081b0 <_realloc_r+0x14>
 80081a6:	4611      	mov	r1, r2
 80081a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80081ac:	f7ff bb0a 	b.w	80077c4 <_malloc_r>
 80081b0:	b922      	cbnz	r2, 80081bc <_realloc_r+0x20>
 80081b2:	f7ff fabb 	bl	800772c <_free_r>
 80081b6:	4625      	mov	r5, r4
 80081b8:	4628      	mov	r0, r5
 80081ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081bc:	f000 f814 	bl	80081e8 <_malloc_usable_size_r>
 80081c0:	42a0      	cmp	r0, r4
 80081c2:	d20f      	bcs.n	80081e4 <_realloc_r+0x48>
 80081c4:	4621      	mov	r1, r4
 80081c6:	4638      	mov	r0, r7
 80081c8:	f7ff fafc 	bl	80077c4 <_malloc_r>
 80081cc:	4605      	mov	r5, r0
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d0f2      	beq.n	80081b8 <_realloc_r+0x1c>
 80081d2:	4631      	mov	r1, r6
 80081d4:	4622      	mov	r2, r4
 80081d6:	f7ff fa93 	bl	8007700 <memcpy>
 80081da:	4631      	mov	r1, r6
 80081dc:	4638      	mov	r0, r7
 80081de:	f7ff faa5 	bl	800772c <_free_r>
 80081e2:	e7e9      	b.n	80081b8 <_realloc_r+0x1c>
 80081e4:	4635      	mov	r5, r6
 80081e6:	e7e7      	b.n	80081b8 <_realloc_r+0x1c>

080081e8 <_malloc_usable_size_r>:
 80081e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ec:	1f18      	subs	r0, r3, #4
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	bfbc      	itt	lt
 80081f2:	580b      	ldrlt	r3, [r1, r0]
 80081f4:	18c0      	addlt	r0, r0, r3
 80081f6:	4770      	bx	lr

080081f8 <_init>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	bf00      	nop
 80081fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fe:	bc08      	pop	{r3}
 8008200:	469e      	mov	lr, r3
 8008202:	4770      	bx	lr

08008204 <_fini>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	bf00      	nop
 8008208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820a:	bc08      	pop	{r3}
 800820c:	469e      	mov	lr, r3
 800820e:	4770      	bx	lr
