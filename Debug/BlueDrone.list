
BlueDrone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ced8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800cfe8  0800cfe8  0001cfe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d894  0800d894  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d894  0800d894  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d894  0800d894  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d894  0800d894  0001d894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d89c  0800d89c  0001d89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d8a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200001f0  0800da90  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  0800da90  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016db1  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003350  00000000  00000000  00036fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  0003a320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003b598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9c1  00000000  00000000  0003c720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143c4  00000000  00000000  000590e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097473  00000000  00000000  0006d4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006940  00000000  00000000  0010496c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cfd0 	.word	0x0800cfd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800cfd0 	.word	0x0800cfd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2lz>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	460c      	mov	r4, r1
 80011cc:	4605      	mov	r5, r0
 80011ce:	4621      	mov	r1, r4
 80011d0:	4628      	mov	r0, r5
 80011d2:	2200      	movs	r2, #0
 80011d4:	2300      	movs	r3, #0
 80011d6:	f7ff fbf1 	bl	80009bc <__aeabi_dcmplt>
 80011da:	b928      	cbnz	r0, 80011e8 <__aeabi_d2lz+0x20>
 80011dc:	4628      	mov	r0, r5
 80011de:	4621      	mov	r1, r4
 80011e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e4:	f000 b80a 	b.w	80011fc <__aeabi_d2ulz>
 80011e8:	4628      	mov	r0, r5
 80011ea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011ee:	f000 f805 	bl	80011fc <__aeabi_d2ulz>
 80011f2:	4240      	negs	r0, r0
 80011f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f8:	bd38      	pop	{r3, r4, r5, pc}
 80011fa:	bf00      	nop

080011fc <__aeabi_d2ulz>:
 80011fc:	b5d0      	push	{r4, r6, r7, lr}
 80011fe:	2200      	movs	r2, #0
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <__aeabi_d2ulz+0x34>)
 8001202:	4606      	mov	r6, r0
 8001204:	460f      	mov	r7, r1
 8001206:	f7ff f967 	bl	80004d8 <__aeabi_dmul>
 800120a:	f7ff fc3d 	bl	8000a88 <__aeabi_d2uiz>
 800120e:	4604      	mov	r4, r0
 8001210:	f7ff f8e8 	bl	80003e4 <__aeabi_ui2d>
 8001214:	2200      	movs	r2, #0
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <__aeabi_d2ulz+0x38>)
 8001218:	f7ff f95e 	bl	80004d8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4630      	mov	r0, r6
 8001222:	4639      	mov	r1, r7
 8001224:	f7fe ffa0 	bl	8000168 <__aeabi_dsub>
 8001228:	f7ff fc2e 	bl	8000a88 <__aeabi_d2uiz>
 800122c:	4621      	mov	r1, r4
 800122e:	bdd0      	pop	{r4, r6, r7, pc}
 8001230:	3df00000 	.word	0x3df00000
 8001234:	41f00000 	.word	0x41f00000

08001238 <_ZN7CommandC1Ev>:
#include <string.h>
#include "Command.h"
#include "Parameter.h"

Command::Command(){}
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	63da      	str	r2, [r3, #60]	; 0x3c
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <_ZN7CommandD1Ev>:

Command::~Command(){
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    for(int i=0; i< params_size ; i++) delete params[i];
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	429a      	cmp	r2, r3
 800126c:	da10      	bge.n	8001290 <_ZN7CommandD1Ev+0x38>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001276:	2c00      	cmp	r4, #0
 8001278:	d006      	beq.n	8001288 <_ZN7CommandD1Ev+0x30>
 800127a:	4620      	mov	r0, r4
 800127c:	f000 f885 	bl	800138a <_ZN9ParameterD1Ev>
 8001280:	2108      	movs	r1, #8
 8001282:	4620      	mov	r0, r4
 8001284:	f006 fa08 	bl	8007698 <_ZdlPvj>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	e7e9      	b.n	8001264 <_ZN7CommandD1Ev+0xc>
    delete[] name;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <_ZN7CommandD1Ev+0x4a>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129c:	4618      	mov	r0, r3
 800129e:	f006 f9fd 	bl	800769c <_ZdaPv>
}
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}

080012ac <_ZN7Command14setCommandNameEPch>:
// Command& Command::operator=(const Command &){
//     return *this;
// }


void Command::setCommandName(char* command_name, uint8_t size){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	4613      	mov	r3, r2
 80012b8:	71fb      	strb	r3, [r7, #7]
    this->name = new char[size];
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f006 fa0f 	bl	80076e0 <_Znaj>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	63da      	str	r2, [r3, #60]	; 0x3c
    memcpy(this->name, command_name, size);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f007 fa10 	bl	80086f8 <memcpy>
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZN7Command13getNameAsCharEv>:
const char* Command::getCommandName(){
    return name;
}

char Command::getNameAsChar()
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    return *name;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ec:	781b      	ldrb	r3, [r3, #0]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <_ZN7Command8addParamEP9Parameter>:

void Command::addParam(Parameter* param){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
    params[params_size] = param;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6839      	ldr	r1, [r7, #0]
 800130a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    params_size++;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <_ZN7Command8getParamEh>:


Parameter* Command::getParam(uint8_t index){
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	70fb      	strb	r3, [r7, #3]
    return (index < params_size)? params[index] : nullptr;
 800132e:	78fa      	ldrb	r2, [r7, #3]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	429a      	cmp	r2, r3
 8001336:	da04      	bge.n	8001342 <_ZN7Command8getParamEh+0x20>
 8001338:	78fa      	ldrb	r2, [r7, #3]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	e000      	b.n	8001344 <_ZN7Command8getParamEh+0x22>
 8001342:	2300      	movs	r3, #0
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <_ZN9ParameterC1EPch>:
#include"Parameter.h"
#include<string.h>
#include<stdlib.h>


Parameter::Parameter(char* bytes, uint8_t size){
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	4613      	mov	r3, r2
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]

    //allocate the right amount of memory for parameter data
    data = new char[size];
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f006 f9bb 	bl	80076e0 <_Znaj>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	601a      	str	r2, [r3, #0]
    //copy by block (fastest way possible)
    memcpy(data,bytes, size);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	79fa      	ldrb	r2, [r7, #7]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	4618      	mov	r0, r3
 800137c:	f007 f9bc 	bl	80086f8 <memcpy>
    //set data type (needed later for correction)
}
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <_ZN9ParameterD1Ev>:

Parameter::~Parameter(){
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
    delete[] data;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <_ZN9ParameterD1Ev+0x1a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f006 f97c 	bl	800769c <_ZdaPv>
}
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_ZN9Parameter11getIntValueEv>:
char Parameter::getCharValue()
{
    return *(data);
}

int Parameter::getIntValue(){
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
    char* c = data;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	60fb      	str	r3, [r7, #12]
    return atoi(c);
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f007 f95c 	bl	800867a <atoi>
 80013c2:	4603      	mov	r3, r0
    // int val = 0;
    // while( *c != '\0') {
    //     val = val*10 + (*c++ -'0');
    // }
    // return val;
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_ZN11ProtoHelperC1Ev>:


//========================== Functions implementation ==============================


ProtoHelper::ProtoHelper(){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	721a      	strb	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <_ZN11ProtoHelperD1Ev>:

ProtoHelper::~ProtoHelper(){
 80013e6:	b590      	push	{r4, r7, lr}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
    delete current_command;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68dc      	ldr	r4, [r3, #12]
 80013f2:	2c00      	cmp	r4, #0
 80013f4:	d006      	beq.n	8001404 <_ZN11ProtoHelperD1Ev+0x1e>
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff ff2e 	bl	8001258 <_ZN7CommandD1Ev>
 80013fc:	2144      	movs	r1, #68	; 0x44
 80013fe:	4620      	mov	r0, r4
 8001400:	f006 f94a 	bl	8007698 <_ZdlPvj>
}
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bd90      	pop	{r4, r7, pc}
	...

08001410 <__tcf_0>:


ProtoHelper& ProtoHelper::getInstance() {
    static ProtoHelper instance_;
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
 8001414:	4801      	ldr	r0, [pc, #4]	; (800141c <__tcf_0+0xc>)
 8001416:	f7ff ffe6 	bl	80013e6 <_ZN11ProtoHelperD1Ev>
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000020c 	.word	0x2000020c

08001420 <_ZN11ProtoHelper11getInstanceEv>:
ProtoHelper& ProtoHelper::getInstance() {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
    static ProtoHelper instance_;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <_ZN11ProtoHelper11getInstanceEv+0x50>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f3bf 8f5b 	dmb	ish
 800142c:	b2db      	uxtb	r3, r3
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <_ZN11ProtoHelper11getInstanceEv+0x48>
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <_ZN11ProtoHelper11getInstanceEv+0x50>)
 8001442:	f006 f92d 	bl	80076a0 <__cxa_guard_acquire>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf14      	ite	ne
 800144c:	2301      	movne	r3, #1
 800144e:	2300      	moveq	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d008      	beq.n	8001468 <_ZN11ProtoHelper11getInstanceEv+0x48>
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <_ZN11ProtoHelper11getInstanceEv+0x54>)
 8001458:	f7ff ffb8 	bl	80013cc <_ZN11ProtoHelperC1Ev>
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <_ZN11ProtoHelper11getInstanceEv+0x50>)
 800145e:	f006 f92b 	bl	80076b8 <__cxa_guard_release>
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <_ZN11ProtoHelper11getInstanceEv+0x58>)
 8001464:	f007 f903 	bl	800866e <atexit>
    return instance_;
 8001468:	4b02      	ldr	r3, [pc, #8]	; (8001474 <_ZN11ProtoHelper11getInstanceEv+0x54>)
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000021c 	.word	0x2000021c
 8001474:	2000020c 	.word	0x2000020c
 8001478:	08001411 	.word	0x08001411

0800147c <_ZN11ProtoHelper28setOnCommandRecievedCallabckEPFvP7CommandE>:

void ProtoHelper::setOnCommandRecievedCallabck(void (*callback)(Command* cmnd)){
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
    this->callback = callback;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
	...

08001498 <_ZN11ProtoHelper8loadByteEc>:


    //here we parse the command
void ProtoHelper::loadByte(char byte){
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	70fb      	strb	r3, [r7, #3]

    static char     str_buff[27]; //buffer for the current parameter or cmnd name 
    static uint8_t  index = 0; //index for current buffer chararchter

    switch (current_state) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7a1b      	ldrb	r3, [r3, #8]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d078      	beq.n	800159e <_ZN11ProtoHelper8loadByteEc+0x106>
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	f300 80cd 	bgt.w	800164c <_ZN11ProtoHelper8loadByteEc+0x1b4>
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <_ZN11ProtoHelper8loadByteEc+0x24>
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d012      	beq.n	80014e0 <_ZN11ProtoHelper8loadByteEc+0x48>
        str_buff[index] = (char)byte;
        index++;
        break;
    }

}
 80014ba:	e0c7      	b.n	800164c <_ZN11ProtoHelper8loadByteEc+0x1b4>
        if(byte == '>') {
 80014bc:	78fb      	ldrb	r3, [r7, #3]
 80014be:	2b3e      	cmp	r3, #62	; 0x3e
 80014c0:	f040 80bd 	bne.w	800163e <_ZN11ProtoHelper8loadByteEc+0x1a6>
            current_command = new Command(); 
 80014c4:	2044      	movs	r0, #68	; 0x44
 80014c6:	f006 f8fa 	bl	80076be <_Znwj>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461c      	mov	r4, r3
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7ff feb2 	bl	8001238 <_ZN7CommandC1Ev>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60dc      	str	r4, [r3, #12]
            current_state = OPCODE_CONCAT;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	721a      	strb	r2, [r3, #8]
        break;
 80014de:	e0ae      	b.n	800163e <_ZN11ProtoHelper8loadByteEc+0x1a6>
        if(index >= 27) break;
 80014e0:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b1a      	cmp	r3, #26
 80014e6:	f200 80ac 	bhi.w	8001642 <_ZN11ProtoHelper8loadByteEc+0x1aa>
            if(byte == '<')
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	2b3c      	cmp	r3, #60	; 0x3c
 80014ee:	d12b      	bne.n	8001548 <_ZN11ProtoHelper8loadByteEc+0xb0>
            str_buff[index] = '\0'; // don't forget to terminate the string !
 80014f0:	4b58      	ldr	r3, [pc, #352]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b58      	ldr	r3, [pc, #352]	; (8001658 <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 80014f8:	2100      	movs	r1, #0
 80014fa:	5499      	strb	r1, [r3, r2]
            index++;
 80014fc:	4b55      	ldr	r3, [pc, #340]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b53      	ldr	r3, [pc, #332]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001506:	701a      	strb	r2, [r3, #0]
            current_command->setCommandName(str_buff, index);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4a51      	ldr	r2, [pc, #324]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 800150e:	7812      	ldrb	r2, [r2, #0]
 8001510:	4951      	ldr	r1, [pc, #324]	; (8001658 <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff feca 	bl	80012ac <_ZN7Command14setCommandNameEPch>
            current_state = BEGIN;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	721a      	strb	r2, [r3, #8]
            callback(current_command);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68d2      	ldr	r2, [r2, #12]
 8001526:	4610      	mov	r0, r2
 8001528:	4798      	blx	r3
            delete current_command;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68dc      	ldr	r4, [r3, #12]
 800152e:	2c00      	cmp	r4, #0
 8001530:	d006      	beq.n	8001540 <_ZN11ProtoHelper8loadByteEc+0xa8>
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff fe90 	bl	8001258 <_ZN7CommandD1Ev>
 8001538:	2144      	movs	r1, #68	; 0x44
 800153a:	4620      	mov	r0, r4
 800153c:	f006 f8ac 	bl	8007698 <_ZdlPvj>
            index = 0;
 8001540:	4b44      	ldr	r3, [pc, #272]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
            break;
 8001546:	e081      	b.n	800164c <_ZN11ProtoHelper8loadByteEc+0x1b4>
        if(byte == ','){
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	2b2c      	cmp	r3, #44	; 0x2c
 800154c:	d11a      	bne.n	8001584 <_ZN11ProtoHelper8loadByteEc+0xec>
            str_buff[index] = '\0'; // don't forget to terminate the string !
 800154e:	4b41      	ldr	r3, [pc, #260]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 8001556:	2100      	movs	r1, #0
 8001558:	5499      	strb	r1, [r3, r2]
            index++;
 800155a:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001564:	701a      	strb	r2, [r3, #0]
            current_command->setCommandName(str_buff, index);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	4a3a      	ldr	r2, [pc, #232]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	493a      	ldr	r1, [pc, #232]	; (8001658 <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe9b 	bl	80012ac <_ZN7Command14setCommandNameEPch>
            current_state = PARAM_CONCAT;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	721a      	strb	r2, [r3, #8]
            index = 0;
 800157c:	4b35      	ldr	r3, [pc, #212]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
            break;
 8001582:	e063      	b.n	800164c <_ZN11ProtoHelper8loadByteEc+0x1b4>
        str_buff[index] = byte;
 8001584:	4b33      	ldr	r3, [pc, #204]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	4a33      	ldr	r2, [pc, #204]	; (8001658 <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	5453      	strb	r3, [r2, r1]
        index++;
 8001590:	4b30      	ldr	r3, [pc, #192]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 800159a:	701a      	strb	r2, [r3, #0]
        break;
 800159c:	e056      	b.n	800164c <_ZN11ProtoHelper8loadByteEc+0x1b4>
        if(index >= 27) break;
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b1a      	cmp	r3, #26
 80015a4:	d84f      	bhi.n	8001646 <_ZN11ProtoHelper8loadByteEc+0x1ae>
        if(byte == ',' || byte == '<')
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	2b2c      	cmp	r3, #44	; 0x2c
 80015aa:	d002      	beq.n	80015b2 <_ZN11ProtoHelper8loadByteEc+0x11a>
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	2b3c      	cmp	r3, #60	; 0x3c
 80015b0:	d138      	bne.n	8001624 <_ZN11ProtoHelper8loadByteEc+0x18c>
            str_buff[index] = '\0'; // don't forget to terminate the string !
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 80015ba:	2100      	movs	r1, #0
 80015bc:	5499      	strb	r1, [r3, r2]
            index++;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80015c8:	701a      	strb	r2, [r3, #0]
            current_command->addParam(new Parameter(str_buff,index));//index represents nbrBytes || size
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68dc      	ldr	r4, [r3, #12]
 80015ce:	2008      	movs	r0, #8
 80015d0:	f006 f875 	bl	80076be <_Znwj>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461d      	mov	r5, r3
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	491e      	ldr	r1, [pc, #120]	; (8001658 <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 80015e0:	4628      	mov	r0, r5
 80015e2:	f7ff feb4 	bl	800134e <_ZN9ParameterC1EPch>
 80015e6:	4629      	mov	r1, r5
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff fe85 	bl	80012f8 <_ZN7Command8addParamEP9Parameter>
            index = 0;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
            if(byte == '<')
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	2b3c      	cmp	r3, #60	; 0x3c
 80015f8:	d127      	bne.n	800164a <_ZN11ProtoHelper8loadByteEc+0x1b2>
                current_state = BEGIN;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	721a      	strb	r2, [r3, #8]
                callback(current_command);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	68d2      	ldr	r2, [r2, #12]
 8001608:	4610      	mov	r0, r2
 800160a:	4798      	blx	r3
                delete current_command;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68dc      	ldr	r4, [r3, #12]
 8001610:	2c00      	cmp	r4, #0
 8001612:	d01a      	beq.n	800164a <_ZN11ProtoHelper8loadByteEc+0x1b2>
 8001614:	4620      	mov	r0, r4
 8001616:	f7ff fe1f 	bl	8001258 <_ZN7CommandD1Ev>
 800161a:	2144      	movs	r1, #68	; 0x44
 800161c:	4620      	mov	r0, r4
 800161e:	f006 f83b 	bl	8007698 <_ZdlPvj>
            break;
 8001622:	e012      	b.n	800164a <_ZN11ProtoHelper8loadByteEc+0x1b2>
        str_buff[index] = (char)byte;
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <_ZN11ProtoHelper8loadByteEc+0x1c0>)
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	5453      	strb	r3, [r2, r1]
        index++;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <_ZN11ProtoHelper8loadByteEc+0x1bc>)
 800163a:	701a      	strb	r2, [r3, #0]
        break;
 800163c:	e006      	b.n	800164c <_ZN11ProtoHelper8loadByteEc+0x1b4>
        break;
 800163e:	bf00      	nop
 8001640:	e004      	b.n	800164c <_ZN11ProtoHelper8loadByteEc+0x1b4>
        if(index >= 27) break;
 8001642:	bf00      	nop
 8001644:	e002      	b.n	800164c <_ZN11ProtoHelper8loadByteEc+0x1b4>
        if(index >= 27) break;
 8001646:	bf00      	nop
 8001648:	e000      	b.n	800164c <_ZN11ProtoHelper8loadByteEc+0x1b4>
            break;
 800164a:	bf00      	nop
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bdb0      	pop	{r4, r5, r7, pc}
 8001654:	2000023b 	.word	0x2000023b
 8001658:	20000220 	.word	0x20000220

0800165c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f006 f871 	bl	8007764 <asinf>
 8001682:	4603      	mov	r3, r0
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f006 f82f 	bl	80076f8 <sinf>
 800169a:	4603      	mov	r3, r0
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f006 f87f 	bl	80077b0 <sqrtf>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_ZL16handle_i2c_errorv>:
};



float ahh = 0;
static void handle_i2c_error(){
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
    // TODO: add LED notifs for I2C error
//	while(1);
	ahh = -7.7777;
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <_ZL16handle_i2c_errorv+0x14>)
 80016c2:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <_ZL16handle_i2c_errorv+0x18>)
 80016c4:	601a      	str	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	2000023c 	.word	0x2000023c
 80016d4:	c0f8e2eb 	.word	0xc0f8e2eb

080016d8 <_ZN6I2CIMUC1Ev>:

I2CIMU::I2CIMU(){
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3380      	adds	r3, #128	; 0x80
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3390      	adds	r3, #144	; 0x90
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
 8001714:	615a      	str	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	33a8      	adds	r3, #168	; 0xa8
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	33b4      	adds	r3, #180	; 0xb4
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

}
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
	...

08001744 <_ZN6I2CIMU11getInstanceEv>:

I2CIMU& I2CIMU::getInstance(){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
    static I2CIMU instance;
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <_ZN6I2CIMU11getInstanceEv+0x48>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	f3bf 8f5b 	dmb	ish
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf0c      	ite	eq
 800175a:	2301      	moveq	r3, #1
 800175c:	2300      	movne	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d010      	beq.n	8001786 <_ZN6I2CIMU11getInstanceEv+0x42>
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <_ZN6I2CIMU11getInstanceEv+0x48>)
 8001766:	f005 ff9b 	bl	80076a0 <__cxa_guard_acquire>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <_ZN6I2CIMU11getInstanceEv+0x42>
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <_ZN6I2CIMU11getInstanceEv+0x4c>)
 800177c:	f7ff ffac 	bl	80016d8 <_ZN6I2CIMUC1Ev>
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <_ZN6I2CIMU11getInstanceEv+0x48>)
 8001782:	f005 ff99 	bl	80076b8 <__cxa_guard_release>
    return instance;
 8001786:	4b02      	ldr	r3, [pc, #8]	; (8001790 <_ZN6I2CIMU11getInstanceEv+0x4c>)
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000310 	.word	0x20000310
 8001790:	20000240 	.word	0x20000240
 8001794:	00000000 	.word	0x00000000

08001798 <_ZN6I2CIMU4initEf>:

void I2CIMU::init(float controller_freq){
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af04      	add	r7, sp, #16
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
    
    //init gyro scale
    gyro_scale  = 1.0f/(controller_freq *  GYRO_SCALE);
 80017a2:	4951      	ldr	r1, [pc, #324]	; (80018e8 <_ZN6I2CIMU4initEf+0x150>)
 80017a4:	6838      	ldr	r0, [r7, #0]
 80017a6:	f7ff faed 	bl	8000d84 <__aeabi_fmul>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4619      	mov	r1, r3
 80017ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80017b2:	f7ff fb9b 	bl	8000eec <__aeabi_fdiv>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	669a      	str	r2, [r3, #104]	; 0x68
    gyro_scale_pi  = gyro_scale * M_PI / 180.0f; // scale gyro val, mult by dt and convert to radians
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fe30 	bl	8000428 <__aeabi_f2d>
 80017c8:	a345      	add	r3, pc, #276	; (adr r3, 80018e0 <_ZN6I2CIMU4initEf+0x148>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe fe83 	bl	80004d8 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b43      	ldr	r3, [pc, #268]	; (80018ec <_ZN6I2CIMU4initEf+0x154>)
 80017e0:	f7fe ffa4 	bl	800072c <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f96c 	bl	8000ac8 <__aeabi_d2f>
 80017f0:	4602      	mov	r2, r0
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	66da      	str	r2, [r3, #108]	; 0x6c

    // init I2C1 peripheral
    hi2c1.Instance = I2C1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a3d      	ldr	r2, [pc, #244]	; (80018f0 <_ZN6I2CIMU4initEf+0x158>)
 80017fa:	615a      	str	r2, [r3, #20]
    hi2c1.Init.ClockSpeed = 400000;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a3d      	ldr	r2, [pc, #244]	; (80018f4 <_ZN6I2CIMU4initEf+0x15c>)
 8001800:	619a      	str	r2, [r3, #24]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
    hi2c1.Init.OwnAddress1 = 0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c1.Init.OwnAddress2 = 0;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
//    HAL_I2C_Init(&hi2c1);
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) handle_i2c_error();
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3314      	adds	r3, #20
 8001832:	4618      	mov	r0, r3
 8001834:	f003 f81c 	bl	8004870 <HAL_I2C_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	bf14      	ite	ne
 800183e:	2301      	movne	r3, #1
 8001840:	2300      	moveq	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <_ZN6I2CIMU4initEf+0xb4>
 8001848:	f7ff ff38 	bl	80016bc <_ZL16handle_i2c_errorv>

    // setup the MPU6050 by setting the control registers    
    uint8_t  mpu6050_config   = 0x03;
 800184c:	2303      	movs	r3, #3
 800184e:	73fb      	strb	r3, [r7, #15]
    uint8_t  gyro_config      = 0x08; // 65.5
 8001850:	2308      	movs	r3, #8
 8001852:	73bb      	strb	r3, [r7, #14]
    uint8_t  acc_config       = 0x10; // -+8g
 8001854:	2310      	movs	r3, #16
 8001856:	737b      	strb	r3, [r7, #13]
    uint8_t  power_config     = 0x00; // TODO: maybe turn off the temp sensor with 0x08 config value
 8001858:	2300      	movs	r3, #0
 800185a:	733b      	strb	r3, [r7, #12]
    // configure the power
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, POWER_CONFIG_ADDRESS, 1,&power_config, 1, I2C_TIMOUT);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f103 0014 	add.w	r0, r3, #20
 8001862:	2364      	movs	r3, #100	; 0x64
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	2301      	movs	r3, #1
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	226b      	movs	r2, #107	; 0x6b
 8001874:	21d0      	movs	r1, #208	; 0xd0
 8001876:	f003 f93f 	bl	8004af8 <HAL_I2C_Mem_Write>
	// configure the mpu6050,
    //TODO: try other higher DLPF params for less noise
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, MPU_CONFIG_ADDRRESS, 1, &mpu6050_config, 1, I2C_TIMOUT);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f103 0014 	add.w	r0, r3, #20
 8001880:	2364      	movs	r3, #100	; 0x64
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	2301      	movs	r3, #1
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	f107 030f 	add.w	r3, r7, #15
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2301      	movs	r3, #1
 8001890:	221a      	movs	r2, #26
 8001892:	21d0      	movs	r1, #208	; 0xd0
 8001894:	f003 f930 	bl	8004af8 <HAL_I2C_Mem_Write>
	// configure the gyro, 
    //TODO: experiment/calculate the right full scale range
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, GYRO_CONFIG_ADDRESS, 1, &gyro_config, 1, I2C_TIMOUT);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f103 0014 	add.w	r0, r3, #20
 800189e:	2364      	movs	r3, #100	; 0x64
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	2301      	movs	r3, #1
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	f107 030e 	add.w	r3, r7, #14
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2301      	movs	r3, #1
 80018ae:	221b      	movs	r2, #27
 80018b0:	21d0      	movs	r1, #208	; 0xd0
 80018b2:	f003 f921 	bl	8004af8 <HAL_I2C_Mem_Write>
	// configure the accelerometer 
    // TODO: experiment/calculate the right full scale range
	HAL_I2C_Mem_Write(&hi2c1, MPU_ADDRESS, ACC_CONFIG_ADDRESS, 1, &acc_config, 1, I2C_TIMOUT);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f103 0014 	add.w	r0, r3, #20
 80018bc:	2364      	movs	r3, #100	; 0x64
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	2301      	movs	r3, #1
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	f107 030d 	add.w	r3, r7, #13
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2301      	movs	r3, #1
 80018cc:	221c      	movs	r2, #28
 80018ce:	21d0      	movs	r1, #208	; 0xd0
 80018d0:	f003 f912 	bl	8004af8 <HAL_I2C_Mem_Write>

}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	f3af 8000 	nop.w
 80018e0:	54442d18 	.word	0x54442d18
 80018e4:	400921fb 	.word	0x400921fb
 80018e8:	41200000 	.word	0x41200000
 80018ec:	40668000 	.word	0x40668000
 80018f0:	40005400 	.word	0x40005400
 80018f4:	00061a80 	.word	0x00061a80

080018f8 <_ZN6I2CIMU15calibrateSensorEi>:


void I2CIMU::calibrateSensor(int cal_samples){
 80018f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018fc:	b08c      	sub	sp, #48	; 0x30
 80018fe:	af04      	add	r7, sp, #16
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
    uint8_t gyro_data[6];
	for (uint16_t i = 0; i < cal_samples; i++) {
 8001904:	2300      	movs	r3, #0
 8001906:	83fb      	strh	r3, [r7, #30]
 8001908:	8bfb      	ldrh	r3, [r7, #30]
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	dd54      	ble.n	80019ba <_ZN6I2CIMU15calibrateSensorEi+0xc2>
		ahh = i;
 8001910:	8bfb      	ldrh	r3, [r7, #30]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f9de 	bl	8000cd4 <__aeabi_ui2f>
 8001918:	4603      	mov	r3, r0
 800191a:	4aa8      	ldr	r2, [pc, #672]	; (8001bbc <_ZN6I2CIMU15calibrateSensorEi+0x2c4>)
 800191c:	6013      	str	r3, [r2, #0]
		// read 6 bytes of data starting from GYRO_DATA_START_ADDRESS
		HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, GYRO_DATA_START_ADDRESS, 1, gyro_data, 6, I2C_TIMOUT);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f103 0014 	add.w	r0, r3, #20
 8001924:	2364      	movs	r3, #100	; 0x64
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	2306      	movs	r3, #6
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2301      	movs	r3, #1
 8001934:	2243      	movs	r2, #67	; 0x43
 8001936:	21d0      	movs	r1, #208	; 0xd0
 8001938:	f003 f9d8 	bl	8004cec <HAL_I2C_Mem_Read>
		gyro_axis_cal[0] += (short)(gyro_data[0] << 8 | gyro_data[1]);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8001942:	7d3b      	ldrb	r3, [r7, #20]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21a      	sxth	r2, r3
 8001948:	7d7b      	ldrb	r3, [r7, #21]
 800194a:	b21b      	sxth	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	b21b      	sxth	r3, r3
 8001950:	b21a      	sxth	r2, r3
 8001952:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001956:	eb10 0a02 	adds.w	sl, r0, r2
 800195a:	eb41 0b03 	adc.w	fp, r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	e9c3 ab24 	strd	sl, fp, [r3, #144]	; 0x90
		gyro_axis_cal[1] += (short)(gyro_data[2] << 8 | gyro_data[3]);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 800196a:	7dbb      	ldrb	r3, [r7, #22]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	b21a      	sxth	r2, r3
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	b21b      	sxth	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b21b      	sxth	r3, r3
 8001978:	b21a      	sxth	r2, r3
 800197a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800197e:	eb10 0802 	adds.w	r8, r0, r2
 8001982:	eb41 0903 	adc.w	r9, r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	e9c3 8926 	strd	r8, r9, [r3, #152]	; 0x98
		gyro_axis_cal[2] += (short)(gyro_data[4] << 8 | gyro_data[5]);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8001992:	7e3b      	ldrb	r3, [r7, #24]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21a      	sxth	r2, r3
 8001998:	7e7b      	ldrb	r3, [r7, #25]
 800199a:	b21b      	sxth	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b21b      	sxth	r3, r3
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019a6:	1884      	adds	r4, r0, r2
 80019a8:	eb41 0503 	adc.w	r5, r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	e9c3 4528 	strd	r4, r5, [r3, #160]	; 0xa0
	for (uint16_t i = 0; i < cal_samples; i++) {
 80019b2:	8bfb      	ldrh	r3, [r7, #30]
 80019b4:	3301      	adds	r3, #1
 80019b6:	83fb      	strh	r3, [r7, #30]
 80019b8:	e7a6      	b.n	8001908 <_ZN6I2CIMU15calibrateSensorEi+0x10>
        //TODO: add LEDs notification for calibration
	}
	gyro_axis_cal[0] = (int)((float) gyro_axis_cal[0] / cal_samples);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f9a0 	bl	8000d08 <__aeabi_l2f>
 80019c8:	4604      	mov	r4, r0
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f7ff f986 	bl	8000cdc <__aeabi_i2f>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4619      	mov	r1, r3
 80019d4:	4620      	mov	r0, r4
 80019d6:	f7ff fa89 	bl	8000eec <__aeabi_fdiv>
 80019da:	4603      	mov	r3, r0
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fbad 	bl	800113c <__aeabi_f2iz>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	gyro_axis_cal[1] = (int)((float) gyro_axis_cal[1] / cal_samples);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f7ff f985 	bl	8000d08 <__aeabi_l2f>
 80019fe:	4604      	mov	r4, r0
 8001a00:	6838      	ldr	r0, [r7, #0]
 8001a02:	f7ff f96b 	bl	8000cdc <__aeabi_i2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff fa6e 	bl	8000eec <__aeabi_fdiv>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fb92 	bl	800113c <__aeabi_f2iz>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	gyro_axis_cal[2] = (int)((float) gyro_axis_cal[2] / cal_samples);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff f96a 	bl	8000d08 <__aeabi_l2f>
 8001a34:	4604      	mov	r4, r0
 8001a36:	6838      	ldr	r0, [r7, #0]
 8001a38:	f7ff f950 	bl	8000cdc <__aeabi_i2f>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4620      	mov	r0, r4
 8001a42:	f7ff fa53 	bl	8000eec <__aeabi_fdiv>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fb77 	bl	800113c <__aeabi_f2iz>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0


    uint8_t acc_data[6];
	for (uint16_t i = 0; i < cal_samples; i++) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	83bb      	strh	r3, [r7, #28]
 8001a60:	8bbb      	ldrh	r3, [r7, #28]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dd5e      	ble.n	8001b26 <_ZN6I2CIMU15calibrateSensorEi+0x22e>
		ahh = i;
 8001a68:	8bbb      	ldrh	r3, [r7, #28]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f932 	bl	8000cd4 <__aeabi_ui2f>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a52      	ldr	r2, [pc, #328]	; (8001bbc <_ZN6I2CIMU15calibrateSensorEi+0x2c4>)
 8001a74:	6013      	str	r3, [r2, #0]
		// read 6 bytes of data starting from ACC_DATA_START_ADDRESS
		HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, ACC_DATA_START_ADDRESS, 1, acc_data, 6, I2C_TIMOUT);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f103 0014 	add.w	r0, r3, #20
 8001a7c:	2364      	movs	r3, #100	; 0x64
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	2306      	movs	r3, #6
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	223b      	movs	r2, #59	; 0x3b
 8001a8e:	21d0      	movs	r1, #208	; 0xd0
 8001a90:	f003 f92c 	bl	8004cec <HAL_I2C_Mem_Read>
		acc_axis_cal[0] += (short)(acc_data[0] << 8 | acc_data[1]);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8001a9a:	7b3b      	ldrb	r3, [r7, #12]
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	7b7b      	ldrb	r3, [r7, #13]
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f917 	bl	8000cdc <__aeabi_i2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7ff f85e 	bl	8000b74 <__addsf3>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		acc_axis_cal[1] += (short)(acc_data[2] << 8 | acc_data[3]);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8001ac8:	7bbb      	ldrb	r3, [r7, #14]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b21b      	sxth	r3, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f900 	bl	8000cdc <__aeabi_i2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff f847 	bl	8000b74 <__addsf3>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		acc_axis_cal[2] += (short)(acc_data[4] << 8 | acc_data[5]);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8001af6:	7c3b      	ldrb	r3, [r7, #16]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	7c7b      	ldrb	r3, [r7, #17]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f8e9 	bl	8000cdc <__aeabi_i2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff f830 	bl	8000b74 <__addsf3>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	for (uint16_t i = 0; i < cal_samples; i++) {
 8001b1e:	8bbb      	ldrh	r3, [r7, #28]
 8001b20:	3301      	adds	r3, #1
 8001b22:	83bb      	strh	r3, [r7, #28]
 8001b24:	e79c      	b.n	8001a60 <_ZN6I2CIMU15calibrateSensorEi+0x168>
        //TODO: add LEDs notification for calibration
	}
	acc_axis_cal[0] = (int)((float) acc_axis_cal[0] / cal_samples);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8001b2c:	6838      	ldr	r0, [r7, #0]
 8001b2e:	f7ff f8d5 	bl	8000cdc <__aeabi_i2f>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4619      	mov	r1, r3
 8001b36:	4620      	mov	r0, r4
 8001b38:	f7ff f9d8 	bl	8000eec <__aeabi_fdiv>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fafc 	bl	800113c <__aeabi_f2iz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f8c8 	bl	8000cdc <__aeabi_i2f>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	acc_axis_cal[1] = (int)((float) acc_axis_cal[1] / cal_samples);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8001b5a:	6838      	ldr	r0, [r7, #0]
 8001b5c:	f7ff f8be 	bl	8000cdc <__aeabi_i2f>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4619      	mov	r1, r3
 8001b64:	4620      	mov	r0, r4
 8001b66:	f7ff f9c1 	bl	8000eec <__aeabi_fdiv>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fae5 	bl	800113c <__aeabi_f2iz>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f8b1 	bl	8000cdc <__aeabi_i2f>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	acc_axis_cal[2] = (int)((float) acc_axis_cal[2] / cal_samples);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8001b88:	6838      	ldr	r0, [r7, #0]
 8001b8a:	f7ff f8a7 	bl	8000cdc <__aeabi_i2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4619      	mov	r1, r3
 8001b92:	4620      	mov	r0, r4
 8001b94:	f7ff f9aa 	bl	8000eec <__aeabi_fdiv>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff face 	bl	800113c <__aeabi_f2iz>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f89a 	bl	8000cdc <__aeabi_i2f>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000023c 	.word	0x2000023c

08001bc0 <_ZN6I2CIMU10updateDataEv>:

void I2CIMU::updateData(void){
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af04      	add	r7, sp, #16
 8001bc6:	6078      	str	r0, [r7, #4]

	//read and store acc data, cast values to shorts since they are 16-bit 2's comp values
	HAL_I2C_Mem_Read(&hi2c1, MPU_ADDRESS, ACC_DATA_START_ADDRESS,1, i2c_data, 14, I2C_TIMOUT);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f103 0014 	add.w	r0, r3, #20
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3370      	adds	r3, #112	; 0x70
 8001bd2:	2264      	movs	r2, #100	; 0x64
 8001bd4:	9202      	str	r2, [sp, #8]
 8001bd6:	220e      	movs	r2, #14
 8001bd8:	9201      	str	r2, [sp, #4]
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	223b      	movs	r2, #59	; 0x3b
 8001be0:	21d0      	movs	r1, #208	; 0xd0
 8001be2:	f003 f883 	bl	8004cec <HAL_I2C_Mem_Read>
	acc_axis[0] = (short)(i2c_data[0] << 8 | i2c_data[1]) ; //pitch
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff f86d 	bl	8000cdc <__aeabi_i2f>
 8001c02:	4602      	mov	r2, r0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	acc_axis[1] = (short)(i2c_data[2] << 8 | i2c_data[3]) ; //roll
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f85b 	bl	8000cdc <__aeabi_i2f>
 8001c26:	4602      	mov	r2, r0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	acc_axis[2] = (short)(i2c_data[4] << 8 | i2c_data[5]) ; //yaw
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff f849 	bl	8000cdc <__aeabi_i2f>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

     //acc calibration.
     acc_axis[0] -= acc_axis_cal[0];  //Accelerometer calibration value for pitch.
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f7fe ff85 	bl	8000b70 <__aeabi_fsub>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     acc_axis[1] -= acc_axis_cal[1];   //Accelerometer calibration value for roll.
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f7fe ff76 	bl	8000b70 <__aeabi_fsub>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    

	// ignore temperature data

	//read and store gyro data (NOT-scaled)
 	gyro_axis[0] = (short)(i2c_data[8]  << 8 | i2c_data[9])  ; //pitch
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f819 	bl	8000cdc <__aeabi_i2f>
 8001caa:	4602      	mov	r2, r0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 	gyro_axis[1] = (short)(i2c_data[10] << 8 | i2c_data[11]) ; //roll
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f807 	bl	8000cdc <__aeabi_i2f>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 	gyro_axis[2] = (short)(i2c_data[12] << 8 | i2c_data[13]) ; //yaw
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fff5 	bl	8000cdc <__aeabi_i2f>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	gyro_axis[0] -= gyro_axis_cal[0]; //pitch
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe fffd 	bl	8000d08 <__aeabi_l2f>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4619      	mov	r1, r3
 8001d12:	4620      	mov	r0, r4
 8001d14:	f7fe ff2c 	bl	8000b70 <__aeabi_fsub>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	gyro_axis[1] -= gyro_axis_cal[1]; //roll
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe ffe9 	bl	8000d08 <__aeabi_l2f>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7fe ff18 	bl	8000b70 <__aeabi_fsub>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	gyro_axis[2] -= gyro_axis_cal[2]; //yaw
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe ffd5 	bl	8000d08 <__aeabi_l2f>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4619      	mov	r1, r3
 8001d62:	4620      	mov	r0, r4
 8001d64:	f7fe ff04 	bl	8000b70 <__aeabi_fsub>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


    //filter gyro rates to be used by the first PID controller 
    gyro_pitch_rate_pid = (gyro_pitch_rate_pid * 0.7f) + ((gyro_axis[0] / GYRO_SCALE) * 0.3f);   //Gyro pid input is deg/sec.
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	49a2      	ldr	r1, [pc, #648]	; (8002000 <_ZN6I2CIMU10updateDataEv+0x440>)
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff f803 	bl	8000d84 <__aeabi_fmul>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461c      	mov	r4, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d88:	499e      	ldr	r1, [pc, #632]	; (8002004 <_ZN6I2CIMU10updateDataEv+0x444>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f8ae 	bl	8000eec <__aeabi_fdiv>
 8001d90:	4603      	mov	r3, r0
 8001d92:	499d      	ldr	r1, [pc, #628]	; (8002008 <_ZN6I2CIMU10updateDataEv+0x448>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fff5 	bl	8000d84 <__aeabi_fmul>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7fe fee8 	bl	8000b74 <__addsf3>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	601a      	str	r2, [r3, #0]
    gyro_roll_rate_pid  = (gyro_roll_rate_pid * 0.7f) + ((gyro_axis[1] / GYRO_SCALE) * 0.3f);   //Gyro pid input is deg/sec.
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4993      	ldr	r1, [pc, #588]	; (8002000 <_ZN6I2CIMU10updateDataEv+0x440>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe ffe6 	bl	8000d84 <__aeabi_fmul>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461c      	mov	r4, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc2:	4990      	ldr	r1, [pc, #576]	; (8002004 <_ZN6I2CIMU10updateDataEv+0x444>)
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f891 	bl	8000eec <__aeabi_fdiv>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	498e      	ldr	r1, [pc, #568]	; (8002008 <_ZN6I2CIMU10updateDataEv+0x448>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe ffd8 	bl	8000d84 <__aeabi_fmul>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7fe fecb 	bl	8000b74 <__addsf3>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	605a      	str	r2, [r3, #4]
    gyro_yaw_rate_pid   = (gyro_yaw_rate_pid * 0.7f) + ((gyro_axis[2] / GYRO_SCALE) * 0.3f);   //Gyro pid input is deg/sec.
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4985      	ldr	r1, [pc, #532]	; (8002000 <_ZN6I2CIMU10updateDataEv+0x440>)
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ffc9 	bl	8000d84 <__aeabi_fmul>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461c      	mov	r4, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfc:	4981      	ldr	r1, [pc, #516]	; (8002004 <_ZN6I2CIMU10updateDataEv+0x444>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f874 	bl	8000eec <__aeabi_fdiv>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4980      	ldr	r1, [pc, #512]	; (8002008 <_ZN6I2CIMU10updateDataEv+0x448>)
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe ffbb 	bl	8000d84 <__aeabi_fmul>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4619      	mov	r1, r3
 8001e12:	4620      	mov	r0, r4
 8001e14:	f7fe feae 	bl	8000b74 <__addsf3>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]

    //integrate gyro
    angle_pitch += gyro_axis[0] * gyro_scale;      
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68dc      	ldr	r4, [r3, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4610      	mov	r0, r2
 8001e32:	f7fe ffa7 	bl	8000d84 <__aeabi_fmul>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7fe fe9a 	bl	8000b74 <__addsf3>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	60da      	str	r2, [r3, #12]
    angle_roll  += gyro_axis[1] * gyro_scale;      
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691c      	ldr	r4, [r3, #16]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e56:	4619      	mov	r1, r3
 8001e58:	4610      	mov	r0, r2
 8001e5a:	f7fe ff93 	bl	8000d84 <__aeabi_fmul>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4619      	mov	r1, r3
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7fe fe86 	bl	8000b74 <__addsf3>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	611a      	str	r2, [r3, #16]
    //If the IMU has yawed transfer the roll angle to the pitch angel and  the pitch angle to the roll angel
    angle_pitch -= angle_roll * sin(gyro_axis[2] * gyro_scale_pi);  
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691c      	ldr	r4, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4610      	mov	r0, r2
 8001e82:	f7fe ff7f 	bl	8000d84 <__aeabi_fmul>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fbff 	bl	800168c <_ZSt3sinf>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4619      	mov	r1, r3
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7fe ff76 	bl	8000d84 <__aeabi_fmul>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fe64 	bl	8000b70 <__aeabi_fsub>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]
    angle_roll += angle_pitch * sin(gyro_axis[2] * gyro_scale_pi);  
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68dc      	ldr	r4, [r3, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	f7fe ff5f 	bl	8000d84 <__aeabi_fmul>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fbdf 	bl	800168c <_ZSt3sinf>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f7fe ff56 	bl	8000d84 <__aeabi_fmul>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f7fe fe46 	bl	8000b74 <__addsf3>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	611a      	str	r2, [r3, #16]


    //Accelerometer angle calculations
    acc_total_vector = sqrt((acc_axis[0]*acc_axis[0])+(acc_axis[1]*acc_axis[1])+(acc_axis[2]*acc_axis[2]));       //Calculate the total accelerometer vector.
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
 8001f00:	f7fe ff40 	bl	8000d84 <__aeabi_fmul>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461c      	mov	r4, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001f14:	4619      	mov	r1, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f7fe ff34 	bl	8000d84 <__aeabi_fmul>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4620      	mov	r0, r4
 8001f22:	f7fe fe27 	bl	8000b74 <__addsf3>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461c      	mov	r4, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f7fe ff23 	bl	8000d84 <__aeabi_fmul>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4619      	mov	r1, r3
 8001f42:	4620      	mov	r0, r4
 8001f44:	f7fe fe16 	bl	8000b74 <__addsf3>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fbaa 	bl	80016a4 <_ZSt4sqrtf>
 8001f50:	4602      	mov	r2, r0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
    if(abs(acc_axis[1]) < acc_total_vector){ //Prevent the asin function to produce a NaN
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fb7c 	bl	800165c <_ZSt3absf>
 8001f64:	4602      	mov	r2, r0
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	460c      	mov	r4, r1
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f7ff f8a4 	bl	80010c0 <__aeabi_fcmplt>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <_ZN6I2CIMU10updateDataEv+0x3c2>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	461c      	mov	r4, r3
 8001f82:	b2e3      	uxtb	r3, r4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d020      	beq.n	8001fca <_ZN6I2CIMU10updateDataEv+0x40a>
        acc_pitch = asin((float)acc_axis[1]/acc_total_vector)* 57.296;  //Calculate the pitch angle.
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f7fe ffa8 	bl	8000eec <__aeabi_fdiv>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fb68 	bl	8001674 <_ZSt4asinf>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fa3e 	bl	8000428 <__aeabi_f2d>
 8001fac:	a312      	add	r3, pc, #72	; (adr r3, 8001ff8 <_ZN6I2CIMU10updateDataEv+0x438>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe fa91 	bl	80004d8 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7fe fd83 	bl	8000ac8 <__aeabi_d2f>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }
    if(abs(acc_axis[0]) < acc_total_vector){  //Prevent the asin function to produce a NaN
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fb43 	bl	800165c <_ZSt3absf>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001fde:	2101      	movs	r1, #1
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f7ff f86b 	bl	80010c0 <__aeabi_fcmplt>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10d      	bne.n	800200c <_ZN6I2CIMU10updateDataEv+0x44c>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	461c      	mov	r4, r3
 8001ff4:	e00a      	b.n	800200c <_ZN6I2CIMU10updateDataEv+0x44c>
 8001ff6:	bf00      	nop
 8001ff8:	53f7ced9 	.word	0x53f7ced9
 8001ffc:	404ca5e3 	.word	0x404ca5e3
 8002000:	3f333333 	.word	0x3f333333
 8002004:	41200000 	.word	0x41200000
 8002008:	3e99999a 	.word	0x3e99999a
 800200c:	b2e3      	uxtb	r3, r4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d020      	beq.n	8002054 <_ZN6I2CIMU10updateDataEv+0x494>
        acc_roll = asin((float)acc_axis[0]/acc_total_vector)* -57.296;  //Calculate the roll angle.
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800201e:	4619      	mov	r1, r3
 8002020:	4610      	mov	r0, r2
 8002022:	f7fe ff63 	bl	8000eec <__aeabi_fdiv>
 8002026:	4603      	mov	r3, r0
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fb23 	bl	8001674 <_ZSt4asinf>
 800202e:	4603      	mov	r3, r0
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe f9f9 	bl	8000428 <__aeabi_f2d>
 8002036:	a342      	add	r3, pc, #264	; (adr r3, 8002140 <_ZN6I2CIMU10updateDataEv+0x580>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fa4c 	bl	80004d8 <__aeabi_dmul>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	f7fe fd3e 	bl	8000ac8 <__aeabi_d2f>
 800204c:	4602      	mov	r2, r0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }
  
    //Place the MPU-6050 spirit level and note the values in the following two lines for calibration.
    acc_pitch -= 0.0f;  //Accelerometer calibration value for pitch.
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    acc_roll -= 0.0f;   //Accelerometer calibration value for roll.
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    
    angle_pitch = angle_pitch * 0.99 + acc_pitch * 0.01; //Correct the drift of the gyro pitch angle with the accelerometer pitch angle.
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe f9d9 	bl	8000428 <__aeabi_f2d>
 8002076:	a334      	add	r3, pc, #208	; (adr r3, 8002148 <_ZN6I2CIMU10updateDataEv+0x588>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fa2c 	bl	80004d8 <__aeabi_dmul>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4614      	mov	r4, r2
 8002086:	461d      	mov	r5, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f9ca 	bl	8000428 <__aeabi_f2d>
 8002094:	a32e      	add	r3, pc, #184	; (adr r3, 8002150 <_ZN6I2CIMU10updateDataEv+0x590>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	f7fe fa1d 	bl	80004d8 <__aeabi_dmul>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4620      	mov	r0, r4
 80020a4:	4629      	mov	r1, r5
 80020a6:	f7fe f861 	bl	800016c <__adddf3>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f7fe fd09 	bl	8000ac8 <__aeabi_d2f>
 80020b6:	4602      	mov	r2, r0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	60da      	str	r2, [r3, #12]
    angle_roll = angle_roll * 0.99 + acc_roll * 0.01;    //Correct the drift of the gyro roll angle with the accelerometer roll angle.
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe f9b1 	bl	8000428 <__aeabi_f2d>
 80020c6:	a320      	add	r3, pc, #128	; (adr r3, 8002148 <_ZN6I2CIMU10updateDataEv+0x588>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f7fe fa04 	bl	80004d8 <__aeabi_dmul>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4614      	mov	r4, r2
 80020d6:	461d      	mov	r5, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f9a2 	bl	8000428 <__aeabi_f2d>
 80020e4:	a31a      	add	r3, pc, #104	; (adr r3, 8002150 <_ZN6I2CIMU10updateDataEv+0x590>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe f9f5 	bl	80004d8 <__aeabi_dmul>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4620      	mov	r0, r4
 80020f4:	4629      	mov	r1, r5
 80020f6:	f7fe f839 	bl	800016c <__adddf3>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4610      	mov	r0, r2
 8002100:	4619      	mov	r1, r3
 8002102:	f7fe fce1 	bl	8000ac8 <__aeabi_d2f>
 8002106:	4602      	mov	r2, r0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	611a      	str	r2, [r3, #16]

    //init absolute angles with accelerometer reading
    if (!gyro_angle_set){
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8002112:	f083 0301 	eor.w	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00d      	beq.n	8002138 <_ZN6I2CIMU10updateDataEv+0x578>
        angle_pitch = acc_pitch;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60da      	str	r2, [r3, #12]
        angle_roll  = acc_roll;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	611a      	str	r2, [r3, #16]
        gyro_angle_set = true;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    }
    
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bdb0      	pop	{r4, r5, r7, pc}
 8002140:	53f7ced9 	.word	0x53f7ced9
 8002144:	c04ca5e3 	.word	0xc04ca5e3
 8002148:	7ae147ae 	.word	0x7ae147ae
 800214c:	3fefae14 	.word	0x3fefae14
 8002150:	47ae147b 	.word	0x47ae147b
 8002154:	3f847ae1 	.word	0x3f847ae1

08002158 <_ZN3ESCC1Ev>:
void            init(int init_speed);
void            drive(uint16_t m1, uint16_t m2, uint16_t m3, uint16_t m4);
ESC(ESC& other) = delete; //Singletons should not be cloneable
};

ESC::ESC(){
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
//empty
}
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <_ZN3ESC11getInstanceEv>:

ESC& ESC::getInstance() {
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
    static ESC _instance;
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <_ZN3ESC11getInstanceEv+0x48>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	f3bf 8f5b 	dmb	ish
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf0c      	ite	eq
 8002182:	2301      	moveq	r3, #1
 8002184:	2300      	movne	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <_ZN3ESC11getInstanceEv+0x42>
 800218c:	4809      	ldr	r0, [pc, #36]	; (80021b4 <_ZN3ESC11getInstanceEv+0x48>)
 800218e:	f005 fa87 	bl	80076a0 <__cxa_guard_acquire>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <_ZN3ESC11getInstanceEv+0x42>
 80021a2:	4805      	ldr	r0, [pc, #20]	; (80021b8 <_ZN3ESC11getInstanceEv+0x4c>)
 80021a4:	f7ff ffd8 	bl	8002158 <_ZN3ESCC1Ev>
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <_ZN3ESC11getInstanceEv+0x48>)
 80021aa:	f005 fa85 	bl	80076b8 <__cxa_guard_release>
    return _instance;
 80021ae:	4b02      	ldr	r3, [pc, #8]	; (80021b8 <_ZN3ESC11getInstanceEv+0x4c>)
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000035c 	.word	0x2000035c
 80021b8:	20000314 	.word	0x20000314

080021bc <_ZL17PWM_Error_Handlerv>:

static void PWM_Error_Handler(){
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c0:	b672      	cpsid	i
}
 80021c2:	bf00      	nop
    //TODO: add LED notif error for ESC PWM
    __disable_irq();
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <_ZL17PWM_Error_Handlerv+0x8>

080021c6 <_ZN3ESC4initEi>:
  {
  }
}

void ESC::init(int init_speed){
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b094      	sub	sp, #80	; 0x50
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]

    //init TIM2 and PWM channels

    //=========================== HAL TIM2 CONFIG ==============================
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
    TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	611a      	str	r2, [r3, #16]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
 8002208:	615a      	str	r2, [r3, #20]
 800220a:	619a      	str	r2, [r3, #24]

    htim2.Instance = TIM2;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002212:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 19; //from 0 to 19 ie /20
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2213      	movs	r2, #19
 8002218:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 59999;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002226:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) PWM_Error_Handler();
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	f003 ff34 	bl	80060a4 <HAL_TIM_Base_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf14      	ite	ne
 8002242:	2301      	movne	r3, #1
 8002244:	2300      	moveq	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <_ZN3ESC4initEi+0x8a>
 800224c:	f7ff ffb6 	bl	80021bc <_ZL17PWM_Error_Handlerv>
    
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) PWM_Error_Handler();
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f004 f928 	bl	80064b4 <HAL_TIM_ConfigClockSource>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <_ZN3ESC4initEi+0xb2>
 8002274:	f7ff ffa2 	bl	80021bc <_ZL17PWM_Error_Handlerv>
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) PWM_Error_Handler();
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 ff61 	bl	8006142 <HAL_TIM_PWM_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <_ZN3ESC4initEi+0xce>
 8002290:	f7ff ff94 	bl	80021bc <_ZL17PWM_Error_Handlerv>
    
    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
    sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002298:	2300      	movs	r3, #0
 800229a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) PWM_Error_Handler();
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f004 f9c9 	bl	800663c <HAL_TIM_SlaveConfigSynchro>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <_ZN3ESC4initEi+0xf8>
 80022ba:	f7ff ff7f 	bl	80021bc <_ZL17PWM_Error_Handlerv>
    
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) PWM_Error_Handler();
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 fd28 	bl	8006d24 <HAL_TIMEx_MasterConfigSynchronization>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bf14      	ite	ne
 80022da:	2301      	movne	r3, #1
 80022dc:	2300      	moveq	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <_ZN3ESC4initEi+0x122>
 80022e4:	f7ff ff6a 	bl	80021bc <_ZL17PWM_Error_Handlerv>
    
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e8:	2360      	movs	r3, #96	; 0x60
 80022ea:	60bb      	str	r3, [r7, #8]
    sConfigOC.Pulse = PWM_MIN;
 80022ec:	f640 630f 	movw	r3, #3599	; 0xe0f
 80022f0:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) PWM_Error_Handler();
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f107 0108 	add.w	r1, r7, #8
 8002300:	2200      	movs	r2, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f004 f818 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <_ZN3ESC4initEi+0x156>
 8002318:	f7ff ff50 	bl	80021bc <_ZL17PWM_Error_Handlerv>

    sConfigOC.Pulse = init_speed; //PWM_MIN
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	60fb      	str	r3, [r7, #12]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) PWM_Error_Handler();
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f107 0108 	add.w	r1, r7, #8
 8002326:	2204      	movs	r2, #4
 8002328:	4618      	mov	r0, r3
 800232a:	f004 f805 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <_ZN3ESC4initEi+0x17c>
 800233e:	f7ff ff3d 	bl	80021bc <_ZL17PWM_Error_Handlerv>
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) PWM_Error_Handler();
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f107 0108 	add.w	r1, r7, #8
 8002348:	2208      	movs	r2, #8
 800234a:	4618      	mov	r0, r3
 800234c:	f003 fff4 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	bf14      	ite	ne
 8002356:	2301      	movne	r3, #1
 8002358:	2300      	moveq	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <_ZN3ESC4initEi+0x19e>
 8002360:	f7ff ff2c 	bl	80021bc <_ZL17PWM_Error_Handlerv>
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) PWM_Error_Handler();
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f107 0108 	add.w	r1, r7, #8
 800236a:	220c      	movs	r2, #12
 800236c:	4618      	mov	r0, r3
 800236e:	f003 ffe3 	bl	8006338 <HAL_TIM_PWM_ConfigChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf14      	ite	ne
 8002378:	2301      	movne	r3, #1
 800237a:	2300      	moveq	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <_ZN3ESC4initEi+0x1c0>
 8002382:	f7ff ff1b 	bl	80021bc <_ZL17PWM_Error_Handlerv>
    
    HAL_TIM_MspPostInit(&htim2);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4618      	mov	r0, r3
 800238a:	f001 fa81 	bl	8003890 <HAL_TIM_MspPostInit>
    //=========================== HAL PWM CONFIG ==============================
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f003 ff2e 	bl	80061f4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2104      	movs	r1, #4
 800239c:	4618      	mov	r0, r3
 800239e:	f003 ff29 	bl	80061f4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2108      	movs	r1, #8
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 ff24 	bl	80061f4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	210c      	movs	r1, #12
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 ff1f 	bl	80061f4 <HAL_TIM_PWM_Start>

}
 80023b6:	bf00      	nop
 80023b8:	3750      	adds	r7, #80	; 0x50
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_ZN3ESC5driveEtttt>:


void ESC::drive(uint16_t m1, uint16_t m2, uint16_t m3, uint16_t m4){
 80023be:	b480      	push	{r7}
 80023c0:	b085      	sub	sp, #20
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	4608      	mov	r0, r1
 80023c8:	4611      	mov	r1, r2
 80023ca:	461a      	mov	r2, r3
 80023cc:	4603      	mov	r3, r0
 80023ce:	817b      	strh	r3, [r7, #10]
 80023d0:	460b      	mov	r3, r1
 80023d2:	813b      	strh	r3, [r7, #8]
 80023d4:	4613      	mov	r3, r2
 80023d6:	80fb      	strh	r3, [r7, #6]
    TIM2->CCR1 = m4;
 80023d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023dc:	8b3b      	ldrh	r3, [r7, #24]
 80023de:	6353      	str	r3, [r2, #52]	; 0x34
    TIM2->CCR2 = m3;
 80023e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	6393      	str	r3, [r2, #56]	; 0x38
    TIM2->CCR3 = m2;
 80023e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ec:	893b      	ldrh	r3, [r7, #8]
 80023ee:	63d3      	str	r3, [r2, #60]	; 0x3c
    TIM2->CCR4 = m1;
 80023f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023f4:	897b      	ldrh	r3, [r7, #10]
 80023f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <_ZN3PIDC1Efffi>:
float   feedback(float val);
void    reset();
};


PID::PID(float kp,float ki,float kd, int max){
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	61da      	str	r2, [r3, #28]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
    this->kp = kp;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	601a      	str	r2, [r3, #0]
    this->ki = ki;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	605a      	str	r2, [r3, #4]
    this->kd = kd;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	609a      	str	r2, [r3, #8]
    max_value = max;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	611a      	str	r2, [r3, #16]
}
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <_ZN3PID11setSetpointEf>:

void PID::setSetpoint(float setpoint){
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    this->setpoint = setpoint;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	60da      	str	r2, [r3, #12]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <_ZN3PID8feedbackEf>:

float PID::feedback(float val){
 800246e:	b590      	push	{r4, r7, lr}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
    
    //calculate errors, derivative and sum
    prev_error = error;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	61da      	str	r2, [r3, #28]
    error = val - setpoint; 
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4619      	mov	r1, r3
 8002486:	6838      	ldr	r0, [r7, #0]
 8002488:	f7fe fb72 	bl	8000b70 <__aeabi_fsub>
 800248c:	4603      	mov	r3, r0
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	615a      	str	r2, [r3, #20]
    derivative = prev_error - error; //we want this to in reverse signe to the proportional_output as it corrects over compensation 
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f7fe fb66 	bl	8000b70 <__aeabi_fsub>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461a      	mov	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	619a      	str	r2, [r3, #24]
    i_sum += ki * error;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1c      	ldr	r4, [r3, #32]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f7fe fc62 	bl	8000d84 <__aeabi_fmul>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4619      	mov	r1, r3
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7fe fb55 	bl	8000b74 <__addsf3>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	621a      	str	r2, [r3, #32]
    
    //integral windup (this is not redundant since it may be reduced by the derivative or proportional)
    if(i_sum > max_value)i_sum = max_value;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1c      	ldr	r4, [r3, #32]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fbfe 	bl	8000cdc <__aeabi_i2f>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4619      	mov	r1, r3
 80024e4:	4620      	mov	r0, r4
 80024e6:	f7fe fe09 	bl	80010fc <__aeabi_fcmpgt>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <_ZN3PID8feedbackEf+0x94>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe fbf1 	bl	8000cdc <__aeabi_i2f>
 80024fa:	4602      	mov	r2, r0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	621a      	str	r2, [r3, #32]
 8002500:	e018      	b.n	8002534 <_ZN3PID8feedbackEf+0xc6>
    else if(i_sum < max_value * -1)i_sum = max_value * -1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1c      	ldr	r4, [r3, #32]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	425b      	negs	r3, r3
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fbe5 	bl	8000cdc <__aeabi_i2f>
 8002512:	4603      	mov	r3, r0
 8002514:	4619      	mov	r1, r3
 8002516:	4620      	mov	r0, r4
 8002518:	f7fe fdd2 	bl	80010c0 <__aeabi_fcmplt>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <_ZN3PID8feedbackEf+0xc6>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	425b      	negs	r3, r3
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fbd7 	bl	8000cdc <__aeabi_i2f>
 800252e:	4602      	mov	r2, r0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	621a      	str	r2, [r3, #32]
    
    //calculate PID output
    output = kp*error + i_sum + kd*derivative;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f7fe fc20 	bl	8000d84 <__aeabi_fmul>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f7fe fb10 	bl	8000b74 <__addsf3>
 8002554:	4603      	mov	r3, r0
 8002556:	461c      	mov	r4, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f7fe fc0e 	bl	8000d84 <__aeabi_fmul>
 8002568:	4603      	mov	r3, r0
 800256a:	4619      	mov	r1, r3
 800256c:	4620      	mov	r0, r4
 800256e:	f7fe fb01 	bl	8000b74 <__addsf3>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
    
    //output windup
    if(output > max_value)output = max_value;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fbaa 	bl	8000cdc <__aeabi_i2f>
 8002588:	4603      	mov	r3, r0
 800258a:	4619      	mov	r1, r3
 800258c:	4620      	mov	r0, r4
 800258e:	f7fe fdb5 	bl	80010fc <__aeabi_fcmpgt>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <_ZN3PID8feedbackEf+0x13c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fb9d 	bl	8000cdc <__aeabi_i2f>
 80025a2:	4602      	mov	r2, r0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
 80025a8:	e018      	b.n	80025dc <_ZN3PID8feedbackEf+0x16e>
    else if(output < max_value * -1)output = max_value * -1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	425b      	negs	r3, r3
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fb91 	bl	8000cdc <__aeabi_i2f>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4619      	mov	r1, r3
 80025be:	4620      	mov	r0, r4
 80025c0:	f7fe fd7e 	bl	80010c0 <__aeabi_fcmplt>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <_ZN3PID8feedbackEf+0x16e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	425b      	negs	r3, r3
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fb83 	bl	8000cdc <__aeabi_i2f>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24
    return output;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd90      	pop	{r4, r7, pc}

080025e8 <_ZN3PID5resetEv>:

void PID::reset(){
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
    setpoint = 0.0f;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
    error = 0.0f;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
    derivative;
    prev_error = 0.0f;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	61da      	str	r2, [r3, #28]
    i_sum = 0.0f; 
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
    output = 0.0f;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
	...

08002624 <_Z5setupv>:
float debug_raw_roll = 0;
float debug_pid_pitch = 0;
float debug_pid_roll = 0;

// ===================================== setup ======================================
void setup(){
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
   //init and config periphereals
  HAL_Init();
 800262a:	f001 fadb 	bl	8003be4 <HAL_Init>
  SystemClock_Config();
 800262e:	f000 fb55 	bl	8002cdc <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8002632:	f000 fbed 	bl	8002e10 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8002636:	f000 fba1 	bl	8002d7c <_ZL19MX_USART1_UART_Initv>
  MX_ADC1_Init();
 800263a:	f000 fca5 	bl	8002f88 <_ZL12MX_ADC1_Initv>
  micros_init();
 800263e:	f001 f801 	bl	8003644 <micros_init>
  HAL_UART_Receive_IT(&huart1,&uart_data, 1);
 8002642:	2201      	movs	r2, #1
 8002644:	4948      	ldr	r1, [pc, #288]	; (8002768 <_Z5setupv+0x144>)
 8002646:	4849      	ldr	r0, [pc, #292]	; (800276c <_Z5setupv+0x148>)
 8002648:	f004 fc17 	bl	8006e7a <HAL_UART_Receive_IT>
  //set Proto+ callback to recieve the next command (init_drone) and all others
  phelper.setOnCommandRecievedCallabck(commandCallback);
 800264c:	4b48      	ldr	r3, [pc, #288]	; (8002770 <_Z5setupv+0x14c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4948      	ldr	r1, [pc, #288]	; (8002774 <_Z5setupv+0x150>)
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe ff12 	bl	800147c <_ZN11ProtoHelper28setOnCommandRecievedCallabckEPFvP7CommandE>
  
  
  // Wait for the bluetooth module to connect to Proto+
  while (HAL_GPIO_ReadPin(BT_STAT_PIN) != GPIO_PIN_SET){
 8002658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800265c:	4846      	ldr	r0, [pc, #280]	; (8002778 <_Z5setupv+0x154>)
 800265e:	f002 f8a7 	bl	80047b0 <HAL_GPIO_ReadPin>
 8002662:	4603      	mov	r3, r0
 8002664:	2b01      	cmp	r3, #1
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01c      	beq.n	80026ac <_Z5setupv+0x88>
    HAL_GPIO_TogglePin(BLUE_LED);
 8002672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002676:	4841      	ldr	r0, [pc, #260]	; (800277c <_Z5setupv+0x158>)
 8002678:	f002 f8c9 	bl	800480e <HAL_GPIO_TogglePin>
    HAL_Delay(300);
 800267c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002680:	f001 fb12 	bl	8003ca8 <HAL_Delay>
    HAL_GPIO_TogglePin(BLUE_LED);
 8002684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002688:	483c      	ldr	r0, [pc, #240]	; (800277c <_Z5setupv+0x158>)
 800268a:	f002 f8c0 	bl	800480e <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(RED_LED);
 800268e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002692:	483a      	ldr	r0, [pc, #232]	; (800277c <_Z5setupv+0x158>)
 8002694:	f002 f8bb 	bl	800480e <HAL_GPIO_TogglePin>
    HAL_Delay(300);
 8002698:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800269c:	f001 fb04 	bl	8003ca8 <HAL_Delay>
    HAL_GPIO_TogglePin(RED_LED);
 80026a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026a4:	4835      	ldr	r0, [pc, #212]	; (800277c <_Z5setupv+0x158>)
 80026a6:	f002 f8b2 	bl	800480e <HAL_GPIO_TogglePin>
  while (HAL_GPIO_ReadPin(BT_STAT_PIN) != GPIO_PIN_SET){
 80026aa:	e7d5      	b.n	8002658 <_Z5setupv+0x34>
  };


  //wait for init button to be clicked in Proto+
  while (!init_drone){
 80026ac:	4b34      	ldr	r3, [pc, #208]	; (8002780 <_Z5setupv+0x15c>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d11c      	bne.n	80026ee <_Z5setupv+0xca>
     HAL_GPIO_TogglePin(BLUE_LED);
 80026b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b8:	4830      	ldr	r0, [pc, #192]	; (800277c <_Z5setupv+0x158>)
 80026ba:	f002 f8a8 	bl	800480e <HAL_GPIO_TogglePin>
     HAL_GPIO_TogglePin(RED_LED);
 80026be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026c2:	482e      	ldr	r0, [pc, #184]	; (800277c <_Z5setupv+0x158>)
 80026c4:	f002 f8a3 	bl	800480e <HAL_GPIO_TogglePin>
     HAL_Delay(300);
 80026c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026cc:	f001 faec 	bl	8003ca8 <HAL_Delay>
     HAL_GPIO_TogglePin(BLUE_LED);
 80026d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026d4:	4829      	ldr	r0, [pc, #164]	; (800277c <_Z5setupv+0x158>)
 80026d6:	f002 f89a 	bl	800480e <HAL_GPIO_TogglePin>
     HAL_GPIO_TogglePin(RED_LED);
 80026da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026de:	4827      	ldr	r0, [pc, #156]	; (800277c <_Z5setupv+0x158>)
 80026e0:	f002 f895 	bl	800480e <HAL_GPIO_TogglePin>
     HAL_Delay(300);
 80026e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026e8:	f001 fade 	bl	8003ca8 <HAL_Delay>
  while (!init_drone){
 80026ec:	e7de      	b.n	80026ac <_Z5setupv+0x88>
  }

  //start motors
  escs.init(PWM_MIN);
 80026ee:	4b25      	ldr	r3, [pc, #148]	; (8002784 <_Z5setupv+0x160>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f640 610f 	movw	r1, #3599	; 0xe0f
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fd65 	bl	80021c6 <_ZN3ESC4initEi>

  //init GYRO + Calibrate it
  HAL_GPIO_WritePin(RED_LED, GPIO_PIN_SET); //turn ON RED_LED ONLY to indicate calibration start
 80026fc:	2201      	movs	r2, #1
 80026fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002702:	481e      	ldr	r0, [pc, #120]	; (800277c <_Z5setupv+0x158>)
 8002704:	f002 f86b 	bl	80047de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLUE_LED, GPIO_PIN_RESET);
 8002708:	2200      	movs	r2, #0
 800270a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800270e:	481b      	ldr	r0, [pc, #108]	; (800277c <_Z5setupv+0x158>)
 8002710:	f002 f865 	bl	80047de <HAL_GPIO_WritePin>
  imu.init(250.0f);
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <_Z5setupv+0x164>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	491c      	ldr	r1, [pc, #112]	; (800278c <_Z5setupv+0x168>)
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f83c 	bl	8001798 <_ZN6I2CIMU4initEf>
  imu.calibrateSensor(200);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <_Z5setupv+0x164>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	21c8      	movs	r1, #200	; 0xc8
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f8e6 	bl	80018f8 <_ZN6I2CIMU15calibrateSensorEi>
  //stabilize angle
  for(int i = 0; i < 100; i++) {
 800272c:	2300      	movs	r3, #0
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b63      	cmp	r3, #99	; 0x63
 8002734:	dc0b      	bgt.n	800274e <_Z5setupv+0x12a>
	  imu.updateData();
 8002736:	4b14      	ldr	r3, [pc, #80]	; (8002788 <_Z5setupv+0x164>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fa40 	bl	8001bc0 <_ZN6I2CIMU10updateDataEv>
	  HAL_Delay(10);
 8002740:	200a      	movs	r0, #10
 8002742:	f001 fab1 	bl	8003ca8 <HAL_Delay>
  for(int i = 0; i < 100; i++) {
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3301      	adds	r3, #1
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	e7f0      	b.n	8002730 <_Z5setupv+0x10c>
  }
  HAL_GPIO_WritePin(RED_LED, GPIO_PIN_RESET); //turn OFF RED_LED ONLY to indicate calibration end
 800274e:	2200      	movs	r2, #0
 8002750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002754:	4809      	ldr	r0, [pc, #36]	; (800277c <_Z5setupv+0x158>)
 8002756:	f002 f842 	bl	80047de <HAL_GPIO_WritePin>

  //initialize the battery_voltage variable to be able to filter it later
  init_battery();
 800275a:	f000 fcfd 	bl	8003158 <_Z12init_batteryv>

//  calibrateESCS();
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000000 	.word	0x20000000
 800276c:	20000374 	.word	0x20000374
 8002770:	200003f0 	.word	0x200003f0
 8002774:	08003259 	.word	0x08003259
 8002778:	40010800 	.word	0x40010800
 800277c:	40010c00 	.word	0x40010c00
 8002780:	20000368 	.word	0x20000368
 8002784:	200003ec 	.word	0x200003ec
 8002788:	200003e8 	.word	0x200003e8
 800278c:	437a0000 	.word	0x437a0000

08002790 <main>:

// ===================================== Main =======================================
int main(void)
{
 8002790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af02      	add	r7, sp, #8
  
  setup();
 8002798:	f7ff ff44 	bl	8002624 <_Z5setupv>
  loop_time = micros();
 800279c:	f000 ff8a 	bl	80036b4 <micros>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a97      	ldr	r2, [pc, #604]	; (8002a00 <main+0x270>)
 80027a4:	6013      	str	r3, [r2, #0]
  while (1)
  {
    //---------------------------------- DRONE_FLY ----------------------------------
    if (state == DRONE_FLY)
 80027a6:	4b97      	ldr	r3, [pc, #604]	; (8002a04 <main+0x274>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	f040 819a 	bne.w	8002ae4 <main+0x354>
    {
      //------------------------------- update angles -------------------------------
      imu.updateData();
 80027b0:	4b95      	ldr	r3, [pc, #596]	; (8002a08 <main+0x278>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fa03 	bl	8001bc0 <_ZN6I2CIMU10updateDataEv>
      //-----------------------------------------------------------------------------

      //------------------------ PID stage 2 (auto-leveling) ------------------------
      //TODO: need to limit this to a certain range from PROTO+ directly (0 -> 30)
      //setpint from remote controller
      pid2_pitch.setSetpoint(-pitch_setpoint);
 80027ba:	4b94      	ldr	r3, [pc, #592]	; (8002a0c <main+0x27c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027c2:	4619      	mov	r1, r3
 80027c4:	4892      	ldr	r0, [pc, #584]	; (8002a10 <main+0x280>)
 80027c6:	f7ff fe45 	bl	8002454 <_ZN3PID11setSetpointEf>
      pid2_roll.setSetpoint(-roll_setpoint);
 80027ca:	4b92      	ldr	r3, [pc, #584]	; (8002a14 <main+0x284>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027d2:	4619      	mov	r1, r3
 80027d4:	4890      	ldr	r0, [pc, #576]	; (8002a18 <main+0x288>)
 80027d6:	f7ff fe3d 	bl	8002454 <_ZN3PID11setSetpointEf>
      //Close outer-feedback loops and get PID rate outputs
      pid2_pitch_cmd = pid2_pitch.feedback(-imu.angle_pitch); //command in °/sec
 80027da:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <main+0x278>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027e4:	4619      	mov	r1, r3
 80027e6:	488a      	ldr	r0, [pc, #552]	; (8002a10 <main+0x280>)
 80027e8:	f7ff fe41 	bl	800246e <_ZN3PID8feedbackEf>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4a8b      	ldr	r2, [pc, #556]	; (8002a1c <main+0x28c>)
 80027f0:	6013      	str	r3, [r2, #0]
      pid2_roll_cmd =  pid2_roll.feedback(-imu.angle_roll);
 80027f2:	4b85      	ldr	r3, [pc, #532]	; (8002a08 <main+0x278>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027fc:	4619      	mov	r1, r3
 80027fe:	4886      	ldr	r0, [pc, #536]	; (8002a18 <main+0x288>)
 8002800:	f7ff fe35 	bl	800246e <_ZN3PID8feedbackEf>
 8002804:	4603      	mov	r3, r0
 8002806:	4a86      	ldr	r2, [pc, #536]	; (8002a20 <main+0x290>)
 8002808:	6013      	str	r3, [r2, #0]
      //-----------------------------------------------------------------------------

      //--------------------- PID stage 1 (rate-stabilization) ----------------------
      //update PID rate setpoints (deg/s)
      pid1_pitch_rate.setSetpoint(pid2_pitch_cmd); //feed out PID2 into setpoint of PID1
 800280a:	4b84      	ldr	r3, [pc, #528]	; (8002a1c <main+0x28c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4619      	mov	r1, r3
 8002810:	4884      	ldr	r0, [pc, #528]	; (8002a24 <main+0x294>)
 8002812:	f7ff fe1f 	bl	8002454 <_ZN3PID11setSetpointEf>
      pid1_roll_rate.setSetpoint(pid2_roll_cmd); //feed out PID2 into setpoint of PID1
 8002816:	4b82      	ldr	r3, [pc, #520]	; (8002a20 <main+0x290>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	4882      	ldr	r0, [pc, #520]	; (8002a28 <main+0x298>)
 800281e:	f7ff fe19 	bl	8002454 <_ZN3PID11setSetpointEf>
      pid1_yaw_rate.setSetpoint(yaw_setpoint); // TODO: yaw rate is given directly from the remote controller 
 8002822:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <main+0x29c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	4881      	ldr	r0, [pc, #516]	; (8002a30 <main+0x2a0>)
 800282a:	f7ff fe13 	bl	8002454 <_ZN3PID11setSetpointEf>
      //Close inner-feedback loops and get PID rate outputs
      pid1_pitch_out = pid1_pitch_rate.feedback(imu.gyro_pitch_rate_pid);
 800282e:	4b76      	ldr	r3, [pc, #472]	; (8002a08 <main+0x278>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	487b      	ldr	r0, [pc, #492]	; (8002a24 <main+0x294>)
 8002838:	f7ff fe19 	bl	800246e <_ZN3PID8feedbackEf>
 800283c:	4603      	mov	r3, r0
 800283e:	4a7d      	ldr	r2, [pc, #500]	; (8002a34 <main+0x2a4>)
 8002840:	6013      	str	r3, [r2, #0]
      pid1_roll_out = pid1_roll_rate.feedback(imu.gyro_roll_rate_pid);
 8002842:	4b71      	ldr	r3, [pc, #452]	; (8002a08 <main+0x278>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4619      	mov	r1, r3
 800284a:	4877      	ldr	r0, [pc, #476]	; (8002a28 <main+0x298>)
 800284c:	f7ff fe0f 	bl	800246e <_ZN3PID8feedbackEf>
 8002850:	4603      	mov	r3, r0
 8002852:	4a79      	ldr	r2, [pc, #484]	; (8002a38 <main+0x2a8>)
 8002854:	6013      	str	r3, [r2, #0]
      pid1_yaw_out = pid1_yaw_rate.feedback(imu.gyro_yaw_rate_pid);
 8002856:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <main+0x278>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4619      	mov	r1, r3
 800285e:	4874      	ldr	r0, [pc, #464]	; (8002a30 <main+0x2a0>)
 8002860:	f7ff fe05 	bl	800246e <_ZN3PID8feedbackEf>
 8002864:	4603      	mov	r3, r0
 8002866:	4a75      	ldr	r2, [pc, #468]	; (8002a3c <main+0x2ac>)
 8002868:	6013      	str	r3, [r2, #0]
      //-----------------------------------------------------------------------------
      

      //-------------------- calculate and constrain motor output -------------------
      m1_out = constrainMotorVal(thrust_cmd + pid1_pitch_out + pid1_roll_out - pid1_yaw_out); //Calculate the pulse for esc 1 (front-right - CCW)
 800286a:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <main+0x2b0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a71      	ldr	r2, [pc, #452]	; (8002a34 <main+0x2a4>)
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe f97d 	bl	8000b74 <__addsf3>
 800287a:	4603      	mov	r3, r0
 800287c:	461a      	mov	r2, r3
 800287e:	4b6e      	ldr	r3, [pc, #440]	; (8002a38 <main+0x2a8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f7fe f975 	bl	8000b74 <__addsf3>
 800288a:	4603      	mov	r3, r0
 800288c:	461a      	mov	r2, r3
 800288e:	4b6b      	ldr	r3, [pc, #428]	; (8002a3c <main+0x2ac>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f7fe f96b 	bl	8000b70 <__aeabi_fsub>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fc27 	bl	80030f0 <_Z17constrainMotorValf>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fa19 	bl	8000cdc <__aeabi_i2f>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a65      	ldr	r2, [pc, #404]	; (8002a44 <main+0x2b4>)
 80028ae:	6013      	str	r3, [r2, #0]
      m2_out = constrainMotorVal(thrust_cmd + pid1_pitch_out - pid1_roll_out + pid1_yaw_out); //Calculate the pulse for esc 2 (rear-right - CW)
 80028b0:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <main+0x2b0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a5f      	ldr	r2, [pc, #380]	; (8002a34 <main+0x2a4>)
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe f95a 	bl	8000b74 <__addsf3>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <main+0x2a8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f7fe f950 	bl	8000b70 <__aeabi_fsub>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b59      	ldr	r3, [pc, #356]	; (8002a3c <main+0x2ac>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f7fe f94a 	bl	8000b74 <__addsf3>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fc04 	bl	80030f0 <_Z17constrainMotorValf>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe f9f6 	bl	8000cdc <__aeabi_i2f>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4a55      	ldr	r2, [pc, #340]	; (8002a48 <main+0x2b8>)
 80028f4:	6013      	str	r3, [r2, #0]
      m3_out = constrainMotorVal(thrust_cmd - pid1_pitch_out - pid1_roll_out - pid1_yaw_out); //Calculate the pulse for esc 3 (rear-left - CCW)
 80028f6:	4b52      	ldr	r3, [pc, #328]	; (8002a40 <main+0x2b0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a4e      	ldr	r2, [pc, #312]	; (8002a34 <main+0x2a4>)
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe f935 	bl	8000b70 <__aeabi_fsub>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <main+0x2a8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4619      	mov	r1, r3
 8002910:	4610      	mov	r0, r2
 8002912:	f7fe f92d 	bl	8000b70 <__aeabi_fsub>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <main+0x2ac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f7fe f925 	bl	8000b70 <__aeabi_fsub>
 8002926:	4603      	mov	r3, r0
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fbe1 	bl	80030f0 <_Z17constrainMotorValf>
 800292e:	4603      	mov	r3, r0
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe f9d3 	bl	8000cdc <__aeabi_i2f>
 8002936:	4603      	mov	r3, r0
 8002938:	4a44      	ldr	r2, [pc, #272]	; (8002a4c <main+0x2bc>)
 800293a:	6013      	str	r3, [r2, #0]
      m4_out = constrainMotorVal(thrust_cmd - pid1_pitch_out + pid1_roll_out + pid1_yaw_out); //Calculate the pulse for esc 4 (front-left - CW)
 800293c:	4b40      	ldr	r3, [pc, #256]	; (8002a40 <main+0x2b0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a3c      	ldr	r2, [pc, #240]	; (8002a34 <main+0x2a4>)
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe f912 	bl	8000b70 <__aeabi_fsub>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <main+0x2a8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f7fe f90c 	bl	8000b74 <__addsf3>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <main+0x2ac>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f7fe f904 	bl	8000b74 <__addsf3>
 800296c:	4603      	mov	r3, r0
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fbbe 	bl	80030f0 <_Z17constrainMotorValf>
 8002974:	4603      	mov	r3, r0
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe f9b0 	bl	8000cdc <__aeabi_i2f>
 800297c:	4603      	mov	r3, r0
 800297e:	4a34      	ldr	r2, [pc, #208]	; (8002a50 <main+0x2c0>)
 8002980:	6013      	str	r3, [r2, #0]
      //-----------------------------------------------------------------------------


      //drive motors but add safe angle protection
      if(abs(imu.angle_pitch) >= SAFE_GUARD_ANGLE || abs(imu.angle_roll) >= SAFE_GUARD_ANGLE)
 8002982:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <main+0x278>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fe67 	bl	800165c <_ZSt3absf>
 800298e:	4603      	mov	r3, r0
 8002990:	4930      	ldr	r1, [pc, #192]	; (8002a54 <main+0x2c4>)
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fba8 	bl	80010e8 <__aeabi_fcmpge>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10d      	bne.n	80029ba <main+0x22a>
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <main+0x278>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fe59 	bl	800165c <_ZSt3absf>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4929      	ldr	r1, [pc, #164]	; (8002a54 <main+0x2c4>)
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fb9a 	bl	80010e8 <__aeabi_fcmpge>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <main+0x22e>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <main+0x230>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d062      	beq.n	8002a8a <main+0x2fa>
      {
    	escs.drive(PWM_MIN, PWM_MIN, PWM_MIN, PWM_MIN);
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <main+0x2c8>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	f640 630f 	movw	r3, #3599	; 0xe0f
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	f640 630f 	movw	r3, #3599	; 0xe0f
 80029d2:	f640 620f 	movw	r2, #3599	; 0xe0f
 80029d6:	f640 610f 	movw	r1, #3599	; 0xe0f
 80029da:	f7ff fcf0 	bl	80023be <_ZN3ESC5driveEtttt>
        state = DRONE_STOP;
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <main+0x274>)
 80029e0:	2202      	movs	r2, #2
 80029e2:	701a      	strb	r2, [r3, #0]
        //stop untill start btn is clicked
        while(state != DRONE_FLY){
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <main+0x274>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d039      	beq.n	8002a60 <main+0x2d0>
        HAL_GPIO_TogglePin(RED_LED);
 80029ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f0:	481a      	ldr	r0, [pc, #104]	; (8002a5c <main+0x2cc>)
 80029f2:	f001 ff0c 	bl	800480e <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 80029f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029fa:	f001 f955 	bl	8003ca8 <HAL_Delay>
        while(state != DRONE_FLY){
 80029fe:	e7f1      	b.n	80029e4 <main+0x254>
 8002a00:	20000364 	.word	0x20000364
 8002a04:	20000370 	.word	0x20000370
 8002a08:	200003e8 	.word	0x200003e8
 8002a0c:	200003f4 	.word	0x200003f4
 8002a10:	2000048c 	.word	0x2000048c
 8002a14:	200003f8 	.word	0x200003f8
 8002a18:	200004b4 	.word	0x200004b4
 8002a1c:	20000484 	.word	0x20000484
 8002a20:	20000488 	.word	0x20000488
 8002a24:	2000040c 	.word	0x2000040c
 8002a28:	20000434 	.word	0x20000434
 8002a2c:	200003fc 	.word	0x200003fc
 8002a30:	2000045c 	.word	0x2000045c
 8002a34:	20000400 	.word	0x20000400
 8002a38:	20000404 	.word	0x20000404
 8002a3c:	20000408 	.word	0x20000408
 8002a40:	20000004 	.word	0x20000004
 8002a44:	200004dc 	.word	0x200004dc
 8002a48:	200004e0 	.word	0x200004e0
 8002a4c:	200004e4 	.word	0x200004e4
 8002a50:	200004e8 	.word	0x200004e8
 8002a54:	461c1800 	.word	0x461c1800
 8002a58:	200003ec 	.word	0x200003ec
 8002a5c:	40010c00 	.word	0x40010c00
        }
        // update the angle a few times to stabilize it
        for(int i = 0; i < 100; i++) imu.updateData();
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b63      	cmp	r3, #99	; 0x63
 8002a68:	dc08      	bgt.n	8002a7c <main+0x2ec>
 8002a6a:	4b89      	ldr	r3, [pc, #548]	; (8002c90 <main+0x500>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f8a6 	bl	8001bc0 <_ZN6I2CIMU10updateDataEv>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3301      	adds	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	e7f3      	b.n	8002a64 <main+0x2d4>
        // turn off the red led
        HAL_GPIO_WritePin(RED_LED, GPIO_PIN_RESET);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a82:	4884      	ldr	r0, [pc, #528]	; (8002c94 <main+0x504>)
 8002a84:	f001 feab 	bl	80047de <HAL_GPIO_WritePin>
 8002a88:	e005      	b.n	8002a96 <main+0x306>

      }
      else
        read_battery_and_compensate(m1_out, m2_out, m3_out, m4_out);
 8002a8a:	4b83      	ldr	r3, [pc, #524]	; (8002c98 <main+0x508>)
 8002a8c:	4a83      	ldr	r2, [pc, #524]	; (8002c9c <main+0x50c>)
 8002a8e:	4984      	ldr	r1, [pc, #528]	; (8002ca0 <main+0x510>)
 8002a90:	4884      	ldr	r0, [pc, #528]	; (8002ca4 <main+0x514>)
 8002a92:	f000 fb89 	bl	80031a8 <_Z27read_battery_and_compensateRfS_S_S_>
    	  escs.drive(m1_out, m2_out, m3_out, m4_out);
 8002a96:	4b84      	ldr	r3, [pc, #528]	; (8002ca8 <main+0x518>)
 8002a98:	681c      	ldr	r4, [r3, #0]
 8002a9a:	4b82      	ldr	r3, [pc, #520]	; (8002ca4 <main+0x514>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe fb72 	bl	8001188 <__aeabi_f2uiz>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b29d      	uxth	r5, r3
 8002aa8:	4b7d      	ldr	r3, [pc, #500]	; (8002ca0 <main+0x510>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe fb6b 	bl	8001188 <__aeabi_f2uiz>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	b29e      	uxth	r6, r3
 8002ab6:	4b79      	ldr	r3, [pc, #484]	; (8002c9c <main+0x50c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fb64 	bl	8001188 <__aeabi_f2uiz>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	fa1f f883 	uxth.w	r8, r3
 8002ac6:	4b74      	ldr	r3, [pc, #464]	; (8002c98 <main+0x508>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fb5c 	bl	8001188 <__aeabi_f2uiz>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4643      	mov	r3, r8
 8002ad8:	4632      	mov	r2, r6
 8002ada:	4629      	mov	r1, r5
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7ff fc6e 	bl	80023be <_ZN3ESC5driveEtttt>
 8002ae2:	e0b6      	b.n	8002c52 <main+0x4c2>

    }

    //--------------------------- DRONE_CONNECTION_LOST -----------------------------
    else if (state == DRONE_CONNECTION_LOST)
 8002ae4:	4b71      	ldr	r3, [pc, #452]	; (8002cac <main+0x51c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d175      	bne.n	8002bd8 <main+0x448>
    {
      /*In case connection is lost, decrement motor speeds slowly within 5 secs max */

      float delay = (thrust_cmd * 0.007); //get MAX 50ms delay from a 7200 thrust
 8002aec:	4b70      	ldr	r3, [pc, #448]	; (8002cb0 <main+0x520>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fc99 	bl	8000428 <__aeabi_f2d>
 8002af6:	a362      	add	r3, pc, #392	; (adr r3, 8002c80 <main+0x4f0>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f7fd fcec 	bl	80004d8 <__aeabi_dmul>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f7fd ffde 	bl	8000ac8 <__aeabi_d2f>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	607b      	str	r3, [r7, #4]
      float dec_speed = thrust_cmd *0.01 ;
 8002b10:	4b67      	ldr	r3, [pc, #412]	; (8002cb0 <main+0x520>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd fc87 	bl	8000428 <__aeabi_f2d>
 8002b1a:	a35b      	add	r3, pc, #364	; (adr r3, 8002c88 <main+0x4f8>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fcda 	bl	80004d8 <__aeabi_dmul>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f7fd ffcc 	bl	8000ac8 <__aeabi_d2f>
 8002b30:	4603      	mov	r3, r0
 8002b32:	603b      	str	r3, [r7, #0]
      for (int i = 0; i < 100; i++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b63      	cmp	r3, #99	; 0x63
 8002b3c:	dc48      	bgt.n	8002bd0 <main+0x440>
      {
        thrust_cmd -= dec_speed;
 8002b3e:	4b5c      	ldr	r3, [pc, #368]	; (8002cb0 <main+0x520>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6839      	ldr	r1, [r7, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe f813 	bl	8000b70 <__aeabi_fsub>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b58      	ldr	r3, [pc, #352]	; (8002cb0 <main+0x520>)
 8002b50:	601a      	str	r2, [r3, #0]
        if (thrust_cmd < PWM_MIN) thrust_cmd = PWM_MIN;
 8002b52:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <main+0x520>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4957      	ldr	r1, [pc, #348]	; (8002cb4 <main+0x524>)
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fab1 	bl	80010c0 <__aeabi_fcmplt>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <main+0x3da>
 8002b64:	4b52      	ldr	r3, [pc, #328]	; (8002cb0 <main+0x520>)
 8002b66:	4a53      	ldr	r2, [pc, #332]	; (8002cb4 <main+0x524>)
 8002b68:	601a      	str	r2, [r3, #0]
        escs.drive(thrust_cmd,thrust_cmd,thrust_cmd,thrust_cmd);
 8002b6a:	4b4f      	ldr	r3, [pc, #316]	; (8002ca8 <main+0x518>)
 8002b6c:	681c      	ldr	r4, [r3, #0]
 8002b6e:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <main+0x520>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fb08 	bl	8001188 <__aeabi_f2uiz>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	b29d      	uxth	r5, r3
 8002b7c:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <main+0x520>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fb01 	bl	8001188 <__aeabi_f2uiz>
 8002b86:	4603      	mov	r3, r0
 8002b88:	b29e      	uxth	r6, r3
 8002b8a:	4b49      	ldr	r3, [pc, #292]	; (8002cb0 <main+0x520>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fafa 	bl	8001188 <__aeabi_f2uiz>
 8002b94:	4603      	mov	r3, r0
 8002b96:	fa1f f883 	uxth.w	r8, r3
 8002b9a:	4b45      	ldr	r3, [pc, #276]	; (8002cb0 <main+0x520>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe faf2 	bl	8001188 <__aeabi_f2uiz>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4643      	mov	r3, r8
 8002bac:	4632      	mov	r2, r6
 8002bae:	4629      	mov	r1, r5
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7ff fc04 	bl	80023be <_ZN3ESC5driveEtttt>
        HAL_Delay((uint32_t) thrust_cmd);
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <main+0x520>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fae4 	bl	8001188 <__aeabi_f2uiz>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 f870 	bl	8003ca8 <HAL_Delay>
      for (int i = 0; i < 100; i++)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	e7b3      	b.n	8002b38 <main+0x3a8>
      }
      state = NONE; //do not enter in any state after this
 8002bd0:	4b36      	ldr	r3, [pc, #216]	; (8002cac <main+0x51c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e03c      	b.n	8002c52 <main+0x4c2>
    }

    //--------------------------------- DRONE_STOP ----------------------------------
    else if (state == DRONE_STOP)
 8002bd8:	4b34      	ldr	r3, [pc, #208]	; (8002cac <main+0x51c>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d12f      	bne.n	8002c40 <main+0x4b0>
    {
      //turn off the motors
      escs.drive(PWM_MIN, PWM_MIN, PWM_MIN, PWM_MIN);
 8002be0:	4b31      	ldr	r3, [pc, #196]	; (8002ca8 <main+0x518>)
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	f640 630f 	movw	r3, #3599	; 0xe0f
 8002bee:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002bf2:	f640 610f 	movw	r1, #3599	; 0xe0f
 8002bf6:	f7ff fbe2 	bl	80023be <_ZN3ESC5driveEtttt>
      //reset everything
      pid1_pitch_rate.reset();
 8002bfa:	482f      	ldr	r0, [pc, #188]	; (8002cb8 <main+0x528>)
 8002bfc:	f7ff fcf4 	bl	80025e8 <_ZN3PID5resetEv>
      pid1_roll_rate.reset();
 8002c00:	482e      	ldr	r0, [pc, #184]	; (8002cbc <main+0x52c>)
 8002c02:	f7ff fcf1 	bl	80025e8 <_ZN3PID5resetEv>
      pid1_yaw_rate.reset();
 8002c06:	482e      	ldr	r0, [pc, #184]	; (8002cc0 <main+0x530>)
 8002c08:	f7ff fcee 	bl	80025e8 <_ZN3PID5resetEv>
      pid2_pitch.reset();
 8002c0c:	482d      	ldr	r0, [pc, #180]	; (8002cc4 <main+0x534>)
 8002c0e:	f7ff fceb 	bl	80025e8 <_ZN3PID5resetEv>
      pid2_roll.reset();
 8002c12:	482d      	ldr	r0, [pc, #180]	; (8002cc8 <main+0x538>)
 8002c14:	f7ff fce8 	bl	80025e8 <_ZN3PID5resetEv>
      pitch_setpoint = 0.0f;
 8002c18:	4b2c      	ldr	r3, [pc, #176]	; (8002ccc <main+0x53c>)
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
      roll_setpoint = 0.0f;
 8002c20:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <main+0x540>)
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
      yaw_setpoint = 0.0f;
 8002c28:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <main+0x544>)
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
      thrust_cmd = 0.0f;
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <main+0x520>)
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
      state = NONE; //do not enter in any state after this
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <main+0x51c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e008      	b.n	8002c52 <main+0x4c2>
    }

    //-------------------------- DRONE_CALIBRATE_ESCS -------------------------------
    //TODO
    else if (state == DRONE_CALIBRATE_ESCS)
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <main+0x51c>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d104      	bne.n	8002c52 <main+0x4c2>
    {
      calibrateESCS();
 8002c48:	f000 f9f2 	bl	8003030 <_Z13calibrateESCSv>
      state = NONE; //do not enter in any state after this
 8002c4c:	4b17      	ldr	r3, [pc, #92]	; (8002cac <main+0x51c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
    }
    
    //-------------------------------------------------------------------------------
    // Controller frequency to 250HZ
    while ((micros() - loop_time) < 4000);
 8002c52:	f000 fd2f 	bl	80036b4 <micros>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <main+0x548>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002c62:	4293      	cmp	r3, r2
 8002c64:	bf94      	ite	ls
 8002c66:	2301      	movls	r3, #1
 8002c68:	2300      	movhi	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d000      	beq.n	8002c72 <main+0x4e2>
 8002c70:	e7ef      	b.n	8002c52 <main+0x4c2>
    loop_time = micros();
 8002c72:	f000 fd1f 	bl	80036b4 <micros>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4a17      	ldr	r2, [pc, #92]	; (8002cd8 <main+0x548>)
 8002c7a:	6013      	str	r3, [r2, #0]
  }
 8002c7c:	e593      	b.n	80027a6 <main+0x16>
 8002c7e:	bf00      	nop
 8002c80:	3126e979 	.word	0x3126e979
 8002c84:	3f7cac08 	.word	0x3f7cac08
 8002c88:	47ae147b 	.word	0x47ae147b
 8002c8c:	3f847ae1 	.word	0x3f847ae1
 8002c90:	200003e8 	.word	0x200003e8
 8002c94:	40010c00 	.word	0x40010c00
 8002c98:	200004e8 	.word	0x200004e8
 8002c9c:	200004e4 	.word	0x200004e4
 8002ca0:	200004e0 	.word	0x200004e0
 8002ca4:	200004dc 	.word	0x200004dc
 8002ca8:	200003ec 	.word	0x200003ec
 8002cac:	20000370 	.word	0x20000370
 8002cb0:	20000004 	.word	0x20000004
 8002cb4:	4560f000 	.word	0x4560f000
 8002cb8:	2000040c 	.word	0x2000040c
 8002cbc:	20000434 	.word	0x20000434
 8002cc0:	2000045c 	.word	0x2000045c
 8002cc4:	2000048c 	.word	0x2000048c
 8002cc8:	200004b4 	.word	0x200004b4
 8002ccc:	200003f4 	.word	0x200003f4
 8002cd0:	200003f8 	.word	0x200003f8
 8002cd4:	200003fc 	.word	0x200003fc
 8002cd8:	20000364 	.word	0x20000364

08002cdc <_Z18SystemClock_Configv>:



//================================ Config Proceadures ===============================
void SystemClock_Config(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b090      	sub	sp, #64	; 0x40
 8002ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ce2:	f107 0318 	add.w	r3, r7, #24
 8002ce6:	2228      	movs	r2, #40	; 0x28
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f005 fd12 	bl	8008714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf0:	1d3b      	adds	r3, r7, #4
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
 8002cfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d10:	2302      	movs	r3, #2
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d1a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d20:	f107 0318 	add.w	r3, r7, #24
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 fda3 	bl	8005870 <HAL_RCC_OscConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002d3a:	f000 f96d 	bl	8003018 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d3e:	230f      	movs	r3, #15
 8002d40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d42:	2302      	movs	r3, #2
 8002d44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002d50:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002d54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	2102      	movs	r1, #2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 f808 	bl	8005d70 <HAL_RCC_ClockConfig>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bf14      	ite	ne
 8002d66:	2301      	movne	r3, #1
 8002d68:	2300      	moveq	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 8002d70:	f000 f952 	bl	8003018 <Error_Handler>
  }
}
 8002d74:	bf00      	nop
 8002d76:	3740      	adds	r7, #64	; 0x40
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <_ZL19MX_USART1_UART_Initv>:

static void MX_USART1_UART_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002d80:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d82:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002da2:	220c      	movs	r2, #12
 8002da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002db2:	4807      	ldr	r0, [pc, #28]	; (8002dd0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002db4:	f004 f814 	bl	8006de0 <HAL_UART_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002dc8:	f000 f926 	bl	8003018 <Error_Handler>
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000374 	.word	0x20000374
 8002dd4:	40013800 	.word	0x40013800

08002dd8 <HAL_UART_RxCpltCallback>:

// UART interrupt handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  // LOG("IT: %c\n",(char) uart_data);
  phelper.loadByte((char)uart_data);
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_UART_RxCpltCallback+0x2c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <HAL_UART_RxCpltCallback+0x30>)
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fb54 	bl	8001498 <_ZN11ProtoHelper8loadByteEc>
  HAL_UART_Receive_IT(&huart1,&uart_data, 1);
 8002df0:	2201      	movs	r2, #1
 8002df2:	4905      	ldr	r1, [pc, #20]	; (8002e08 <HAL_UART_RxCpltCallback+0x30>)
 8002df4:	4805      	ldr	r0, [pc, #20]	; (8002e0c <HAL_UART_RxCpltCallback+0x34>)
 8002df6:	f004 f840 	bl	8006e7a <HAL_UART_Receive_IT>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200003f0 	.word	0x200003f0
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000374 	.word	0x20000374

08002e10 <_ZL12MX_GPIO_Initv>:

static void MX_GPIO_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e24:	4b4b      	ldr	r3, [pc, #300]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	4a4a      	ldr	r2, [pc, #296]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e2a:	f043 0310 	orr.w	r3, r3, #16
 8002e2e:	6193      	str	r3, [r2, #24]
 8002e30:	4b48      	ldr	r3, [pc, #288]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e3c:	4b45      	ldr	r3, [pc, #276]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4a44      	ldr	r2, [pc, #272]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e42:	f043 0320 	orr.w	r3, r3, #32
 8002e46:	6193      	str	r3, [r2, #24]
 8002e48:	4b42      	ldr	r3, [pc, #264]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e54:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4a3e      	ldr	r2, [pc, #248]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6193      	str	r3, [r2, #24]
 8002e60:	4b3c      	ldr	r3, [pc, #240]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6c:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	4a38      	ldr	r2, [pc, #224]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e72:	f043 0308 	orr.w	r3, r3, #8
 8002e76:	6193      	str	r3, [r2, #24]
 8002e78:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <_ZL12MX_GPIO_Initv+0x144>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002e84:	2200      	movs	r2, #0
 8002e86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e8a:	4833      	ldr	r0, [pc, #204]	; (8002f58 <_ZL12MX_GPIO_Initv+0x148>)
 8002e8c:	f001 fca7 	bl	80047de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLUE_LED, GPIO_PIN_RESET);
 8002e90:	2200      	movs	r2, #0
 8002e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e96:	4831      	ldr	r0, [pc, #196]	; (8002f5c <_ZL12MX_GPIO_Initv+0x14c>)
 8002e98:	f001 fca1 	bl	80047de <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RED_LED, GPIO_PIN_RESET);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ea2:	482e      	ldr	r0, [pc, #184]	; (8002f5c <_ZL12MX_GPIO_Initv+0x14c>)
 8002ea4:	f001 fc9b 	bl	80047de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eba:	f107 0310 	add.w	r3, r7, #16
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4825      	ldr	r0, [pc, #148]	; (8002f58 <_ZL12MX_GPIO_Initv+0x148>)
 8002ec2:	f001 faf1 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 (BLUE_LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	4619      	mov	r1, r3
 8002ede:	481f      	ldr	r0, [pc, #124]	; (8002f5c <_ZL12MX_GPIO_Initv+0x14c>)
 8002ee0:	f001 fae2 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 (RED_LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eea:	2301      	movs	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef6:	f107 0310 	add.w	r3, r7, #16
 8002efa:	4619      	mov	r1, r3
 8002efc:	4817      	ldr	r0, [pc, #92]	; (8002f5c <_ZL12MX_GPIO_Initv+0x14c>)
 8002efe:	f001 fad3 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 (BTN) */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2302      	movs	r3, #2
 8002f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4810      	ldr	r0, [pc, #64]	; (8002f5c <_ZL12MX_GPIO_Initv+0x14c>)
 8002f1c:	f001 fac4 	bl	80044a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <_ZL12MX_GPIO_Initv+0x150>)
 8002f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2e:	f107 0310 	add.w	r3, r7, #16
 8002f32:	4619      	mov	r1, r3
 8002f34:	480b      	ldr	r0, [pc, #44]	; (8002f64 <_ZL12MX_GPIO_Initv+0x154>)
 8002f36:	f001 fab7 	bl	80044a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2017      	movs	r0, #23
 8002f40:	f001 f9cb 	bl	80042da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f44:	2017      	movs	r0, #23
 8002f46:	f001 f9e4 	bl	8004312 <HAL_NVIC_EnableIRQ>

}
 8002f4a:	bf00      	nop
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40011000 	.word	0x40011000
 8002f5c:	40010c00 	.word	0x40010c00
 8002f60:	10210000 	.word	0x10210000
 8002f64:	40010800 	.word	0x40010800

08002f68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	80fb      	strh	r3, [r7, #6]
	state = DRONE_CONNECTION_LOST;
 8002f72:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002f74:	2203      	movs	r2, #3
 8002f76:	701a      	strb	r2, [r3, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000370 	.word	0x20000370

08002f88 <_ZL12MX_ADC1_Initv>:


static void MX_ADC1_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <_ZL12MX_ADC1_Initv+0x88>)
 8002f9a:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <_ZL12MX_ADC1_Initv+0x8c>)
 8002f9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <_ZL12MX_ADC1_Initv+0x88>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <_ZL12MX_ADC1_Initv+0x88>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <_ZL12MX_ADC1_Initv+0x88>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fb0:	4b17      	ldr	r3, [pc, #92]	; (8003010 <_ZL12MX_ADC1_Initv+0x88>)
 8002fb2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002fb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fb8:	4b15      	ldr	r3, [pc, #84]	; (8003010 <_ZL12MX_ADC1_Initv+0x88>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002fbe:	4b14      	ldr	r3, [pc, #80]	; (8003010 <_ZL12MX_ADC1_Initv+0x88>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) Error_Handler();
 8002fc4:	4812      	ldr	r0, [pc, #72]	; (8003010 <_ZL12MX_ADC1_Initv+0x88>)
 8002fc6:	f000 fe93 	bl	8003cf0 <HAL_ADC_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf14      	ite	ne
 8002fd0:	2301      	movne	r3, #1
 8002fd2:	2300      	moveq	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <_ZL12MX_ADC1_Initv+0x56>
 8002fda:	f000 f81d 	bl	8003018 <Error_Handler>
  /** Configure Regular Channel*/
  sConfig.Channel = ADC_CHANNEL_9;
 8002fde:	2309      	movs	r3, #9
 8002fe0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)Error_Handler();
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	4619      	mov	r1, r3
 8002fee:	4808      	ldr	r0, [pc, #32]	; (8003010 <_ZL12MX_ADC1_Initv+0x88>)
 8002ff0:	f000 ff62 	bl	8003eb8 <HAL_ADC_ConfigChannel>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <_ZL12MX_ADC1_Initv+0x80>
 8003004:	f000 f808 	bl	8003018 <Error_Handler>
  
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	200003b8 	.word	0x200003b8
 8003014:	40012400 	.word	0x40012400

08003018 <Error_Handler>:

void Error_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  state = DRONE_STOP;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <Error_Handler+0x14>)
 800301e:	2202      	movs	r2, #2
 8003020:	701a      	strb	r2, [r3, #0]
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000370 	.word	0x20000370

08003030 <_Z13calibrateESCSv>:

//================================== My Proceadures =================================

void calibrateESCS(){
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af02      	add	r7, sp, #8
   // ESC CALIBRATION
   // KEEP MOTORS DISCONNECTED FROM BATTERY
   // CLICK THE BUTTON
   HAL_GPIO_WritePin(BLUE_LED, GPIO_PIN_SET);// indicate calibration start
 8003036:	2201      	movs	r2, #1
 8003038:	f44f 7180 	mov.w	r1, #256	; 0x100
 800303c:	482a      	ldr	r0, [pc, #168]	; (80030e8 <_Z13calibrateESCSv+0xb8>)
 800303e:	f001 fbce 	bl	80047de <HAL_GPIO_WritePin>
   while(HAL_GPIO_ReadPin(BUTTON_PIN) != GPIO_PIN_SET);
 8003042:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003046:	4828      	ldr	r0, [pc, #160]	; (80030e8 <_Z13calibrateESCSv+0xb8>)
 8003048:	f001 fbb2 	bl	80047b0 <HAL_GPIO_ReadPin>
 800304c:	4603      	mov	r3, r0
 800304e:	2b01      	cmp	r3, #1
 8003050:	bf14      	ite	ne
 8003052:	2301      	movne	r3, #1
 8003054:	2300      	moveq	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d000      	beq.n	800305e <_Z13calibrateESCSv+0x2e>
 800305c:	e7f1      	b.n	8003042 <_Z13calibrateESCSv+0x12>
   escs.drive(PWM_MAX, PWM_MAX, PWM_MAX, PWM_MAX);
 800305e:	4b23      	ldr	r3, [pc, #140]	; (80030ec <_Z13calibrateESCSv+0xbc>)
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	f641 431f 	movw	r3, #7199	; 0x1c1f
 800306c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003070:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8003074:	f7ff f9a3 	bl	80023be <_ZN3ESC5driveEtttt>
   HAL_GPIO_WritePin(RED_LED, GPIO_PIN_SET);// indicate to click the btn again to continue calibration
 8003078:	2201      	movs	r2, #1
 800307a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800307e:	481a      	ldr	r0, [pc, #104]	; (80030e8 <_Z13calibrateESCSv+0xb8>)
 8003080:	f001 fbad 	bl	80047de <HAL_GPIO_WritePin>
   HAL_Delay(1000);
 8003084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003088:	f000 fe0e 	bl	8003ca8 <HAL_Delay>

   // NOW CONNECT MOTORS TO BATTERY
   // WAIT FOR THE SPECIAL BEEPS
   // CLICK THE BUTTON
   while(HAL_GPIO_ReadPin(BUTTON_PIN) != GPIO_PIN_SET);
 800308c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003090:	4815      	ldr	r0, [pc, #84]	; (80030e8 <_Z13calibrateESCSv+0xb8>)
 8003092:	f001 fb8d 	bl	80047b0 <HAL_GPIO_ReadPin>
 8003096:	4603      	mov	r3, r0
 8003098:	2b01      	cmp	r3, #1
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d000      	beq.n	80030a8 <_Z13calibrateESCSv+0x78>
 80030a6:	e7f1      	b.n	800308c <_Z13calibrateESCSv+0x5c>
   escs.drive(PWM_MIN, PWM_MIN, PWM_MIN, PWM_MIN);
 80030a8:	4b10      	ldr	r3, [pc, #64]	; (80030ec <_Z13calibrateESCSv+0xbc>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	f640 630f 	movw	r3, #3599	; 0xe0f
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	f640 630f 	movw	r3, #3599	; 0xe0f
 80030b6:	f640 620f 	movw	r2, #3599	; 0xe0f
 80030ba:	f640 610f 	movw	r1, #3599	; 0xe0f
 80030be:	f7ff f97e 	bl	80023be <_ZN3ESC5driveEtttt>
   HAL_Delay(1000);
 80030c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030c6:	f000 fdef 	bl	8003ca8 <HAL_Delay>
  
   // indicate calibration end
   HAL_GPIO_WritePin(RED_LED, GPIO_PIN_RESET);
 80030ca:	2200      	movs	r2, #0
 80030cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030d0:	4805      	ldr	r0, [pc, #20]	; (80030e8 <_Z13calibrateESCSv+0xb8>)
 80030d2:	f001 fb84 	bl	80047de <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(BLUE_LED, GPIO_PIN_RESET);
 80030d6:	2200      	movs	r2, #0
 80030d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030dc:	4802      	ldr	r0, [pc, #8]	; (80030e8 <_Z13calibrateESCSv+0xb8>)
 80030de:	f001 fb7e 	bl	80047de <HAL_GPIO_WritePin>
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40010c00 	.word	0x40010c00
 80030ec:	200003ec 	.word	0x200003ec

080030f0 <_Z17constrainMotorValf>:

int constrainMotorVal(float val)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if (val > PWM_MAX)
 80030f8:	4914      	ldr	r1, [pc, #80]	; (800314c <_Z17constrainMotorValf+0x5c>)
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fffe 	bl	80010fc <__aeabi_fcmpgt>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <_Z17constrainMotorValf+0x1c>
    val = PWM_MAX;
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <_Z17constrainMotorValf+0x5c>)
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	e017      	b.n	800313c <_Z17constrainMotorValf+0x4c>
  else if (val <= PWM_MIN + pwm_operating)
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <_Z17constrainMotorValf+0x60>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f603 630f 	addw	r3, r3, #3599	; 0xe0f
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd fde1 	bl	8000cdc <__aeabi_i2f>
 800311a:	4603      	mov	r3, r0
 800311c:	4619      	mov	r1, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd ffd8 	bl	80010d4 <__aeabi_fcmple>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <_Z17constrainMotorValf+0x4c>
    val = PWM_MIN + pwm_operating; // add 180 or other val to not stop motors while in flight
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <_Z17constrainMotorValf+0x60>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f603 630f 	addw	r3, r3, #3599	; 0xe0f
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fdd2 	bl	8000cdc <__aeabi_i2f>
 8003138:	4603      	mov	r3, r0
 800313a:	607b      	str	r3, [r7, #4]
  return (int) val;
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fd fffd 	bl	800113c <__aeabi_f2iz>
 8003142:	4603      	mov	r3, r0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	45e0f800 	.word	0x45e0f800
 8003150:	2000036c 	.word	0x2000036c
 8003154:	00000000 	.word	0x00000000

08003158 <_Z12init_batteryv>:

void init_battery()
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  //The STM32 uses a 12 bit analog to digital converter.
  //analogRead => 0 = 0V ..... 4095 = 3.3V
  //The voltage divider (1k & 10k) is 1:11.
  //analogRead => 0 = 0V ..... 1252 = 11.1 V ..... 4095 = 36.3V(not needed)
  //11.1 / 1252 =  1/ 112.81
  battery_voltage = (float)HAL_ADC_GetValue(&hadc1) / 112.81;
 800315c:	4810      	ldr	r0, [pc, #64]	; (80031a0 <_Z12init_batteryv+0x48>)
 800315e:	f000 fe9f 	bl	8003ea0 <HAL_ADC_GetValue>
 8003162:	4603      	mov	r3, r0
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd fdb5 	bl	8000cd4 <__aeabi_ui2f>
 800316a:	4603      	mov	r3, r0
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f95b 	bl	8000428 <__aeabi_f2d>
 8003172:	a309      	add	r3, pc, #36	; (adr r3, 8003198 <_Z12init_batteryv+0x40>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f7fd fad8 	bl	800072c <__aeabi_ddiv>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	f7fd fca0 	bl	8000ac8 <__aeabi_d2f>
 8003188:	4603      	mov	r3, r0
 800318a:	4a06      	ldr	r2, [pc, #24]	; (80031a4 <_Z12init_batteryv+0x4c>)
 800318c:	6013      	str	r3, [r2, #0]
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	f3af 8000 	nop.w
 8003198:	0a3d70a4 	.word	0x0a3d70a4
 800319c:	405c33d7 	.word	0x405c33d7
 80031a0:	200003b8 	.word	0x200003b8
 80031a4:	20000008 	.word	0x20000008

080031a8 <_Z27read_battery_and_compensateRfS_S_S_>:

void read_battery_and_compensate(float& v1, float& v2, float& v3, float& v4)
{
 80031a8:	b5b0      	push	{r4, r5, r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  //analogRead => 0 = 0V ..... 4095 = 3.3V
  //The voltage divider (1k & 10k) is 1:11.
  //analogRead => 0 = 0V ..... 1252 = 11.1 V ..... 4095 = 36.3V(not needed)
  //11.1 / 1252 =  1/ 112.81.
  //410.1 = 112.81 / 0.08
  battery_voltage = battery_voltage * 0.82 + (float) HAL_ADC_GetValue(&hadc1) / 1410.1;
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <_Z27read_battery_and_compensateRfS_S_S_+0xa0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f934 	bl	8000428 <__aeabi_f2d>
 80031c0:	a31d      	add	r3, pc, #116	; (adr r3, 8003238 <_Z27read_battery_and_compensateRfS_S_S_+0x90>)
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f7fd f987 	bl	80004d8 <__aeabi_dmul>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4614      	mov	r4, r2
 80031d0:	461d      	mov	r5, r3
 80031d2:	481e      	ldr	r0, [pc, #120]	; (800324c <_Z27read_battery_and_compensateRfS_S_S_+0xa4>)
 80031d4:	f000 fe64 	bl	8003ea0 <HAL_ADC_GetValue>
 80031d8:	4603      	mov	r3, r0
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd fd7a 	bl	8000cd4 <__aeabi_ui2f>
 80031e0:	4603      	mov	r3, r0
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f920 	bl	8000428 <__aeabi_f2d>
 80031e8:	a315      	add	r3, pc, #84	; (adr r3, 8003240 <_Z27read_battery_and_compensateRfS_S_S_+0x98>)
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	f7fd fa9d 	bl	800072c <__aeabi_ddiv>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4620      	mov	r0, r4
 80031f8:	4629      	mov	r1, r5
 80031fa:	f7fc ffb7 	bl	800016c <__adddf3>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	f7fd fc5f 	bl	8000ac8 <__aeabi_d2f>
 800320a:	4603      	mov	r3, r0
 800320c:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <_Z27read_battery_and_compensateRfS_S_S_+0xa0>)
 800320e:	6013      	str	r3, [r2, #0]
  float scale = (11.1f - battery_voltage)/35.0f;
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <_Z27read_battery_and_compensateRfS_S_S_+0xa0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4619      	mov	r1, r3
 8003216:	480e      	ldr	r0, [pc, #56]	; (8003250 <_Z27read_battery_and_compensateRfS_S_S_+0xa8>)
 8003218:	f7fd fcaa 	bl	8000b70 <__aeabi_fsub>
 800321c:	4603      	mov	r3, r0
 800321e:	490d      	ldr	r1, [pc, #52]	; (8003254 <_Z27read_battery_and_compensateRfS_S_S_+0xac>)
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd fe63 	bl	8000eec <__aeabi_fdiv>
 8003226:	4603      	mov	r3, r0
 8003228:	617b      	str	r3, [r7, #20]
  //TODO: enable this later
  // v1 += v1* scale;
  // v2 += v2* scale;
  // v3 += v3* scale;
  // v4 += v4* scale;
}
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bdb0      	pop	{r4, r5, r7, pc}
 8003232:	bf00      	nop
 8003234:	f3af 8000 	nop.w
 8003238:	a3d70a3d 	.word	0xa3d70a3d
 800323c:	3fea3d70 	.word	0x3fea3d70
 8003240:	66666666 	.word	0x66666666
 8003244:	40960866 	.word	0x40960866
 8003248:	20000008 	.word	0x20000008
 800324c:	200003b8 	.word	0x200003b8
 8003250:	4131999a 	.word	0x4131999a
 8003254:	420c0000 	.word	0x420c0000

08003258 <_Z15commandCallbackP7Command>:

//Proto+ callback
void commandCallback(Command* command){
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  
  cmd = command->getNameAsChar();
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7fe f83d 	bl	80012e0 <_ZN7Command13getNameAsCharEv>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	4b8d      	ldr	r3, [pc, #564]	; (80034a0 <_Z15commandCallbackP7Command+0x248>)
 800326c:	701a      	strb	r2, [r3, #0]

  switch (cmd)
 800326e:	4b8c      	ldr	r3, [pc, #560]	; (80034a0 <_Z15commandCallbackP7Command+0x248>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	3b41      	subs	r3, #65	; 0x41
 8003274:	2b28      	cmp	r3, #40	; 0x28
 8003276:	f200 810e 	bhi.w	8003496 <_Z15commandCallbackP7Command+0x23e>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <_Z15commandCallbackP7Command+0x28>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	0800335d 	.word	0x0800335d
 8003284:	08003391 	.word	0x08003391
 8003288:	080033c5 	.word	0x080033c5
 800328c:	080033f9 	.word	0x080033f9
 8003290:	08003425 	.word	0x08003425
 8003294:	08003451 	.word	0x08003451
 8003298:	08003497 	.word	0x08003497
 800329c:	08003497 	.word	0x08003497
 80032a0:	08003497 	.word	0x08003497
 80032a4:	08003497 	.word	0x08003497
 80032a8:	08003497 	.word	0x08003497
 80032ac:	08003497 	.word	0x08003497
 80032b0:	08003497 	.word	0x08003497
 80032b4:	08003497 	.word	0x08003497
 80032b8:	0800347d 	.word	0x0800347d
 80032bc:	08003495 	.word	0x08003495
 80032c0:	08003497 	.word	0x08003497
 80032c4:	08003495 	.word	0x08003495
 80032c8:	0800332d 	.word	0x0800332d
 80032cc:	0800333d 	.word	0x0800333d
 80032d0:	08003497 	.word	0x08003497
 80032d4:	08003497 	.word	0x08003497
 80032d8:	08003497 	.word	0x08003497
 80032dc:	08003335 	.word	0x08003335
 80032e0:	08003497 	.word	0x08003497
 80032e4:	08003495 	.word	0x08003495
 80032e8:	08003497 	.word	0x08003497
 80032ec:	08003497 	.word	0x08003497
 80032f0:	08003497 	.word	0x08003497
 80032f4:	08003497 	.word	0x08003497
 80032f8:	08003497 	.word	0x08003497
 80032fc:	08003497 	.word	0x08003497
 8003300:	08003497 	.word	0x08003497
 8003304:	08003497 	.word	0x08003497
 8003308:	08003497 	.word	0x08003497
 800330c:	08003497 	.word	0x08003497
 8003310:	08003497 	.word	0x08003497
 8003314:	08003497 	.word	0x08003497
 8003318:	08003497 	.word	0x08003497
 800331c:	08003497 	.word	0x08003497
 8003320:	08003325 	.word	0x08003325
  {

  case 'i': //handshake from Proto+ that UART connection is well established
    init_drone = true;
 8003324:	4b5f      	ldr	r3, [pc, #380]	; (80034a4 <_Z15commandCallbackP7Command+0x24c>)
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
    break;
 800332a:	e0b4      	b.n	8003496 <_Z15commandCallbackP7Command+0x23e>

  case 'S': //start the drone
    state = DRONE_FLY;
 800332c:	4b5e      	ldr	r3, [pc, #376]	; (80034a8 <_Z15commandCallbackP7Command+0x250>)
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
    // pitch_setpoint = imu.angle_pitch;
    // pitch_roll = imu.angle_roll;
    break;    
 8003332:	e0b0      	b.n	8003496 <_Z15commandCallbackP7Command+0x23e>

  case 'X': //stop the drone
    state = DRONE_STOP;
 8003334:	4b5c      	ldr	r3, [pc, #368]	; (80034a8 <_Z15commandCallbackP7Command+0x250>)
 8003336:	2202      	movs	r2, #2
 8003338:	701a      	strb	r2, [r3, #0]
    break;
 800333a:	e0ac      	b.n	8003496 <_Z15commandCallbackP7Command+0x23e>
    
  case 'T': //Thrust command
    thrust_cmd = command->getParam(0)->getIntValue();
 800333c:	2100      	movs	r1, #0
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd ffef 	bl	8001322 <_ZN7Command8getParamEh>
 8003344:	4603      	mov	r3, r0
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe f831 	bl	80013ae <_ZN9Parameter11getIntValueEv>
 800334c:	4603      	mov	r3, r0
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd fcc4 	bl	8000cdc <__aeabi_i2f>
 8003354:	4603      	mov	r3, r0
 8003356:	4a55      	ldr	r2, [pc, #340]	; (80034ac <_Z15commandCallbackP7Command+0x254>)
 8003358:	6013      	str	r3, [r2, #0]
    // escs.drive(cmd_val, cmd_val, cmd_val, cmd_val);
    break;
 800335a:	e09c      	b.n	8003496 <_Z15commandCallbackP7Command+0x23e>
  case 'Z': //yaw command (IN: degrees/sec)
    /*CODE*/
    break;

  case 'A': //kp (PITCH & ROll) setting 
    pid1_pitch_rate.kp = pid1_roll_rate.kp = command->getParam(0)->getIntValue()/100.0f;
 800335c:	2100      	movs	r1, #0
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd ffdf 	bl	8001322 <_ZN7Command8getParamEh>
 8003364:	4603      	mov	r3, r0
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe f821 	bl	80013ae <_ZN9Parameter11getIntValueEv>
 800336c:	4603      	mov	r3, r0
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd fcb4 	bl	8000cdc <__aeabi_i2f>
 8003374:	4603      	mov	r3, r0
 8003376:	494e      	ldr	r1, [pc, #312]	; (80034b0 <_Z15commandCallbackP7Command+0x258>)
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fdb7 	bl	8000eec <__aeabi_fdiv>
 800337e:	4603      	mov	r3, r0
 8003380:	461a      	mov	r2, r3
 8003382:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <_Z15commandCallbackP7Command+0x25c>)
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	4b4b      	ldr	r3, [pc, #300]	; (80034b4 <_Z15commandCallbackP7Command+0x25c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a4b      	ldr	r2, [pc, #300]	; (80034b8 <_Z15commandCallbackP7Command+0x260>)
 800338c:	6013      	str	r3, [r2, #0]
    break;
 800338e:	e082      	b.n	8003496 <_Z15commandCallbackP7Command+0x23e>

  case 'B': //ki (PITCH & ROll) setting
    pid1_pitch_rate.ki = pid1_roll_rate.ki = command->getParam(0)->getIntValue()/1000.0f;
 8003390:	2100      	movs	r1, #0
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd ffc5 	bl	8001322 <_ZN7Command8getParamEh>
 8003398:	4603      	mov	r3, r0
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe f807 	bl	80013ae <_ZN9Parameter11getIntValueEv>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd fc9a 	bl	8000cdc <__aeabi_i2f>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4944      	ldr	r1, [pc, #272]	; (80034bc <_Z15commandCallbackP7Command+0x264>)
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd fd9d 	bl	8000eec <__aeabi_fdiv>
 80033b2:	4603      	mov	r3, r0
 80033b4:	461a      	mov	r2, r3
 80033b6:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <_Z15commandCallbackP7Command+0x25c>)
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	4b3e      	ldr	r3, [pc, #248]	; (80034b4 <_Z15commandCallbackP7Command+0x25c>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4a3e      	ldr	r2, [pc, #248]	; (80034b8 <_Z15commandCallbackP7Command+0x260>)
 80033c0:	6053      	str	r3, [r2, #4]
    break;
 80033c2:	e068      	b.n	8003496 <_Z15commandCallbackP7Command+0x23e>

  case 'C': //kd (PITCH & ROll) setting
    pid1_pitch_rate.kd = pid1_roll_rate.kd = command->getParam(0)->getIntValue()/10.0f;
 80033c4:	2100      	movs	r1, #0
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fd ffab 	bl	8001322 <_ZN7Command8getParamEh>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fd ffed 	bl	80013ae <_ZN9Parameter11getIntValueEv>
 80033d4:	4603      	mov	r3, r0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd fc80 	bl	8000cdc <__aeabi_i2f>
 80033dc:	4603      	mov	r3, r0
 80033de:	4938      	ldr	r1, [pc, #224]	; (80034c0 <_Z15commandCallbackP7Command+0x268>)
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd fd83 	bl	8000eec <__aeabi_fdiv>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <_Z15commandCallbackP7Command+0x25c>)
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <_Z15commandCallbackP7Command+0x25c>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	4a31      	ldr	r2, [pc, #196]	; (80034b8 <_Z15commandCallbackP7Command+0x260>)
 80033f4:	6093      	str	r3, [r2, #8]
    break;
 80033f6:	e04e      	b.n	8003496 <_Z15commandCallbackP7Command+0x23e>

  case 'D': //kp (YAW) setting 
    pid1_yaw_rate.kp = command->getParam(0)->getIntValue()/100.0f;
 80033f8:	2100      	movs	r1, #0
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fd ff91 	bl	8001322 <_ZN7Command8getParamEh>
 8003400:	4603      	mov	r3, r0
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd ffd3 	bl	80013ae <_ZN9Parameter11getIntValueEv>
 8003408:	4603      	mov	r3, r0
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd fc66 	bl	8000cdc <__aeabi_i2f>
 8003410:	4603      	mov	r3, r0
 8003412:	4927      	ldr	r1, [pc, #156]	; (80034b0 <_Z15commandCallbackP7Command+0x258>)
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd fd69 	bl	8000eec <__aeabi_fdiv>
 800341a:	4603      	mov	r3, r0
 800341c:	461a      	mov	r2, r3
 800341e:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <_Z15commandCallbackP7Command+0x26c>)
 8003420:	601a      	str	r2, [r3, #0]
    break;
 8003422:	e038      	b.n	8003496 <_Z15commandCallbackP7Command+0x23e>

  case 'E': //ki (YAW) setting
    pid1_yaw_rate.ki = command->getParam(0)->getIntValue()/1000.0f;
 8003424:	2100      	movs	r1, #0
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd ff7b 	bl	8001322 <_ZN7Command8getParamEh>
 800342c:	4603      	mov	r3, r0
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd ffbd 	bl	80013ae <_ZN9Parameter11getIntValueEv>
 8003434:	4603      	mov	r3, r0
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fc50 	bl	8000cdc <__aeabi_i2f>
 800343c:	4603      	mov	r3, r0
 800343e:	491f      	ldr	r1, [pc, #124]	; (80034bc <_Z15commandCallbackP7Command+0x264>)
 8003440:	4618      	mov	r0, r3
 8003442:	f7fd fd53 	bl	8000eec <__aeabi_fdiv>
 8003446:	4603      	mov	r3, r0
 8003448:	461a      	mov	r2, r3
 800344a:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <_Z15commandCallbackP7Command+0x26c>)
 800344c:	605a      	str	r2, [r3, #4]
    break;
 800344e:	e022      	b.n	8003496 <_Z15commandCallbackP7Command+0x23e>

  case 'F': //kd (YAW) setting
    pid1_yaw_rate.kd = command->getParam(0)->getIntValue()/100.0f;
 8003450:	2100      	movs	r1, #0
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd ff65 	bl	8001322 <_ZN7Command8getParamEh>
 8003458:	4603      	mov	r3, r0
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd ffa7 	bl	80013ae <_ZN9Parameter11getIntValueEv>
 8003460:	4603      	mov	r3, r0
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fc3a 	bl	8000cdc <__aeabi_i2f>
 8003468:	4603      	mov	r3, r0
 800346a:	4911      	ldr	r1, [pc, #68]	; (80034b0 <_Z15commandCallbackP7Command+0x258>)
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd fd3d 	bl	8000eec <__aeabi_fdiv>
 8003472:	4603      	mov	r3, r0
 8003474:	461a      	mov	r2, r3
 8003476:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <_Z15commandCallbackP7Command+0x26c>)
 8003478:	609a      	str	r2, [r3, #8]
    break;
 800347a:	e00c      	b.n	8003496 <_Z15commandCallbackP7Command+0x23e>

  case 'O':
	pwm_operating = command->getParam(0)->getIntValue();
 800347c:	2100      	movs	r1, #0
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd ff4f 	bl	8001322 <_ZN7Command8getParamEh>
 8003484:	4603      	mov	r3, r0
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd ff91 	bl	80013ae <_ZN9Parameter11getIntValueEv>
 800348c:	4603      	mov	r3, r0
 800348e:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <_Z15commandCallbackP7Command+0x270>)
 8003490:	6013      	str	r3, [r2, #0]
    break;
 8003492:	e000      	b.n	8003496 <_Z15commandCallbackP7Command+0x23e>
    break;
 8003494:	bf00      	nop

  }

  
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000360 	.word	0x20000360
 80034a4:	20000368 	.word	0x20000368
 80034a8:	20000370 	.word	0x20000370
 80034ac:	20000004 	.word	0x20000004
 80034b0:	42c80000 	.word	0x42c80000
 80034b4:	20000434 	.word	0x20000434
 80034b8:	2000040c 	.word	0x2000040c
 80034bc:	447a0000 	.word	0x447a0000
 80034c0:	41200000 	.word	0x41200000
 80034c4:	2000045c 	.word	0x2000045c
 80034c8:	2000036c 	.word	0x2000036c

080034cc <_Z41__static_initialization_and_destruction_0ii>:
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d147      	bne.n	800356c <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d142      	bne.n	800356c <_Z41__static_initialization_and_destruction_0ii+0xa0>
I2CIMU &imu = I2CIMU::getInstance();
 80034e6:	f7fe f92d 	bl	8001744 <_ZN6I2CIMU11getInstanceEv>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4a21      	ldr	r2, [pc, #132]	; (8003574 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80034ee:	6013      	str	r3, [r2, #0]
ESC &escs = ESC::getInstance();
 80034f0:	f7fe fe3c 	bl	800216c <_ZN3ESC11getInstanceEv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4a20      	ldr	r2, [pc, #128]	; (8003578 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80034f8:	6013      	str	r3, [r2, #0]
ProtoHelper &phelper = ProtoHelper::getInstance();
 80034fa:	f7fd ff91 	bl	8001420 <_ZN11ProtoHelper11getInstanceEv>
 80034fe:	4603      	mov	r3, r0
 8003500:	4a1e      	ldr	r2, [pc, #120]	; (800357c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003502:	6013      	str	r3, [r2, #0]
PID   pid1_pitch_rate(3.0f, 0.02f, 5.0f, 1800); 	 // 1800 is MAX motor output
 8003504:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800350e:	491e      	ldr	r1, [pc, #120]	; (8003588 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003510:	481e      	ldr	r0, [pc, #120]	; (800358c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003512:	f7fe ff76 	bl	8002402 <_ZN3PIDC1Efffi>
PID   pid1_roll_rate(3.0f, 0.02f, 5.0f, 1800); 	 // 1800 is MAX motor output
 8003516:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800351e:	4a19      	ldr	r2, [pc, #100]	; (8003584 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8003520:	4919      	ldr	r1, [pc, #100]	; (8003588 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003522:	481b      	ldr	r0, [pc, #108]	; (8003590 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8003524:	f7fe ff6d 	bl	8002402 <_ZN3PIDC1Efffi>
PID   pid1_yaw_rate(10.8f, 0.08f, 0, 1800); // 1800 is MAX motor output
 8003528:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	4a18      	ldr	r2, [pc, #96]	; (8003594 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8003534:	4918      	ldr	r1, [pc, #96]	; (8003598 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8003536:	4819      	ldr	r0, [pc, #100]	; (800359c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8003538:	f7fe ff63 	bl	8002402 <_ZN3PIDC1Efffi>
PID   pid2_pitch(1, 0, 0, 1640);     // 164°/sec is the max rate_command output
 800353c:	f44f 63cd 	mov.w	r3, #1640	; 0x668
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800354e:	4814      	ldr	r0, [pc, #80]	; (80035a0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8003550:	f7fe ff57 	bl	8002402 <_ZN3PIDC1Efffi>
PID   pid2_roll(1, 0, 0, 1640);		 // 164°/sec is the max rate_command output
 8003554:	f44f 63cd 	mov.w	r3, #1640	; 0x668
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003566:	480f      	ldr	r0, [pc, #60]	; (80035a4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8003568:	f7fe ff4b 	bl	8002402 <_ZN3PIDC1Efffi>
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200003e8 	.word	0x200003e8
 8003578:	200003ec 	.word	0x200003ec
 800357c:	200003f0 	.word	0x200003f0
 8003580:	40a00000 	.word	0x40a00000
 8003584:	3ca3d70a 	.word	0x3ca3d70a
 8003588:	40400000 	.word	0x40400000
 800358c:	2000040c 	.word	0x2000040c
 8003590:	20000434 	.word	0x20000434
 8003594:	3da3d70a 	.word	0x3da3d70a
 8003598:	412ccccd 	.word	0x412ccccd
 800359c:	2000045c 	.word	0x2000045c
 80035a0:	2000048c 	.word	0x2000048c
 80035a4:	200004b4 	.word	0x200004b4

080035a8 <_GLOBAL__sub_I_ahh>:
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80035b0:	2001      	movs	r0, #1
 80035b2:	f7ff ff8b 	bl	80034cc <_Z41__static_initialization_and_destruction_0ii>
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	db0b      	blt.n	80035e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	f003 021f 	and.w	r2, r3, #31
 80035d0:	4906      	ldr	r1, [pc, #24]	; (80035ec <__NVIC_EnableIRQ+0x34>)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	2001      	movs	r0, #1
 80035da:	fa00 f202 	lsl.w	r2, r0, r2
 80035de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	e000e100 	.word	0xe000e100

080035f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	2b00      	cmp	r3, #0
 8003602:	db0a      	blt.n	800361a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	490c      	ldr	r1, [pc, #48]	; (800363c <__NVIC_SetPriority+0x4c>)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	440b      	add	r3, r1
 8003614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003618:	e00a      	b.n	8003630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4908      	ldr	r1, [pc, #32]	; (8003640 <__NVIC_SetPriority+0x50>)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3b04      	subs	r3, #4
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	440b      	add	r3, r1
 800362e:	761a      	strb	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <micros_init>:
 */

#include "micros.h"


void micros_init(){
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0

	// Enable clock for that module for TIM3. Bit1 in RCC APB1ENR register
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN_Msk;
 8003648:	4b18      	ldr	r3, [pc, #96]	; (80036ac <micros_init+0x68>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	4a17      	ldr	r2, [pc, #92]	; (80036ac <micros_init+0x68>)
 800364e:	f043 0302 	orr.w	r3, r3, #2
 8003652:	61d3      	str	r3, [r2, #28]

	// CONFIG USING COTROL REGISTER 1 TO:
	TIM3->CR1 = 0; // Reset CR1 just in case
 8003654:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <micros_init+0x6c>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
	TIM3->CR1 |= TIM_CR1_ARPE_Msk; // enable auto-reload preload
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <micros_init+0x6c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <micros_init+0x6c>)
 8003660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003664:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= TIM_CR1_URS_Msk; // only overflow generates event
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <micros_init+0x6c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <micros_init+0x6c>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	6013      	str	r3, [r2, #0]
	
	// set prescaler to no division
	TIM3->PSC = 0;
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <micros_init+0x6c>)
 8003674:	2200      	movs	r2, #0
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
	// which should generate 10 uS update events, ie 0.1MHz interrupts
	// TIM3->ARR = 719; 
	
	// Set the auto-reload value to count from 0 to 287 (div clock by 288)
	// which should generate 4 uS update events, ie 0.1MHz interrupts
	TIM3->ARR = 287; 
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <micros_init+0x6c>)
 800367a:	f240 121f 	movw	r2, #287	; 0x11f
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update Interrupt Enable
	TIM3->DIER |= TIM_DIER_UIE_Msk;
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <micros_init+0x6c>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <micros_init+0x6c>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	60d3      	str	r3, [r2, #12]

	// Priority level 3
	NVIC_SetPriority(TIM3_IRQn, 0x03); //TODO: try level 0 (Max priority)
 800368c:	2103      	movs	r1, #3
 800368e:	201d      	movs	r0, #29
 8003690:	f7ff ffae 	bl	80035f0 <__NVIC_SetPriority>
	// Enable TIM3 from NVIC register
	NVIC_EnableIRQ(TIM3_IRQn);
 8003694:	201d      	movs	r0, #29
 8003696:	f7ff ff8f 	bl	80035b8 <__NVIC_EnableIRQ>

	// Finally enable TIM3 module
	TIM3->CR1 |= TIM_CR1_CEN_Msk;
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <micros_init+0x6c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <micros_init+0x6c>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6013      	str	r3, [r2, #0]

}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40000400 	.word	0x40000400

080036b4 <micros>:

uint32_t micros(){
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
	return uu_ticks;
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <micros+0x10>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	200004ec 	.word	0x200004ec

080036c8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
	// check the update event flag "UIF" 
	if((TIM3->SR & TIM_SR_UIF_Msk) == TIM_SR_UIF_Msk){
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <TIM3_IRQHandler+0x30>)
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10a      	bne.n	80036ee <TIM3_IRQHandler+0x26>
		// uu_ticks+=10; // increment each 10 Micro-seconds
		uu_ticks+=4; // increment each 4 Micro-seconds
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <TIM3_IRQHandler+0x34>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3304      	adds	r3, #4
 80036de:	4a07      	ldr	r2, [pc, #28]	; (80036fc <TIM3_IRQHandler+0x34>)
 80036e0:	6013      	str	r3, [r2, #0]
		TIM3->SR &= ~TIM_SR_UIF_Msk;
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <TIM3_IRQHandler+0x30>)
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <TIM3_IRQHandler+0x30>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6113      	str	r3, [r2, #16]
	}
}
 80036ee:	bf00      	nop
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40000400 	.word	0x40000400
 80036fc:	200004ec 	.word	0x200004ec

08003700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_MspInit+0x5c>)
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	4a14      	ldr	r2, [pc, #80]	; (800375c <HAL_MspInit+0x5c>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6193      	str	r3, [r2, #24]
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_MspInit+0x5c>)
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_MspInit+0x5c>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4a0e      	ldr	r2, [pc, #56]	; (800375c <HAL_MspInit+0x5c>)
 8003724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003728:	61d3      	str	r3, [r2, #28]
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <HAL_MspInit+0x5c>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_MspInit+0x60>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <HAL_MspInit+0x60>)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	40021000 	.word	0x40021000
 8003760:	40010000 	.word	0x40010000

08003764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a14      	ldr	r2, [pc, #80]	; (80037d0 <HAL_ADC_MspInit+0x6c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d121      	bne.n	80037c8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_ADC_MspInit+0x70>)
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <HAL_ADC_MspInit+0x70>)
 800378a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800378e:	6193      	str	r3, [r2, #24]
 8003790:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_ADC_MspInit+0x70>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <HAL_ADC_MspInit+0x70>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <HAL_ADC_MspInit+0x70>)
 80037a2:	f043 0308 	orr.w	r3, r3, #8
 80037a6:	6193      	str	r3, [r2, #24]
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_ADC_MspInit+0x70>)
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80037b4:	2302      	movs	r3, #2
 80037b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037b8:	2303      	movs	r3, #3
 80037ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037bc:	f107 0310 	add.w	r3, r7, #16
 80037c0:	4619      	mov	r1, r3
 80037c2:	4805      	ldr	r0, [pc, #20]	; (80037d8 <HAL_ADC_MspInit+0x74>)
 80037c4:	f000 fe70 	bl	80044a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037c8:	bf00      	nop
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40012400 	.word	0x40012400
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40010c00 	.word	0x40010c00

080037dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e4:	f107 0310 	add.w	r3, r7, #16
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a15      	ldr	r2, [pc, #84]	; (800384c <HAL_I2C_MspInit+0x70>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d123      	bne.n	8003844 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fc:	4b14      	ldr	r3, [pc, #80]	; (8003850 <HAL_I2C_MspInit+0x74>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4a13      	ldr	r2, [pc, #76]	; (8003850 <HAL_I2C_MspInit+0x74>)
 8003802:	f043 0308 	orr.w	r3, r3, #8
 8003806:	6193      	str	r3, [r2, #24]
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_I2C_MspInit+0x74>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003814:	23c0      	movs	r3, #192	; 0xc0
 8003816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003818:	2312      	movs	r3, #18
 800381a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800381c:	2303      	movs	r3, #3
 800381e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003820:	f107 0310 	add.w	r3, r7, #16
 8003824:	4619      	mov	r1, r3
 8003826:	480b      	ldr	r0, [pc, #44]	; (8003854 <HAL_I2C_MspInit+0x78>)
 8003828:	f000 fe3e 	bl	80044a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800382c:	4b08      	ldr	r3, [pc, #32]	; (8003850 <HAL_I2C_MspInit+0x74>)
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	4a07      	ldr	r2, [pc, #28]	; (8003850 <HAL_I2C_MspInit+0x74>)
 8003832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003836:	61d3      	str	r3, [r2, #28]
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_I2C_MspInit+0x74>)
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003844:	bf00      	nop
 8003846:	3720      	adds	r7, #32
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40005400 	.word	0x40005400
 8003850:	40021000 	.word	0x40021000
 8003854:	40010c00 	.word	0x40010c00

08003858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003868:	d10b      	bne.n	8003882 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_TIM_Base_MspInit+0x34>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4a07      	ldr	r2, [pc, #28]	; (800388c <HAL_TIM_Base_MspInit+0x34>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	61d3      	str	r3, [r2, #28]
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_TIM_Base_MspInit+0x34>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	40021000 	.word	0x40021000

08003890 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003898:	f107 0310 	add.w	r3, r7, #16
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d117      	bne.n	80038e0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_TIM_MspPostInit+0x58>)
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_TIM_MspPostInit+0x58>)
 80038b6:	f043 0304 	orr.w	r3, r3, #4
 80038ba:	6193      	str	r3, [r2, #24]
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_TIM_MspPostInit+0x58>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80038c8:	230f      	movs	r3, #15
 80038ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038cc:	2302      	movs	r3, #2
 80038ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2302      	movs	r3, #2
 80038d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d4:	f107 0310 	add.w	r3, r7, #16
 80038d8:	4619      	mov	r1, r3
 80038da:	4804      	ldr	r0, [pc, #16]	; (80038ec <HAL_TIM_MspPostInit+0x5c>)
 80038dc:	f000 fde4 	bl	80044a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80038e0:	bf00      	nop
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40010800 	.word	0x40010800

080038f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	f107 0310 	add.w	r3, r7, #16
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a20      	ldr	r2, [pc, #128]	; (800398c <HAL_UART_MspInit+0x9c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d139      	bne.n	8003984 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003910:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <HAL_UART_MspInit+0xa0>)
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <HAL_UART_MspInit+0xa0>)
 8003916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800391a:	6193      	str	r3, [r2, #24]
 800391c:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <HAL_UART_MspInit+0xa0>)
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_UART_MspInit+0xa0>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HAL_UART_MspInit+0xa0>)
 800392e:	f043 0304 	orr.w	r3, r3, #4
 8003932:	6193      	str	r3, [r2, #24]
 8003934:	4b16      	ldr	r3, [pc, #88]	; (8003990 <HAL_UART_MspInit+0xa0>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800394a:	2303      	movs	r3, #3
 800394c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	4619      	mov	r1, r3
 8003954:	480f      	ldr	r0, [pc, #60]	; (8003994 <HAL_UART_MspInit+0xa4>)
 8003956:	f000 fda7 	bl	80044a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800395a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800395e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003968:	f107 0310 	add.w	r3, r7, #16
 800396c:	4619      	mov	r1, r3
 800396e:	4809      	ldr	r0, [pc, #36]	; (8003994 <HAL_UART_MspInit+0xa4>)
 8003970:	f000 fd9a 	bl	80044a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003974:	2200      	movs	r2, #0
 8003976:	2100      	movs	r1, #0
 8003978:	2025      	movs	r0, #37	; 0x25
 800397a:	f000 fcae 	bl	80042da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800397e:	2025      	movs	r0, #37	; 0x25
 8003980:	f000 fcc7 	bl	8004312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003984:	bf00      	nop
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40013800 	.word	0x40013800
 8003990:	40021000 	.word	0x40021000
 8003994:	40010800 	.word	0x40010800

08003998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800399c:	e7fe      	b.n	800399c <NMI_Handler+0x4>

0800399e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039a2:	e7fe      	b.n	80039a2 <HardFault_Handler+0x4>

080039a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039a8:	e7fe      	b.n	80039a8 <MemManage_Handler+0x4>

080039aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039aa:	b480      	push	{r7}
 80039ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ae:	e7fe      	b.n	80039ae <BusFault_Handler+0x4>

080039b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039b4:	e7fe      	b.n	80039b4 <UsageFault_Handler+0x4>

080039b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr

080039ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039de:	f000 f947 	bl	8003c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80039ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80039ee:	f000 ff27 	bl	8004840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039fc:	4802      	ldr	r0, [pc, #8]	; (8003a08 <USART1_IRQHandler+0x10>)
 80039fe:	f003 fa6d 	bl	8006edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000374 	.word	0x20000374

08003a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
	return 1;
 8003a10:	2301      	movs	r3, #1
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <_kill>:

int _kill(int pid, int sig)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a24:	f004 fe2e 	bl	8008684 <__errno>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2216      	movs	r2, #22
 8003a2c:	601a      	str	r2, [r3, #0]
	return -1;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <_exit>:

void _exit (int status)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ffe7 	bl	8003a1a <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a4c:	e7fe      	b.n	8003a4c <_exit+0x12>

08003a4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e00a      	b.n	8003a76 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a60:	f3af 8000 	nop.w
 8003a64:	4601      	mov	r1, r0
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	60ba      	str	r2, [r7, #8]
 8003a6c:	b2ca      	uxtb	r2, r1
 8003a6e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3301      	adds	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	dbf0      	blt.n	8003a60 <_read+0x12>
	}

return len;
 8003a7e:	687b      	ldr	r3, [r7, #4]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	e009      	b.n	8003aae <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	60ba      	str	r2, [r7, #8]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	dbf1      	blt.n	8003a9a <_write+0x12>
	}
	return len;
 8003ab6:	687b      	ldr	r3, [r7, #4]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <_close>:

int _close(int file)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	return -1;
 8003ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ae6:	605a      	str	r2, [r3, #4]
	return 0;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <_isatty>:

int _isatty(int file)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	return 1;
 8003afc:	2301      	movs	r3, #1
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
	return 0;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b28:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <_sbrk+0x5c>)
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <_sbrk+0x60>)
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b34:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <_sbrk+0x64>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <_sbrk+0x64>)
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <_sbrk+0x68>)
 8003b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <_sbrk+0x64>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d207      	bcs.n	8003b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b50:	f004 fd98 	bl	8008684 <__errno>
 8003b54:	4603      	mov	r3, r0
 8003b56:	220c      	movs	r2, #12
 8003b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b5e:	e009      	b.n	8003b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b60:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <_sbrk+0x64>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <_sbrk+0x64>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <_sbrk+0x64>)
 8003b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b72:	68fb      	ldr	r3, [r7, #12]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20005000 	.word	0x20005000
 8003b80:	00000400 	.word	0x00000400
 8003b84:	200004f0 	.word	0x200004f0
 8003b88:	200005a8 	.word	0x200005a8

08003b8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b98:	480c      	ldr	r0, [pc, #48]	; (8003bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b9a:	490d      	ldr	r1, [pc, #52]	; (8003bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	; (8003bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ba0:	e002      	b.n	8003ba8 <LoopCopyDataInit>

08003ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ba6:	3304      	adds	r3, #4

08003ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bac:	d3f9      	bcc.n	8003ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bae:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bb0:	4c0a      	ldr	r4, [pc, #40]	; (8003bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bb4:	e001      	b.n	8003bba <LoopFillZerobss>

08003bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bb8:	3204      	adds	r2, #4

08003bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bbc:	d3fb      	bcc.n	8003bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bbe:	f7ff ffe5 	bl	8003b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bc2:	f004 fd65 	bl	8008690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bc6:	f7fe fde3 	bl	8002790 <main>
  bx lr
 8003bca:	4770      	bx	lr
  ldr r0, =_sdata
 8003bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bd0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003bd4:	0800d8a0 	.word	0x0800d8a0
  ldr r2, =_sbss
 8003bd8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003bdc:	200005a4 	.word	0x200005a4

08003be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003be0:	e7fe      	b.n	8003be0 <ADC1_2_IRQHandler>
	...

08003be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <HAL_Init+0x28>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <HAL_Init+0x28>)
 8003bee:	f043 0310 	orr.w	r3, r3, #16
 8003bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf4:	2003      	movs	r0, #3
 8003bf6:	f000 fb65 	bl	80042c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bfa:	200f      	movs	r0, #15
 8003bfc:	f000 f808 	bl	8003c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c00:	f7ff fd7e 	bl	8003700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40022000 	.word	0x40022000

08003c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c18:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_InitTick+0x54>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_InitTick+0x58>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	4619      	mov	r1, r3
 8003c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fb7d 	bl	800432e <HAL_SYSTICK_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e00e      	b.n	8003c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b0f      	cmp	r3, #15
 8003c42:	d80a      	bhi.n	8003c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c44:	2200      	movs	r2, #0
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c4c:	f000 fb45 	bl	80042da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c50:	4a06      	ldr	r2, [pc, #24]	; (8003c6c <HAL_InitTick+0x5c>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e000      	b.n	8003c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	2000000c 	.word	0x2000000c
 8003c68:	20000014 	.word	0x20000014
 8003c6c:	20000010 	.word	0x20000010

08003c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_IncTick+0x1c>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_IncTick+0x20>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	4a03      	ldr	r2, [pc, #12]	; (8003c90 <HAL_IncTick+0x20>)
 8003c82:	6013      	str	r3, [r2, #0]
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	20000014 	.word	0x20000014
 8003c90:	20000590 	.word	0x20000590

08003c94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return uwTick;
 8003c98:	4b02      	ldr	r3, [pc, #8]	; (8003ca4 <HAL_GetTick+0x10>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr
 8003ca4:	20000590 	.word	0x20000590

08003ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7ff fff0 	bl	8003c94 <HAL_GetTick>
 8003cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc0:	d005      	beq.n	8003cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <HAL_Delay+0x44>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cce:	bf00      	nop
 8003cd0:	f7ff ffe0 	bl	8003c94 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d8f7      	bhi.n	8003cd0 <HAL_Delay+0x28>
  {
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000014 	.word	0x20000014

08003cf0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e0be      	b.n	8003e90 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fd18 	bl	8003764 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f9b7 	bl	80040a8 <ADC_ConversionStop_Disable>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 8099 	bne.w	8003e7e <HAL_ADC_Init+0x18e>
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 8095 	bne.w	8003e7e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d5c:	f023 0302 	bic.w	r3, r3, #2
 8003d60:	f043 0202 	orr.w	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7b1b      	ldrb	r3, [r3, #12]
 8003d76:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d78:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d88:	d003      	beq.n	8003d92 <HAL_ADC_Init+0xa2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d102      	bne.n	8003d98 <HAL_ADC_Init+0xa8>
 8003d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d96:	e000      	b.n	8003d9a <HAL_ADC_Init+0xaa>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7d1b      	ldrb	r3, [r3, #20]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d119      	bne.n	8003ddc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7b1b      	ldrb	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	035a      	lsls	r2, r3, #13
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	e00b      	b.n	8003ddc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <HAL_ADC_Init+0x1a8>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0c:	d003      	beq.n	8003e16 <HAL_ADC_Init+0x126>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d104      	bne.n	8003e20 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	051b      	lsls	r3, r3, #20
 8003e1e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <HAL_ADC_Init+0x1ac>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d10b      	bne.n	8003e5c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	f043 0201 	orr.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e5a:	e018      	b.n	8003e8e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	f023 0312 	bic.w	r3, r3, #18
 8003e64:	f043 0210 	orr.w	r2, r3, #16
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e7c:	e007      	b.n	8003e8e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	f043 0210 	orr.w	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	ffe1f7fd 	.word	0xffe1f7fd
 8003e9c:	ff1f0efe 	.word	0xff1f0efe

08003ea0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x20>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e0dc      	b.n	8004092 <HAL_ADC_ConfigChannel+0x1da>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d81c      	bhi.n	8003f22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3b05      	subs	r3, #5
 8003efa:	221f      	movs	r2, #31
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	4019      	ands	r1, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	3b05      	subs	r3, #5
 8003f14:	fa00 f203 	lsl.w	r2, r0, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f20:	e03c      	b.n	8003f9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d81c      	bhi.n	8003f64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	3b23      	subs	r3, #35	; 0x23
 8003f3c:	221f      	movs	r2, #31
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	4019      	ands	r1, r3
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	3b23      	subs	r3, #35	; 0x23
 8003f56:	fa00 f203 	lsl.w	r2, r0, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
 8003f62:	e01b      	b.n	8003f9c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	3b41      	subs	r3, #65	; 0x41
 8003f76:	221f      	movs	r2, #31
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	4019      	ands	r1, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3b41      	subs	r3, #65	; 0x41
 8003f90:	fa00 f203 	lsl.w	r2, r0, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b09      	cmp	r3, #9
 8003fa2:	d91c      	bls.n	8003fde <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68d9      	ldr	r1, [r3, #12]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3b1e      	subs	r3, #30
 8003fb6:	2207      	movs	r2, #7
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	4019      	ands	r1, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6898      	ldr	r0, [r3, #8]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	3b1e      	subs	r3, #30
 8003fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	e019      	b.n	8004012 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6919      	ldr	r1, [r3, #16]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	2207      	movs	r2, #7
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	4019      	ands	r1, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6898      	ldr	r0, [r3, #8]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4413      	add	r3, r2
 8004006:	fa00 f203 	lsl.w	r2, r0, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b10      	cmp	r3, #16
 8004018:	d003      	beq.n	8004022 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800401e:	2b11      	cmp	r3, #17
 8004020:	d132      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1d      	ldr	r2, [pc, #116]	; (800409c <HAL_ADC_ConfigChannel+0x1e4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d125      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d126      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004048:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b10      	cmp	r3, #16
 8004050:	d11a      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004052:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	0c9a      	lsrs	r2, r3, #18
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004068:	e002      	b.n	8004070 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	3b01      	subs	r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f9      	bne.n	800406a <HAL_ADC_ConfigChannel+0x1b2>
 8004076:	e007      	b.n	8004088 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	f043 0220 	orr.w	r2, r3, #32
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	40012400 	.word	0x40012400
 80040a0:	2000000c 	.word	0x2000000c
 80040a4:	431bde83 	.word	0x431bde83

080040a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d12e      	bne.n	8004120 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040d2:	f7ff fddf 	bl	8003c94 <HAL_GetTick>
 80040d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80040d8:	e01b      	b.n	8004112 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040da:	f7ff fddb 	bl	8003c94 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d914      	bls.n	8004112 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d10d      	bne.n	8004112 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	f043 0210 	orr.w	r2, r3, #16
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e007      	b.n	8004122 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b01      	cmp	r3, #1
 800411e:	d0dc      	beq.n	80040da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <__NVIC_SetPriorityGrouping>:
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <__NVIC_SetPriorityGrouping+0x44>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004148:	4013      	ands	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800415e:	4a04      	ldr	r2, [pc, #16]	; (8004170 <__NVIC_SetPriorityGrouping+0x44>)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	60d3      	str	r3, [r2, #12]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <__NVIC_GetPriorityGrouping>:
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <__NVIC_GetPriorityGrouping+0x18>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	0a1b      	lsrs	r3, r3, #8
 800417e:	f003 0307 	and.w	r3, r3, #7
}
 8004182:	4618      	mov	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <__NVIC_EnableIRQ>:
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	db0b      	blt.n	80041ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	f003 021f 	and.w	r2, r3, #31
 80041a8:	4906      	ldr	r1, [pc, #24]	; (80041c4 <__NVIC_EnableIRQ+0x34>)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2001      	movs	r0, #1
 80041b2:	fa00 f202 	lsl.w	r2, r0, r2
 80041b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	e000e100 	.word	0xe000e100

080041c8 <__NVIC_SetPriority>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	6039      	str	r1, [r7, #0]
 80041d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db0a      	blt.n	80041f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	490c      	ldr	r1, [pc, #48]	; (8004214 <__NVIC_SetPriority+0x4c>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	0112      	lsls	r2, r2, #4
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	440b      	add	r3, r1
 80041ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041f0:	e00a      	b.n	8004208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4908      	ldr	r1, [pc, #32]	; (8004218 <__NVIC_SetPriority+0x50>)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	3b04      	subs	r3, #4
 8004200:	0112      	lsls	r2, r2, #4
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	440b      	add	r3, r1
 8004206:	761a      	strb	r2, [r3, #24]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	e000e100 	.word	0xe000e100
 8004218:	e000ed00 	.word	0xe000ed00

0800421c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f1c3 0307 	rsb	r3, r3, #7
 8004236:	2b04      	cmp	r3, #4
 8004238:	bf28      	it	cs
 800423a:	2304      	movcs	r3, #4
 800423c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3304      	adds	r3, #4
 8004242:	2b06      	cmp	r3, #6
 8004244:	d902      	bls.n	800424c <NVIC_EncodePriority+0x30>
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3b03      	subs	r3, #3
 800424a:	e000      	b.n	800424e <NVIC_EncodePriority+0x32>
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43da      	mvns	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	401a      	ands	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004264:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	43d9      	mvns	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	4313      	orrs	r3, r2
         );
}
 8004276:	4618      	mov	r0, r3
 8004278:	3724      	adds	r7, #36	; 0x24
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3b01      	subs	r3, #1
 800428c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004290:	d301      	bcc.n	8004296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004292:	2301      	movs	r3, #1
 8004294:	e00f      	b.n	80042b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004296:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <SysTick_Config+0x40>)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3b01      	subs	r3, #1
 800429c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800429e:	210f      	movs	r1, #15
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042a4:	f7ff ff90 	bl	80041c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <SysTick_Config+0x40>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ae:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <SysTick_Config+0x40>)
 80042b0:	2207      	movs	r2, #7
 80042b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	e000e010 	.word	0xe000e010

080042c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff ff2d 	bl	800412c <__NVIC_SetPriorityGrouping>
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042da:	b580      	push	{r7, lr}
 80042dc:	b086      	sub	sp, #24
 80042de:	af00      	add	r7, sp, #0
 80042e0:	4603      	mov	r3, r0
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042ec:	f7ff ff42 	bl	8004174 <__NVIC_GetPriorityGrouping>
 80042f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	6978      	ldr	r0, [r7, #20]
 80042f8:	f7ff ff90 	bl	800421c <NVIC_EncodePriority>
 80042fc:	4602      	mov	r2, r0
 80042fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004302:	4611      	mov	r1, r2
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff ff5f 	bl	80041c8 <__NVIC_SetPriority>
}
 800430a:	bf00      	nop
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	4603      	mov	r3, r0
 800431a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800431c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff ff35 	bl	8004190 <__NVIC_EnableIRQ>
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff ffa2 	bl	8004280 <SysTick_Config>
 800433c:	4603      	mov	r3, r0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004358:	2b02      	cmp	r3, #2
 800435a:	d008      	beq.n	800436e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2204      	movs	r2, #4
 8004360:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e020      	b.n	80043b0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 020e 	bic.w	r2, r2, #14
 800437c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f202 	lsl.w	r2, r1, r2
 800439c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr
	...

080043bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d005      	beq.n	80043de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2204      	movs	r2, #4
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
 80043dc:	e051      	b.n	8004482 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 020e 	bic.w	r2, r2, #14
 80043ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a22      	ldr	r2, [pc, #136]	; (800448c <HAL_DMA_Abort_IT+0xd0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d029      	beq.n	800445c <HAL_DMA_Abort_IT+0xa0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a20      	ldr	r2, [pc, #128]	; (8004490 <HAL_DMA_Abort_IT+0xd4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d022      	beq.n	8004458 <HAL_DMA_Abort_IT+0x9c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1f      	ldr	r2, [pc, #124]	; (8004494 <HAL_DMA_Abort_IT+0xd8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d01a      	beq.n	8004452 <HAL_DMA_Abort_IT+0x96>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <HAL_DMA_Abort_IT+0xdc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d012      	beq.n	800444c <HAL_DMA_Abort_IT+0x90>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1c      	ldr	r2, [pc, #112]	; (800449c <HAL_DMA_Abort_IT+0xe0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00a      	beq.n	8004446 <HAL_DMA_Abort_IT+0x8a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1a      	ldr	r2, [pc, #104]	; (80044a0 <HAL_DMA_Abort_IT+0xe4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d102      	bne.n	8004440 <HAL_DMA_Abort_IT+0x84>
 800443a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800443e:	e00e      	b.n	800445e <HAL_DMA_Abort_IT+0xa2>
 8004440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004444:	e00b      	b.n	800445e <HAL_DMA_Abort_IT+0xa2>
 8004446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800444a:	e008      	b.n	800445e <HAL_DMA_Abort_IT+0xa2>
 800444c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004450:	e005      	b.n	800445e <HAL_DMA_Abort_IT+0xa2>
 8004452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004456:	e002      	b.n	800445e <HAL_DMA_Abort_IT+0xa2>
 8004458:	2310      	movs	r3, #16
 800445a:	e000      	b.n	800445e <HAL_DMA_Abort_IT+0xa2>
 800445c:	2301      	movs	r3, #1
 800445e:	4a11      	ldr	r2, [pc, #68]	; (80044a4 <HAL_DMA_Abort_IT+0xe8>)
 8004460:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4798      	blx	r3
    } 
  }
  return status;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40020008 	.word	0x40020008
 8004490:	4002001c 	.word	0x4002001c
 8004494:	40020030 	.word	0x40020030
 8004498:	40020044 	.word	0x40020044
 800449c:	40020058 	.word	0x40020058
 80044a0:	4002006c 	.word	0x4002006c
 80044a4:	40020000 	.word	0x40020000

080044a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b08b      	sub	sp, #44	; 0x2c
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044b6:	2300      	movs	r3, #0
 80044b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ba:	e169      	b.n	8004790 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044bc:	2201      	movs	r2, #1
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	f040 8158 	bne.w	800478a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4a9a      	ldr	r2, [pc, #616]	; (8004748 <HAL_GPIO_Init+0x2a0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d05e      	beq.n	80045a2 <HAL_GPIO_Init+0xfa>
 80044e4:	4a98      	ldr	r2, [pc, #608]	; (8004748 <HAL_GPIO_Init+0x2a0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d875      	bhi.n	80045d6 <HAL_GPIO_Init+0x12e>
 80044ea:	4a98      	ldr	r2, [pc, #608]	; (800474c <HAL_GPIO_Init+0x2a4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d058      	beq.n	80045a2 <HAL_GPIO_Init+0xfa>
 80044f0:	4a96      	ldr	r2, [pc, #600]	; (800474c <HAL_GPIO_Init+0x2a4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d86f      	bhi.n	80045d6 <HAL_GPIO_Init+0x12e>
 80044f6:	4a96      	ldr	r2, [pc, #600]	; (8004750 <HAL_GPIO_Init+0x2a8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d052      	beq.n	80045a2 <HAL_GPIO_Init+0xfa>
 80044fc:	4a94      	ldr	r2, [pc, #592]	; (8004750 <HAL_GPIO_Init+0x2a8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d869      	bhi.n	80045d6 <HAL_GPIO_Init+0x12e>
 8004502:	4a94      	ldr	r2, [pc, #592]	; (8004754 <HAL_GPIO_Init+0x2ac>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d04c      	beq.n	80045a2 <HAL_GPIO_Init+0xfa>
 8004508:	4a92      	ldr	r2, [pc, #584]	; (8004754 <HAL_GPIO_Init+0x2ac>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d863      	bhi.n	80045d6 <HAL_GPIO_Init+0x12e>
 800450e:	4a92      	ldr	r2, [pc, #584]	; (8004758 <HAL_GPIO_Init+0x2b0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d046      	beq.n	80045a2 <HAL_GPIO_Init+0xfa>
 8004514:	4a90      	ldr	r2, [pc, #576]	; (8004758 <HAL_GPIO_Init+0x2b0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d85d      	bhi.n	80045d6 <HAL_GPIO_Init+0x12e>
 800451a:	2b12      	cmp	r3, #18
 800451c:	d82a      	bhi.n	8004574 <HAL_GPIO_Init+0xcc>
 800451e:	2b12      	cmp	r3, #18
 8004520:	d859      	bhi.n	80045d6 <HAL_GPIO_Init+0x12e>
 8004522:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <HAL_GPIO_Init+0x80>)
 8004524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004528:	080045a3 	.word	0x080045a3
 800452c:	0800457d 	.word	0x0800457d
 8004530:	0800458f 	.word	0x0800458f
 8004534:	080045d1 	.word	0x080045d1
 8004538:	080045d7 	.word	0x080045d7
 800453c:	080045d7 	.word	0x080045d7
 8004540:	080045d7 	.word	0x080045d7
 8004544:	080045d7 	.word	0x080045d7
 8004548:	080045d7 	.word	0x080045d7
 800454c:	080045d7 	.word	0x080045d7
 8004550:	080045d7 	.word	0x080045d7
 8004554:	080045d7 	.word	0x080045d7
 8004558:	080045d7 	.word	0x080045d7
 800455c:	080045d7 	.word	0x080045d7
 8004560:	080045d7 	.word	0x080045d7
 8004564:	080045d7 	.word	0x080045d7
 8004568:	080045d7 	.word	0x080045d7
 800456c:	08004585 	.word	0x08004585
 8004570:	08004599 	.word	0x08004599
 8004574:	4a79      	ldr	r2, [pc, #484]	; (800475c <HAL_GPIO_Init+0x2b4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800457a:	e02c      	b.n	80045d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	623b      	str	r3, [r7, #32]
          break;
 8004582:	e029      	b.n	80045d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	3304      	adds	r3, #4
 800458a:	623b      	str	r3, [r7, #32]
          break;
 800458c:	e024      	b.n	80045d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	3308      	adds	r3, #8
 8004594:	623b      	str	r3, [r7, #32]
          break;
 8004596:	e01f      	b.n	80045d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	330c      	adds	r3, #12
 800459e:	623b      	str	r3, [r7, #32]
          break;
 80045a0:	e01a      	b.n	80045d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045aa:	2304      	movs	r3, #4
 80045ac:	623b      	str	r3, [r7, #32]
          break;
 80045ae:	e013      	b.n	80045d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d105      	bne.n	80045c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045b8:	2308      	movs	r3, #8
 80045ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	611a      	str	r2, [r3, #16]
          break;
 80045c2:	e009      	b.n	80045d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045c4:	2308      	movs	r3, #8
 80045c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69fa      	ldr	r2, [r7, #28]
 80045cc:	615a      	str	r2, [r3, #20]
          break;
 80045ce:	e003      	b.n	80045d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045d0:	2300      	movs	r3, #0
 80045d2:	623b      	str	r3, [r7, #32]
          break;
 80045d4:	e000      	b.n	80045d8 <HAL_GPIO_Init+0x130>
          break;
 80045d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2bff      	cmp	r3, #255	; 0xff
 80045dc:	d801      	bhi.n	80045e2 <HAL_GPIO_Init+0x13a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	e001      	b.n	80045e6 <HAL_GPIO_Init+0x13e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3304      	adds	r3, #4
 80045e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2bff      	cmp	r3, #255	; 0xff
 80045ec:	d802      	bhi.n	80045f4 <HAL_GPIO_Init+0x14c>
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	e002      	b.n	80045fa <HAL_GPIO_Init+0x152>
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	3b08      	subs	r3, #8
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	210f      	movs	r1, #15
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	401a      	ands	r2, r3
 800460c:	6a39      	ldr	r1, [r7, #32]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	431a      	orrs	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80b1 	beq.w	800478a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004628:	4b4d      	ldr	r3, [pc, #308]	; (8004760 <HAL_GPIO_Init+0x2b8>)
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	4a4c      	ldr	r2, [pc, #304]	; (8004760 <HAL_GPIO_Init+0x2b8>)
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	6193      	str	r3, [r2, #24]
 8004634:	4b4a      	ldr	r3, [pc, #296]	; (8004760 <HAL_GPIO_Init+0x2b8>)
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004640:	4a48      	ldr	r2, [pc, #288]	; (8004764 <HAL_GPIO_Init+0x2bc>)
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	3302      	adds	r3, #2
 8004648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	220f      	movs	r2, #15
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4013      	ands	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a40      	ldr	r2, [pc, #256]	; (8004768 <HAL_GPIO_Init+0x2c0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_GPIO_Init+0x1ec>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a3f      	ldr	r2, [pc, #252]	; (800476c <HAL_GPIO_Init+0x2c4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00d      	beq.n	8004690 <HAL_GPIO_Init+0x1e8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a3e      	ldr	r2, [pc, #248]	; (8004770 <HAL_GPIO_Init+0x2c8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <HAL_GPIO_Init+0x1e4>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a3d      	ldr	r2, [pc, #244]	; (8004774 <HAL_GPIO_Init+0x2cc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d101      	bne.n	8004688 <HAL_GPIO_Init+0x1e0>
 8004684:	2303      	movs	r3, #3
 8004686:	e006      	b.n	8004696 <HAL_GPIO_Init+0x1ee>
 8004688:	2304      	movs	r3, #4
 800468a:	e004      	b.n	8004696 <HAL_GPIO_Init+0x1ee>
 800468c:	2302      	movs	r3, #2
 800468e:	e002      	b.n	8004696 <HAL_GPIO_Init+0x1ee>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_GPIO_Init+0x1ee>
 8004694:	2300      	movs	r3, #0
 8004696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004698:	f002 0203 	and.w	r2, r2, #3
 800469c:	0092      	lsls	r2, r2, #2
 800469e:	4093      	lsls	r3, r2
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046a6:	492f      	ldr	r1, [pc, #188]	; (8004764 <HAL_GPIO_Init+0x2bc>)
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	3302      	adds	r3, #2
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046c0:	4b2d      	ldr	r3, [pc, #180]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	492c      	ldr	r1, [pc, #176]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]
 80046cc:	e006      	b.n	80046dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046ce:	4b2a      	ldr	r3, [pc, #168]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	4928      	ldr	r1, [pc, #160]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 80046d8:	4013      	ands	r3, r2
 80046da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d006      	beq.n	80046f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046e8:	4b23      	ldr	r3, [pc, #140]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	4922      	ldr	r1, [pc, #136]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]
 80046f4:	e006      	b.n	8004704 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	491e      	ldr	r1, [pc, #120]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 8004700:	4013      	ands	r3, r2
 8004702:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d006      	beq.n	800471e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004710:	4b19      	ldr	r3, [pc, #100]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	4918      	ldr	r1, [pc, #96]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]
 800471c:	e006      	b.n	800472c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800471e:	4b16      	ldr	r3, [pc, #88]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	43db      	mvns	r3, r3
 8004726:	4914      	ldr	r1, [pc, #80]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 8004728:	4013      	ands	r3, r2
 800472a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d021      	beq.n	800477c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	490e      	ldr	r1, [pc, #56]	; (8004778 <HAL_GPIO_Init+0x2d0>)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	4313      	orrs	r3, r2
 8004742:	60cb      	str	r3, [r1, #12]
 8004744:	e021      	b.n	800478a <HAL_GPIO_Init+0x2e2>
 8004746:	bf00      	nop
 8004748:	10320000 	.word	0x10320000
 800474c:	10310000 	.word	0x10310000
 8004750:	10220000 	.word	0x10220000
 8004754:	10210000 	.word	0x10210000
 8004758:	10120000 	.word	0x10120000
 800475c:	10110000 	.word	0x10110000
 8004760:	40021000 	.word	0x40021000
 8004764:	40010000 	.word	0x40010000
 8004768:	40010800 	.word	0x40010800
 800476c:	40010c00 	.word	0x40010c00
 8004770:	40011000 	.word	0x40011000
 8004774:	40011400 	.word	0x40011400
 8004778:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_GPIO_Init+0x304>)
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	43db      	mvns	r3, r3
 8004784:	4909      	ldr	r1, [pc, #36]	; (80047ac <HAL_GPIO_Init+0x304>)
 8004786:	4013      	ands	r3, r2
 8004788:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	3301      	adds	r3, #1
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	f47f ae8e 	bne.w	80044bc <HAL_GPIO_Init+0x14>
  }
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	372c      	adds	r7, #44	; 0x2c
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	40010400 	.word	0x40010400

080047b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	887b      	ldrh	r3, [r7, #2]
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
 80047cc:	e001      	b.n	80047d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	807b      	strh	r3, [r7, #2]
 80047ea:	4613      	mov	r3, r2
 80047ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047ee:	787b      	ldrb	r3, [r7, #1]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047f4:	887a      	ldrh	r2, [r7, #2]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047fa:	e003      	b.n	8004804 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047fc:	887b      	ldrh	r3, [r7, #2]
 80047fe:	041a      	lsls	r2, r3, #16
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	611a      	str	r2, [r3, #16]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr

0800480e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004820:	887a      	ldrh	r2, [r7, #2]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4013      	ands	r3, r2
 8004826:	041a      	lsls	r2, r3, #16
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	43d9      	mvns	r1, r3
 800482c:	887b      	ldrh	r3, [r7, #2]
 800482e:	400b      	ands	r3, r1
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	611a      	str	r2, [r3, #16]
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800484a:	4b08      	ldr	r3, [pc, #32]	; (800486c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d006      	beq.n	8004864 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004856:	4a05      	ldr	r2, [pc, #20]	; (800486c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe fb82 	bl	8002f68 <HAL_GPIO_EXTI_Callback>
  }
}
 8004864:	bf00      	nop
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40010400 	.word	0x40010400

08004870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e12b      	b.n	8004ada <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fe ffa0 	bl	80037dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048d4:	f001 fba0 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 80048d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4a81      	ldr	r2, [pc, #516]	; (8004ae4 <HAL_I2C_Init+0x274>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d807      	bhi.n	80048f4 <HAL_I2C_Init+0x84>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a80      	ldr	r2, [pc, #512]	; (8004ae8 <HAL_I2C_Init+0x278>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	bf94      	ite	ls
 80048ec:	2301      	movls	r3, #1
 80048ee:	2300      	movhi	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	e006      	b.n	8004902 <HAL_I2C_Init+0x92>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a7d      	ldr	r2, [pc, #500]	; (8004aec <HAL_I2C_Init+0x27c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	bf94      	ite	ls
 80048fc:	2301      	movls	r3, #1
 80048fe:	2300      	movhi	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0e7      	b.n	8004ada <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a78      	ldr	r2, [pc, #480]	; (8004af0 <HAL_I2C_Init+0x280>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	0c9b      	lsrs	r3, r3, #18
 8004914:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a6a      	ldr	r2, [pc, #424]	; (8004ae4 <HAL_I2C_Init+0x274>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d802      	bhi.n	8004944 <HAL_I2C_Init+0xd4>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3301      	adds	r3, #1
 8004942:	e009      	b.n	8004958 <HAL_I2C_Init+0xe8>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	4a69      	ldr	r2, [pc, #420]	; (8004af4 <HAL_I2C_Init+0x284>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	099b      	lsrs	r3, r3, #6
 8004956:	3301      	adds	r3, #1
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	430b      	orrs	r3, r1
 800495e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800496a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	495c      	ldr	r1, [pc, #368]	; (8004ae4 <HAL_I2C_Init+0x274>)
 8004974:	428b      	cmp	r3, r1
 8004976:	d819      	bhi.n	80049ac <HAL_I2C_Init+0x13c>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1e59      	subs	r1, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	fbb1 f3f3 	udiv	r3, r1, r3
 8004986:	1c59      	adds	r1, r3, #1
 8004988:	f640 73fc 	movw	r3, #4092	; 0xffc
 800498c:	400b      	ands	r3, r1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_I2C_Init+0x138>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1e59      	subs	r1, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	fbb1 f3f3 	udiv	r3, r1, r3
 80049a0:	3301      	adds	r3, #1
 80049a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a6:	e051      	b.n	8004a4c <HAL_I2C_Init+0x1dc>
 80049a8:	2304      	movs	r3, #4
 80049aa:	e04f      	b.n	8004a4c <HAL_I2C_Init+0x1dc>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d111      	bne.n	80049d8 <HAL_I2C_Init+0x168>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1e58      	subs	r0, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6859      	ldr	r1, [r3, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	440b      	add	r3, r1
 80049c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e012      	b.n	80049fe <HAL_I2C_Init+0x18e>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1e58      	subs	r0, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	0099      	lsls	r1, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ee:	3301      	adds	r3, #1
 80049f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Init+0x196>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e022      	b.n	8004a4c <HAL_I2C_Init+0x1dc>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10e      	bne.n	8004a2c <HAL_I2C_Init+0x1bc>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1e58      	subs	r0, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6859      	ldr	r1, [r3, #4]
 8004a16:	460b      	mov	r3, r1
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	440b      	add	r3, r1
 8004a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a20:	3301      	adds	r3, #1
 8004a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2a:	e00f      	b.n	8004a4c <HAL_I2C_Init+0x1dc>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1e58      	subs	r0, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	0099      	lsls	r1, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a42:	3301      	adds	r3, #1
 8004a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	6809      	ldr	r1, [r1, #0]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6911      	ldr	r1, [r2, #16]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68d2      	ldr	r2, [r2, #12]
 8004a86:	4311      	orrs	r1, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	000186a0 	.word	0x000186a0
 8004ae8:	001e847f 	.word	0x001e847f
 8004aec:	003d08ff 	.word	0x003d08ff
 8004af0:	431bde83 	.word	0x431bde83
 8004af4:	10624dd3 	.word	0x10624dd3

08004af8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	817b      	strh	r3, [r7, #10]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	813b      	strh	r3, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b12:	f7ff f8bf 	bl	8003c94 <HAL_GetTick>
 8004b16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	f040 80d9 	bne.w	8004cd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	2319      	movs	r3, #25
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	496d      	ldr	r1, [pc, #436]	; (8004ce4 <HAL_I2C_Mem_Write+0x1ec>)
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fcc1 	bl	80054b8 <I2C_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e0cc      	b.n	8004cda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_I2C_Mem_Write+0x56>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e0c5      	b.n	8004cda <HAL_I2C_Mem_Write+0x1e2>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d007      	beq.n	8004b74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2221      	movs	r2, #33	; 0x21
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2240      	movs	r2, #64	; 0x40
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4a4d      	ldr	r2, [pc, #308]	; (8004ce8 <HAL_I2C_Mem_Write+0x1f0>)
 8004bb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bb6:	88f8      	ldrh	r0, [r7, #6]
 8004bb8:	893a      	ldrh	r2, [r7, #8]
 8004bba:	8979      	ldrh	r1, [r7, #10]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 faf8 	bl	80051bc <I2C_RequestMemoryWrite>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d052      	beq.n	8004c78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e081      	b.n	8004cda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fd42 	bl	8005664 <I2C_WaitOnTXEFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d107      	bne.n	8004bfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e06b      	b.n	8004cda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	781a      	ldrb	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d11b      	bne.n	8004c78 <HAL_I2C_Mem_Write+0x180>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d017      	beq.n	8004c78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	781a      	ldrb	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1aa      	bne.n	8004bd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fd2e 	bl	80056e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00d      	beq.n	8004cac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d107      	bne.n	8004ca8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e016      	b.n	8004cda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e000      	b.n	8004cda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004cd8:	2302      	movs	r3, #2
  }
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	00100002 	.word	0x00100002
 8004ce8:	ffff0000 	.word	0xffff0000

08004cec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08c      	sub	sp, #48	; 0x30
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	817b      	strh	r3, [r7, #10]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	813b      	strh	r3, [r7, #8]
 8004d02:	4613      	mov	r3, r2
 8004d04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d0a:	f7fe ffc3 	bl	8003c94 <HAL_GetTick>
 8004d0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	f040 8244 	bne.w	80051a6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	2319      	movs	r3, #25
 8004d24:	2201      	movs	r2, #1
 8004d26:	4982      	ldr	r1, [pc, #520]	; (8004f30 <HAL_I2C_Mem_Read+0x244>)
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 fbc5 	bl	80054b8 <I2C_WaitOnFlagUntilTimeout>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
 8004d36:	e237      	b.n	80051a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_I2C_Mem_Read+0x5a>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e230      	b.n	80051a8 <HAL_I2C_Mem_Read+0x4bc>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d007      	beq.n	8004d6c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2222      	movs	r2, #34	; 0x22
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2240      	movs	r2, #64	; 0x40
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4a62      	ldr	r2, [pc, #392]	; (8004f34 <HAL_I2C_Mem_Read+0x248>)
 8004dac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dae:	88f8      	ldrh	r0, [r7, #6]
 8004db0:	893a      	ldrh	r2, [r7, #8]
 8004db2:	8979      	ldrh	r1, [r7, #10]
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fa92 	bl	80052e8 <I2C_RequestMemoryRead>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e1ec      	b.n	80051a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d113      	bne.n	8004dfe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e1c0      	b.n	8005180 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d11e      	bne.n	8004e44 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e16:	b672      	cpsid	i
}
 8004e18:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e40:	b662      	cpsie	i
}
 8004e42:	e035      	b.n	8004eb0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d11e      	bne.n	8004e8a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e5c:	b672      	cpsid	i
}
 8004e5e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e86:	b662      	cpsie	i
}
 8004e88:	e012      	b.n	8004eb0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e98:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004eb0:	e166      	b.n	8005180 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	f200 811f 	bhi.w	80050fa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d123      	bne.n	8004f0c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fc4d 	bl	8005768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e167      	b.n	80051a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f0a:	e139      	b.n	8005180 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d152      	bne.n	8004fba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	4906      	ldr	r1, [pc, #24]	; (8004f38 <HAL_I2C_Mem_Read+0x24c>)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 faca 	bl	80054b8 <I2C_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e13c      	b.n	80051a8 <HAL_I2C_Mem_Read+0x4bc>
 8004f2e:	bf00      	nop
 8004f30:	00100002 	.word	0x00100002
 8004f34:	ffff0000 	.word	0xffff0000
 8004f38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004f3c:	b672      	cpsid	i
}
 8004f3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f82:	b662      	cpsie	i
}
 8004f84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fb8:	e0e2      	b.n	8005180 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	497b      	ldr	r1, [pc, #492]	; (80051b0 <HAL_I2C_Mem_Read+0x4c4>)
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fa77 	bl	80054b8 <I2C_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0e9      	b.n	80051a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004fe4:	b672      	cpsid	i
}
 8004fe6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800501a:	4b66      	ldr	r3, [pc, #408]	; (80051b4 <HAL_I2C_Mem_Read+0x4c8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	08db      	lsrs	r3, r3, #3
 8005020:	4a65      	ldr	r2, [pc, #404]	; (80051b8 <HAL_I2C_Mem_Read+0x4cc>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	0a1a      	lsrs	r2, r3, #8
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	00da      	lsls	r2, r3, #3
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	3b01      	subs	r3, #1
 8005038:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d118      	bne.n	8005072 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005062:	b662      	cpsie	i
}
 8005064:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e09a      	b.n	80051a8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b04      	cmp	r3, #4
 800507e:	d1d9      	bne.n	8005034 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80050c2:	b662      	cpsie	i
}
 80050c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050f8:	e042      	b.n	8005180 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fb32 	bl	8005768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e04c      	b.n	80051a8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b04      	cmp	r3, #4
 800514c:	d118      	bne.n	8005180 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	2b00      	cmp	r3, #0
 8005186:	f47f ae94 	bne.w	8004eb2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e000      	b.n	80051a8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80051a6:	2302      	movs	r3, #2
  }
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3728      	adds	r7, #40	; 0x28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	00010004 	.word	0x00010004
 80051b4:	2000000c 	.word	0x2000000c
 80051b8:	14f8b589 	.word	0x14f8b589

080051bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	4608      	mov	r0, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	461a      	mov	r2, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	817b      	strh	r3, [r7, #10]
 80051ce:	460b      	mov	r3, r1
 80051d0:	813b      	strh	r3, [r7, #8]
 80051d2:	4613      	mov	r3, r2
 80051d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 f960 	bl	80054b8 <I2C_WaitOnFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00d      	beq.n	800521a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520c:	d103      	bne.n	8005216 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e05f      	b.n	80052da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800521a:	897b      	ldrh	r3, [r7, #10]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005228:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	6a3a      	ldr	r2, [r7, #32]
 800522e:	492d      	ldr	r1, [pc, #180]	; (80052e4 <I2C_RequestMemoryWrite+0x128>)
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f998 	bl	8005566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e04c      	b.n	80052da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	6a39      	ldr	r1, [r7, #32]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fa02 	bl	8005664 <I2C_WaitOnTXEFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	2b04      	cmp	r3, #4
 800526c:	d107      	bne.n	800527e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e02b      	b.n	80052da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d105      	bne.n	8005294 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005288:	893b      	ldrh	r3, [r7, #8]
 800528a:	b2da      	uxtb	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	611a      	str	r2, [r3, #16]
 8005292:	e021      	b.n	80052d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005294:	893b      	ldrh	r3, [r7, #8]
 8005296:	0a1b      	lsrs	r3, r3, #8
 8005298:	b29b      	uxth	r3, r3
 800529a:	b2da      	uxtb	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	6a39      	ldr	r1, [r7, #32]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f9dc 	bl	8005664 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d107      	bne.n	80052ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e005      	b.n	80052da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052ce:	893b      	ldrh	r3, [r7, #8]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	00010002 	.word	0x00010002

080052e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	461a      	mov	r2, r3
 80052f6:	4603      	mov	r3, r0
 80052f8:	817b      	strh	r3, [r7, #10]
 80052fa:	460b      	mov	r3, r1
 80052fc:	813b      	strh	r3, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005310:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005320:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	2200      	movs	r2, #0
 800532a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f8c2 	bl	80054b8 <I2C_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00d      	beq.n	8005356 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005348:	d103      	bne.n	8005352 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e0aa      	b.n	80054ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005356:	897b      	ldrh	r3, [r7, #10]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005364:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	6a3a      	ldr	r2, [r7, #32]
 800536a:	4952      	ldr	r1, [pc, #328]	; (80054b4 <I2C_RequestMemoryRead+0x1cc>)
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f8fa 	bl	8005566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e097      	b.n	80054ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005394:	6a39      	ldr	r1, [r7, #32]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f964 	bl	8005664 <I2C_WaitOnTXEFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d107      	bne.n	80053ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e076      	b.n	80054ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d105      	bne.n	80053d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c4:	893b      	ldrh	r3, [r7, #8]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	611a      	str	r2, [r3, #16]
 80053ce:	e021      	b.n	8005414 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053d0:	893b      	ldrh	r3, [r7, #8]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e0:	6a39      	ldr	r1, [r7, #32]
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f93e 	bl	8005664 <I2C_WaitOnTXEFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00d      	beq.n	800540a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d107      	bne.n	8005406 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005404:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e050      	b.n	80054ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800540a:	893b      	ldrh	r3, [r7, #8]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005416:	6a39      	ldr	r1, [r7, #32]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f923 	bl	8005664 <I2C_WaitOnTXEFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00d      	beq.n	8005440 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	2b04      	cmp	r3, #4
 800542a:	d107      	bne.n	800543c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e035      	b.n	80054ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800544e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	2200      	movs	r2, #0
 8005458:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f82b 	bl	80054b8 <I2C_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00d      	beq.n	8005484 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005476:	d103      	bne.n	8005480 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e013      	b.n	80054ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005484:	897b      	ldrh	r3, [r7, #10]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	b2da      	uxtb	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	6a3a      	ldr	r2, [r7, #32]
 8005498:	4906      	ldr	r1, [pc, #24]	; (80054b4 <I2C_RequestMemoryRead+0x1cc>)
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f863 	bl	8005566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	00010002 	.word	0x00010002

080054b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054c8:	e025      	b.n	8005516 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d0:	d021      	beq.n	8005516 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d2:	f7fe fbdf 	bl	8003c94 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d302      	bcc.n	80054e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d116      	bne.n	8005516 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e023      	b.n	800555e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	0c1b      	lsrs	r3, r3, #16
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d10d      	bne.n	800553c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	43da      	mvns	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4013      	ands	r3, r2
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	bf0c      	ite	eq
 8005532:	2301      	moveq	r3, #1
 8005534:	2300      	movne	r3, #0
 8005536:	b2db      	uxtb	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	e00c      	b.n	8005556 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	43da      	mvns	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4013      	ands	r3, r2
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	429a      	cmp	r2, r3
 800555a:	d0b6      	beq.n	80054ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005574:	e051      	b.n	800561a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005584:	d123      	bne.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005594:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800559e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f043 0204 	orr.w	r2, r3, #4
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e046      	b.n	800565c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055d4:	d021      	beq.n	800561a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fe fb5d 	bl	8003c94 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d116      	bne.n	800561a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f043 0220 	orr.w	r2, r3, #32
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e020      	b.n	800565c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	d10c      	bne.n	800563e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	43da      	mvns	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4013      	ands	r3, r2
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	bf14      	ite	ne
 8005636:	2301      	movne	r3, #1
 8005638:	2300      	moveq	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	e00b      	b.n	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	43da      	mvns	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	4013      	ands	r3, r2
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf14      	ite	ne
 8005650:	2301      	movne	r3, #1
 8005652:	2300      	moveq	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d18d      	bne.n	8005576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005670:	e02d      	b.n	80056ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f8ce 	bl	8005814 <I2C_IsAcknowledgeFailed>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e02d      	b.n	80056de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005688:	d021      	beq.n	80056ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568a:	f7fe fb03 	bl	8003c94 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	429a      	cmp	r2, r3
 8005698:	d302      	bcc.n	80056a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d116      	bne.n	80056ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f043 0220 	orr.w	r2, r3, #32
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e007      	b.n	80056de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d8:	2b80      	cmp	r3, #128	; 0x80
 80056da:	d1ca      	bne.n	8005672 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056f2:	e02d      	b.n	8005750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f88d 	bl	8005814 <I2C_IsAcknowledgeFailed>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e02d      	b.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800570a:	d021      	beq.n	8005750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570c:	f7fe fac2 	bl	8003c94 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	429a      	cmp	r2, r3
 800571a:	d302      	bcc.n	8005722 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d116      	bne.n	8005750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	f043 0220 	orr.w	r2, r3, #32
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e007      	b.n	8005760 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b04      	cmp	r3, #4
 800575c:	d1ca      	bne.n	80056f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005774:	e042      	b.n	80057fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	2b10      	cmp	r3, #16
 8005782:	d119      	bne.n	80057b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0210 	mvn.w	r2, #16
 800578c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e029      	b.n	800580c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b8:	f7fe fa6c 	bl	8003c94 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d302      	bcc.n	80057ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d116      	bne.n	80057fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	f043 0220 	orr.w	r2, r3, #32
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e007      	b.n	800580c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d1b5      	bne.n	8005776 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582a:	d11b      	bne.n	8005864 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005834:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	f043 0204 	orr.w	r2, r3, #4
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr

08005870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e26c      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8087 	beq.w	800599e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005890:	4b92      	ldr	r3, [pc, #584]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 030c 	and.w	r3, r3, #12
 8005898:	2b04      	cmp	r3, #4
 800589a:	d00c      	beq.n	80058b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800589c:	4b8f      	ldr	r3, [pc, #572]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 030c 	and.w	r3, r3, #12
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d112      	bne.n	80058ce <HAL_RCC_OscConfig+0x5e>
 80058a8:	4b8c      	ldr	r3, [pc, #560]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b4:	d10b      	bne.n	80058ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b6:	4b89      	ldr	r3, [pc, #548]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d06c      	beq.n	800599c <HAL_RCC_OscConfig+0x12c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d168      	bne.n	800599c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e246      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d6:	d106      	bne.n	80058e6 <HAL_RCC_OscConfig+0x76>
 80058d8:	4b80      	ldr	r3, [pc, #512]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a7f      	ldr	r2, [pc, #508]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80058de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	e02e      	b.n	8005944 <HAL_RCC_OscConfig+0xd4>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10c      	bne.n	8005908 <HAL_RCC_OscConfig+0x98>
 80058ee:	4b7b      	ldr	r3, [pc, #492]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a7a      	ldr	r2, [pc, #488]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80058f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	4b78      	ldr	r3, [pc, #480]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a77      	ldr	r2, [pc, #476]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e01d      	b.n	8005944 <HAL_RCC_OscConfig+0xd4>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0xbc>
 8005912:	4b72      	ldr	r3, [pc, #456]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a71      	ldr	r2, [pc, #452]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	4b6f      	ldr	r3, [pc, #444]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a6e      	ldr	r2, [pc, #440]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e00b      	b.n	8005944 <HAL_RCC_OscConfig+0xd4>
 800592c:	4b6b      	ldr	r3, [pc, #428]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a6a      	ldr	r2, [pc, #424]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4b68      	ldr	r3, [pc, #416]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a67      	ldr	r2, [pc, #412]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 800593e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005942:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d013      	beq.n	8005974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594c:	f7fe f9a2 	bl	8003c94 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005954:	f7fe f99e 	bl	8003c94 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	; 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e1fa      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005966:	4b5d      	ldr	r3, [pc, #372]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0xe4>
 8005972:	e014      	b.n	800599e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005974:	f7fe f98e 	bl	8003c94 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800597c:	f7fe f98a 	bl	8003c94 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b64      	cmp	r3, #100	; 0x64
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e1e6      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800598e:	4b53      	ldr	r3, [pc, #332]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0x10c>
 800599a:	e000      	b.n	800599e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800599c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d063      	beq.n	8005a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059aa:	4b4c      	ldr	r3, [pc, #304]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f003 030c 	and.w	r3, r3, #12
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00b      	beq.n	80059ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80059b6:	4b49      	ldr	r3, [pc, #292]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 030c 	and.w	r3, r3, #12
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d11c      	bne.n	80059fc <HAL_RCC_OscConfig+0x18c>
 80059c2:	4b46      	ldr	r3, [pc, #280]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d116      	bne.n	80059fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ce:	4b43      	ldr	r3, [pc, #268]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <HAL_RCC_OscConfig+0x176>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d001      	beq.n	80059e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e1ba      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e6:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4939      	ldr	r1, [pc, #228]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059fa:	e03a      	b.n	8005a72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d020      	beq.n	8005a46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a04:	4b36      	ldr	r3, [pc, #216]	; (8005ae0 <HAL_RCC_OscConfig+0x270>)
 8005a06:	2201      	movs	r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0a:	f7fe f943 	bl	8003c94 <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a12:	f7fe f93f 	bl	8003c94 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e19b      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a24:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f0      	beq.n	8005a12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a30:	4b2a      	ldr	r3, [pc, #168]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4927      	ldr	r1, [pc, #156]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	600b      	str	r3, [r1, #0]
 8005a44:	e015      	b.n	8005a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a46:	4b26      	ldr	r3, [pc, #152]	; (8005ae0 <HAL_RCC_OscConfig+0x270>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4c:	f7fe f922 	bl	8003c94 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a54:	f7fe f91e 	bl	8003c94 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e17a      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a66:	4b1d      	ldr	r3, [pc, #116]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f0      	bne.n	8005a54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d03a      	beq.n	8005af4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d019      	beq.n	8005aba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a86:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <HAL_RCC_OscConfig+0x274>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a8c:	f7fe f902 	bl	8003c94 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a94:	f7fe f8fe 	bl	8003c94 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e15a      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <HAL_RCC_OscConfig+0x26c>)
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f0      	beq.n	8005a94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005ab2:	2001      	movs	r0, #1
 8005ab4:	f000 fad8 	bl	8006068 <RCC_Delay>
 8005ab8:	e01c      	b.n	8005af4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <HAL_RCC_OscConfig+0x274>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac0:	f7fe f8e8 	bl	8003c94 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac6:	e00f      	b.n	8005ae8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ac8:	f7fe f8e4 	bl	8003c94 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d908      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e140      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
 8005ada:	bf00      	nop
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	42420000 	.word	0x42420000
 8005ae4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ae8:	4b9e      	ldr	r3, [pc, #632]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e9      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80a6 	beq.w	8005c4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b02:	2300      	movs	r3, #0
 8005b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b06:	4b97      	ldr	r3, [pc, #604]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10d      	bne.n	8005b2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b12:	4b94      	ldr	r3, [pc, #592]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	4a93      	ldr	r2, [pc, #588]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	61d3      	str	r3, [r2, #28]
 8005b1e:	4b91      	ldr	r3, [pc, #580]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b26:	60bb      	str	r3, [r7, #8]
 8005b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b2e:	4b8e      	ldr	r3, [pc, #568]	; (8005d68 <HAL_RCC_OscConfig+0x4f8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d118      	bne.n	8005b6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b3a:	4b8b      	ldr	r3, [pc, #556]	; (8005d68 <HAL_RCC_OscConfig+0x4f8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a8a      	ldr	r2, [pc, #552]	; (8005d68 <HAL_RCC_OscConfig+0x4f8>)
 8005b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b46:	f7fe f8a5 	bl	8003c94 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b4e:	f7fe f8a1 	bl	8003c94 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b64      	cmp	r3, #100	; 0x64
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e0fd      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b60:	4b81      	ldr	r3, [pc, #516]	; (8005d68 <HAL_RCC_OscConfig+0x4f8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f0      	beq.n	8005b4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d106      	bne.n	8005b82 <HAL_RCC_OscConfig+0x312>
 8005b74:	4b7b      	ldr	r3, [pc, #492]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	4a7a      	ldr	r2, [pc, #488]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	6213      	str	r3, [r2, #32]
 8005b80:	e02d      	b.n	8005bde <HAL_RCC_OscConfig+0x36e>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x334>
 8005b8a:	4b76      	ldr	r3, [pc, #472]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	4a75      	ldr	r2, [pc, #468]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	6213      	str	r3, [r2, #32]
 8005b96:	4b73      	ldr	r3, [pc, #460]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	4a72      	ldr	r2, [pc, #456]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005b9c:	f023 0304 	bic.w	r3, r3, #4
 8005ba0:	6213      	str	r3, [r2, #32]
 8005ba2:	e01c      	b.n	8005bde <HAL_RCC_OscConfig+0x36e>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b05      	cmp	r3, #5
 8005baa:	d10c      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x356>
 8005bac:	4b6d      	ldr	r3, [pc, #436]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	4a6c      	ldr	r2, [pc, #432]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005bb2:	f043 0304 	orr.w	r3, r3, #4
 8005bb6:	6213      	str	r3, [r2, #32]
 8005bb8:	4b6a      	ldr	r3, [pc, #424]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	4a69      	ldr	r2, [pc, #420]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	6213      	str	r3, [r2, #32]
 8005bc4:	e00b      	b.n	8005bde <HAL_RCC_OscConfig+0x36e>
 8005bc6:	4b67      	ldr	r3, [pc, #412]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	4a66      	ldr	r2, [pc, #408]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	6213      	str	r3, [r2, #32]
 8005bd2:	4b64      	ldr	r3, [pc, #400]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	4a63      	ldr	r2, [pc, #396]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005bd8:	f023 0304 	bic.w	r3, r3, #4
 8005bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d015      	beq.n	8005c12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005be6:	f7fe f855 	bl	8003c94 <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bec:	e00a      	b.n	8005c04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bee:	f7fe f851 	bl	8003c94 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e0ab      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c04:	4b57      	ldr	r3, [pc, #348]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0ee      	beq.n	8005bee <HAL_RCC_OscConfig+0x37e>
 8005c10:	e014      	b.n	8005c3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c12:	f7fe f83f 	bl	8003c94 <HAL_GetTick>
 8005c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c18:	e00a      	b.n	8005c30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1a:	f7fe f83b 	bl	8003c94 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e095      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c30:	4b4c      	ldr	r3, [pc, #304]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1ee      	bne.n	8005c1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d105      	bne.n	8005c4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c42:	4b48      	ldr	r3, [pc, #288]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	4a47      	ldr	r2, [pc, #284]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8081 	beq.w	8005d5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c58:	4b42      	ldr	r3, [pc, #264]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 030c 	and.w	r3, r3, #12
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d061      	beq.n	8005d28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d146      	bne.n	8005cfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6c:	4b3f      	ldr	r3, [pc, #252]	; (8005d6c <HAL_RCC_OscConfig+0x4fc>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c72:	f7fe f80f 	bl	8003c94 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7a:	f7fe f80b 	bl	8003c94 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e067      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c8c:	4b35      	ldr	r3, [pc, #212]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f0      	bne.n	8005c7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca0:	d108      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ca2:	4b30      	ldr	r3, [pc, #192]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	492d      	ldr	r1, [pc, #180]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cb4:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a19      	ldr	r1, [r3, #32]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	4927      	ldr	r1, [pc, #156]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ccc:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <HAL_RCC_OscConfig+0x4fc>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd2:	f7fd ffdf 	bl	8003c94 <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cda:	f7fd ffdb 	bl	8003c94 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e037      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cec:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <HAL_RCC_OscConfig+0x46a>
 8005cf8:	e02f      	b.n	8005d5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfa:	4b1c      	ldr	r3, [pc, #112]	; (8005d6c <HAL_RCC_OscConfig+0x4fc>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d00:	f7fd ffc8 	bl	8003c94 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d08:	f7fd ffc4 	bl	8003c94 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e020      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d1a:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f0      	bne.n	8005d08 <HAL_RCC_OscConfig+0x498>
 8005d26:	e018      	b.n	8005d5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e013      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d34:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <HAL_RCC_OscConfig+0x4f4>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d106      	bne.n	8005d56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d001      	beq.n	8005d5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40007000 	.word	0x40007000
 8005d6c:	42420060 	.word	0x42420060

08005d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0d0      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d84:	4b6a      	ldr	r3, [pc, #424]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d910      	bls.n	8005db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d92:	4b67      	ldr	r3, [pc, #412]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f023 0207 	bic.w	r2, r3, #7
 8005d9a:	4965      	ldr	r1, [pc, #404]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da2:	4b63      	ldr	r3, [pc, #396]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d001      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e0b8      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d020      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dcc:	4b59      	ldr	r3, [pc, #356]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	4a58      	ldr	r2, [pc, #352]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005dd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005de4:	4b53      	ldr	r3, [pc, #332]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	4a52      	ldr	r2, [pc, #328]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005dee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005df0:	4b50      	ldr	r3, [pc, #320]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	494d      	ldr	r1, [pc, #308]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d040      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d107      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e16:	4b47      	ldr	r3, [pc, #284]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d115      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e07f      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e2e:	4b41      	ldr	r3, [pc, #260]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d109      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e073      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e3e:	4b3d      	ldr	r3, [pc, #244]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e06b      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e4e:	4b39      	ldr	r3, [pc, #228]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f023 0203 	bic.w	r2, r3, #3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	4936      	ldr	r1, [pc, #216]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e60:	f7fd ff18 	bl	8003c94 <HAL_GetTick>
 8005e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e66:	e00a      	b.n	8005e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e68:	f7fd ff14 	bl	8003c94 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e053      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7e:	4b2d      	ldr	r3, [pc, #180]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f003 020c 	and.w	r2, r3, #12
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d1eb      	bne.n	8005e68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e90:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d210      	bcs.n	8005ec0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9e:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f023 0207 	bic.w	r2, r3, #7
 8005ea6:	4922      	ldr	r1, [pc, #136]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eae:	4b20      	ldr	r3, [pc, #128]	; (8005f30 <HAL_RCC_ClockConfig+0x1c0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d001      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e032      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	4916      	ldr	r1, [pc, #88]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005eea:	4b12      	ldr	r3, [pc, #72]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	490e      	ldr	r1, [pc, #56]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005efe:	f000 f821 	bl	8005f44 <HAL_RCC_GetSysClockFreq>
 8005f02:	4602      	mov	r2, r0
 8005f04:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <HAL_RCC_ClockConfig+0x1c4>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	490a      	ldr	r1, [pc, #40]	; (8005f38 <HAL_RCC_ClockConfig+0x1c8>)
 8005f10:	5ccb      	ldrb	r3, [r1, r3]
 8005f12:	fa22 f303 	lsr.w	r3, r2, r3
 8005f16:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <HAL_RCC_ClockConfig+0x1cc>)
 8005f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <HAL_RCC_ClockConfig+0x1d0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fd fe76 	bl	8003c10 <HAL_InitTick>

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40022000 	.word	0x40022000
 8005f34:	40021000 	.word	0x40021000
 8005f38:	0800cff8 	.word	0x0800cff8
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	20000010 	.word	0x20000010

08005f44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f44:	b490      	push	{r4, r7}
 8005f46:	b08a      	sub	sp, #40	; 0x28
 8005f48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005f4a:	4b2a      	ldr	r3, [pc, #168]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f4c:	1d3c      	adds	r4, r7, #4
 8005f4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f54:	f240 2301 	movw	r3, #513	; 0x201
 8005f58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	2300      	movs	r3, #0
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f6e:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f003 030c 	and.w	r3, r3, #12
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d002      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0x40>
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d003      	beq.n	8005f8a <HAL_RCC_GetSysClockFreq+0x46>
 8005f82:	e02d      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f84:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f86:	623b      	str	r3, [r7, #32]
      break;
 8005f88:	e02d      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	0c9b      	lsrs	r3, r3, #18
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f96:	4413      	add	r3, r2
 8005f98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fa8:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	0c5b      	lsrs	r3, r3, #17
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005fbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	4a0e      	ldr	r2, [pc, #56]	; (8005ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fc2:	fb02 f203 	mul.w	r2, r2, r3
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fce:	e004      	b.n	8005fda <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	4a0b      	ldr	r2, [pc, #44]	; (8006000 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fd4:	fb02 f303 	mul.w	r3, r2, r3
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	623b      	str	r3, [r7, #32]
      break;
 8005fde:	e002      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005fe0:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fe2:	623b      	str	r3, [r7, #32]
      break;
 8005fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3728      	adds	r7, #40	; 0x28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc90      	pop	{r4, r7}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	0800cfe8 	.word	0x0800cfe8
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	007a1200 	.word	0x007a1200
 8006000:	003d0900 	.word	0x003d0900

08006004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006008:	4b02      	ldr	r3, [pc, #8]	; (8006014 <HAL_RCC_GetHCLKFreq+0x10>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr
 8006014:	2000000c 	.word	0x2000000c

08006018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800601c:	f7ff fff2 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006020:	4602      	mov	r2, r0
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	0a1b      	lsrs	r3, r3, #8
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	4903      	ldr	r1, [pc, #12]	; (800603c <HAL_RCC_GetPCLK1Freq+0x24>)
 800602e:	5ccb      	ldrb	r3, [r1, r3]
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40021000 	.word	0x40021000
 800603c:	0800d008 	.word	0x0800d008

08006040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006044:	f7ff ffde 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	0adb      	lsrs	r3, r3, #11
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	4903      	ldr	r1, [pc, #12]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40021000 	.word	0x40021000
 8006064:	0800d008 	.word	0x0800d008

08006068 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <RCC_Delay+0x34>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a0a      	ldr	r2, [pc, #40]	; (80060a0 <RCC_Delay+0x38>)
 8006076:	fba2 2303 	umull	r2, r3, r2, r3
 800607a:	0a5b      	lsrs	r3, r3, #9
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	fb02 f303 	mul.w	r3, r2, r3
 8006082:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006084:	bf00      	nop
  }
  while (Delay --);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1e5a      	subs	r2, r3, #1
 800608a:	60fa      	str	r2, [r7, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f9      	bne.n	8006084 <RCC_Delay+0x1c>
}
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr
 800609c:	2000000c 	.word	0x2000000c
 80060a0:	10624dd3 	.word	0x10624dd3

080060a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e041      	b.n	800613a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fd fbc4 	bl	8003858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f000 faec 	bl	80066c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e041      	b.n	80061d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f839 	bl	80061e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3304      	adds	r3, #4
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f000 fa9d 	bl	80066c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr
	...

080061f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d109      	bne.n	8006218 <HAL_TIM_PWM_Start+0x24>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	bf14      	ite	ne
 8006210:	2301      	movne	r3, #1
 8006212:	2300      	moveq	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	e022      	b.n	800625e <HAL_TIM_PWM_Start+0x6a>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b04      	cmp	r3, #4
 800621c:	d109      	bne.n	8006232 <HAL_TIM_PWM_Start+0x3e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b01      	cmp	r3, #1
 8006228:	bf14      	ite	ne
 800622a:	2301      	movne	r3, #1
 800622c:	2300      	moveq	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	e015      	b.n	800625e <HAL_TIM_PWM_Start+0x6a>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d109      	bne.n	800624c <HAL_TIM_PWM_Start+0x58>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e008      	b.n	800625e <HAL_TIM_PWM_Start+0x6a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	bf14      	ite	ne
 8006258:	2301      	movne	r3, #1
 800625a:	2300      	moveq	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e05e      	b.n	8006324 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d104      	bne.n	8006276 <HAL_TIM_PWM_Start+0x82>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006274:	e013      	b.n	800629e <HAL_TIM_PWM_Start+0xaa>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b04      	cmp	r3, #4
 800627a:	d104      	bne.n	8006286 <HAL_TIM_PWM_Start+0x92>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006284:	e00b      	b.n	800629e <HAL_TIM_PWM_Start+0xaa>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d104      	bne.n	8006296 <HAL_TIM_PWM_Start+0xa2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006294:	e003      	b.n	800629e <HAL_TIM_PWM_Start+0xaa>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2201      	movs	r2, #1
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fd18 	bl	8006cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1e      	ldr	r2, [pc, #120]	; (800632c <HAL_TIM_PWM_Start+0x138>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d107      	bne.n	80062c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a18      	ldr	r2, [pc, #96]	; (800632c <HAL_TIM_PWM_Start+0x138>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00e      	beq.n	80062ee <HAL_TIM_PWM_Start+0xfa>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d8:	d009      	beq.n	80062ee <HAL_TIM_PWM_Start+0xfa>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a14      	ldr	r2, [pc, #80]	; (8006330 <HAL_TIM_PWM_Start+0x13c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_TIM_PWM_Start+0xfa>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a12      	ldr	r2, [pc, #72]	; (8006334 <HAL_TIM_PWM_Start+0x140>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d111      	bne.n	8006312 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b06      	cmp	r3, #6
 80062fe:	d010      	beq.n	8006322 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006310:	e007      	b.n	8006322 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f042 0201 	orr.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40012c00 	.word	0x40012c00
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800

08006338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800634e:	2302      	movs	r3, #2
 8006350:	e0ac      	b.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	f200 809f 	bhi.w	80064a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	0800639d 	.word	0x0800639d
 800636c:	080064a1 	.word	0x080064a1
 8006370:	080064a1 	.word	0x080064a1
 8006374:	080064a1 	.word	0x080064a1
 8006378:	080063dd 	.word	0x080063dd
 800637c:	080064a1 	.word	0x080064a1
 8006380:	080064a1 	.word	0x080064a1
 8006384:	080064a1 	.word	0x080064a1
 8006388:	0800641f 	.word	0x0800641f
 800638c:	080064a1 	.word	0x080064a1
 8006390:	080064a1 	.word	0x080064a1
 8006394:	080064a1 	.word	0x080064a1
 8006398:	0800645f 	.word	0x0800645f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f9ee 	bl	8006784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0208 	orr.w	r2, r2, #8
 80063b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0204 	bic.w	r2, r2, #4
 80063c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6999      	ldr	r1, [r3, #24]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	691a      	ldr	r2, [r3, #16]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	619a      	str	r2, [r3, #24]
      break;
 80063da:	e062      	b.n	80064a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fa34 	bl	8006850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6999      	ldr	r1, [r3, #24]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	021a      	lsls	r2, r3, #8
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	619a      	str	r2, [r3, #24]
      break;
 800641c:	e041      	b.n	80064a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fa7d 	bl	8006924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0208 	orr.w	r2, r2, #8
 8006438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0204 	bic.w	r2, r2, #4
 8006448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69d9      	ldr	r1, [r3, #28]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	61da      	str	r2, [r3, #28]
      break;
 800645c:	e021      	b.n	80064a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fac7 	bl	80069f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69d9      	ldr	r1, [r3, #28]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	021a      	lsls	r2, r3, #8
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	61da      	str	r2, [r3, #28]
      break;
 800649e:	e000      	b.n	80064a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80064a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_TIM_ConfigClockSource+0x18>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e0b3      	b.n	8006634 <HAL_TIM_ConfigClockSource+0x180>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006504:	d03e      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0xd0>
 8006506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650a:	f200 8087 	bhi.w	800661c <HAL_TIM_ConfigClockSource+0x168>
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006512:	f000 8085 	beq.w	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651a:	d87f      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 800651c:	2b70      	cmp	r3, #112	; 0x70
 800651e:	d01a      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0xa2>
 8006520:	2b70      	cmp	r3, #112	; 0x70
 8006522:	d87b      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 8006524:	2b60      	cmp	r3, #96	; 0x60
 8006526:	d050      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x116>
 8006528:	2b60      	cmp	r3, #96	; 0x60
 800652a:	d877      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 800652c:	2b50      	cmp	r3, #80	; 0x50
 800652e:	d03c      	beq.n	80065aa <HAL_TIM_ConfigClockSource+0xf6>
 8006530:	2b50      	cmp	r3, #80	; 0x50
 8006532:	d873      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 8006534:	2b40      	cmp	r3, #64	; 0x40
 8006536:	d058      	beq.n	80065ea <HAL_TIM_ConfigClockSource+0x136>
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	d86f      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 800653c:	2b30      	cmp	r3, #48	; 0x30
 800653e:	d064      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x156>
 8006540:	2b30      	cmp	r3, #48	; 0x30
 8006542:	d86b      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 8006544:	2b20      	cmp	r3, #32
 8006546:	d060      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x156>
 8006548:	2b20      	cmp	r3, #32
 800654a:	d867      	bhi.n	800661c <HAL_TIM_ConfigClockSource+0x168>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d05c      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x156>
 8006550:	2b10      	cmp	r3, #16
 8006552:	d05a      	beq.n	800660a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006554:	e062      	b.n	800661c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	6899      	ldr	r1, [r3, #8]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f000 fb9a 	bl	8006c9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006578:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	609a      	str	r2, [r3, #8]
      break;
 8006582:	e04e      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6818      	ldr	r0, [r3, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	6899      	ldr	r1, [r3, #8]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f000 fb83 	bl	8006c9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065a6:	609a      	str	r2, [r3, #8]
      break;
 80065a8:	e03b      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6859      	ldr	r1, [r3, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f000 fafa 	bl	8006bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2150      	movs	r1, #80	; 0x50
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fb51 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 80065c8:	e02b      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6859      	ldr	r1, [r3, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	461a      	mov	r2, r3
 80065d8:	f000 fb18 	bl	8006c0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2160      	movs	r1, #96	; 0x60
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fb41 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 80065e8:	e01b      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	6859      	ldr	r1, [r3, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f000 fada 	bl	8006bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2140      	movs	r1, #64	; 0x40
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fb31 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 8006608:	e00b      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f000 fb28 	bl	8006c6a <TIM_ITRx_SetConfig>
        break;
 800661a:	e002      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800661c:	bf00      	nop
 800661e:	e000      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006620:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006650:	2302      	movs	r3, #2
 8006652:	e031      	b.n	80066b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa14 	bl	8006a94 <TIM_SlaveTimer_SetConfig>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e018      	b.n	80066b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006694:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066a4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a29      	ldr	r2, [pc, #164]	; (8006778 <TIM_Base_SetConfig+0xb8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00b      	beq.n	80066f0 <TIM_Base_SetConfig+0x30>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066de:	d007      	beq.n	80066f0 <TIM_Base_SetConfig+0x30>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a26      	ldr	r2, [pc, #152]	; (800677c <TIM_Base_SetConfig+0xbc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_Base_SetConfig+0x30>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a25      	ldr	r2, [pc, #148]	; (8006780 <TIM_Base_SetConfig+0xc0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d108      	bne.n	8006702 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1c      	ldr	r2, [pc, #112]	; (8006778 <TIM_Base_SetConfig+0xb8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00b      	beq.n	8006722 <TIM_Base_SetConfig+0x62>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006710:	d007      	beq.n	8006722 <TIM_Base_SetConfig+0x62>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a19      	ldr	r2, [pc, #100]	; (800677c <TIM_Base_SetConfig+0xbc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_Base_SetConfig+0x62>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a18      	ldr	r2, [pc, #96]	; (8006780 <TIM_Base_SetConfig+0xc0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d108      	bne.n	8006734 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a07      	ldr	r2, [pc, #28]	; (8006778 <TIM_Base_SetConfig+0xb8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d103      	bne.n	8006768 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	615a      	str	r2, [r3, #20]
}
 800676e:	bf00      	nop
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	40012c00 	.word	0x40012c00
 800677c:	40000400 	.word	0x40000400
 8006780:	40000800 	.word	0x40000800

08006784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f023 0201 	bic.w	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0303 	bic.w	r3, r3, #3
 80067ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f023 0302 	bic.w	r3, r3, #2
 80067cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a1c      	ldr	r2, [pc, #112]	; (800684c <TIM_OC1_SetConfig+0xc8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10c      	bne.n	80067fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f023 0308 	bic.w	r3, r3, #8
 80067e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f023 0304 	bic.w	r3, r3, #4
 80067f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a13      	ldr	r2, [pc, #76]	; (800684c <TIM_OC1_SetConfig+0xc8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d111      	bne.n	8006826 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	621a      	str	r2, [r3, #32]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	40012c00 	.word	0x40012c00

08006850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f023 0210 	bic.w	r2, r3, #16
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f023 0320 	bic.w	r3, r3, #32
 800689a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a1d      	ldr	r2, [pc, #116]	; (8006920 <TIM_OC2_SetConfig+0xd0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10d      	bne.n	80068cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a14      	ldr	r2, [pc, #80]	; (8006920 <TIM_OC2_SetConfig+0xd0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d113      	bne.n	80068fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	621a      	str	r2, [r3, #32]
}
 8006916:	bf00      	nop
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr
 8006920:	40012c00 	.word	0x40012c00

08006924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0303 	bic.w	r3, r3, #3
 800695a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800696c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a1d      	ldr	r2, [pc, #116]	; (80069f4 <TIM_OC3_SetConfig+0xd0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d10d      	bne.n	800699e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800699c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a14      	ldr	r2, [pc, #80]	; (80069f4 <TIM_OC3_SetConfig+0xd0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d113      	bne.n	80069ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	621a      	str	r2, [r3, #32]
}
 80069e8:	bf00      	nop
 80069ea:	371c      	adds	r7, #28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40012c00 	.word	0x40012c00

080069f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	031b      	lsls	r3, r3, #12
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a0f      	ldr	r2, [pc, #60]	; (8006a90 <TIM_OC4_SetConfig+0x98>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d109      	bne.n	8006a6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	019b      	lsls	r3, r3, #6
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr
 8006a90:	40012c00 	.word	0x40012c00

08006a94 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aac:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f023 0307 	bic.w	r3, r3, #7
 8006abe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b70      	cmp	r3, #112	; 0x70
 8006ad8:	d01a      	beq.n	8006b10 <TIM_SlaveTimer_SetConfig+0x7c>
 8006ada:	2b70      	cmp	r3, #112	; 0x70
 8006adc:	d860      	bhi.n	8006ba0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006ade:	2b60      	cmp	r3, #96	; 0x60
 8006ae0:	d054      	beq.n	8006b8c <TIM_SlaveTimer_SetConfig+0xf8>
 8006ae2:	2b60      	cmp	r3, #96	; 0x60
 8006ae4:	d85c      	bhi.n	8006ba0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006ae6:	2b50      	cmp	r3, #80	; 0x50
 8006ae8:	d046      	beq.n	8006b78 <TIM_SlaveTimer_SetConfig+0xe4>
 8006aea:	2b50      	cmp	r3, #80	; 0x50
 8006aec:	d858      	bhi.n	8006ba0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d019      	beq.n	8006b26 <TIM_SlaveTimer_SetConfig+0x92>
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d854      	bhi.n	8006ba0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006af6:	2b30      	cmp	r3, #48	; 0x30
 8006af8:	d054      	beq.n	8006ba4 <TIM_SlaveTimer_SetConfig+0x110>
 8006afa:	2b30      	cmp	r3, #48	; 0x30
 8006afc:	d850      	bhi.n	8006ba0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d050      	beq.n	8006ba4 <TIM_SlaveTimer_SetConfig+0x110>
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d84c      	bhi.n	8006ba0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d04c      	beq.n	8006ba4 <TIM_SlaveTimer_SetConfig+0x110>
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	d04a      	beq.n	8006ba4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006b0e:	e047      	b.n	8006ba0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6818      	ldr	r0, [r3, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68d9      	ldr	r1, [r3, #12]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f000 f8bd 	bl	8006c9e <TIM_ETR_SetConfig>
      break;
 8006b24:	e03f      	b.n	8006ba6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b05      	cmp	r3, #5
 8006b2c:	d101      	bne.n	8006b32 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e03a      	b.n	8006ba8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6a1a      	ldr	r2, [r3, #32]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0201 	bic.w	r2, r2, #1
 8006b48:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b58:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	621a      	str	r2, [r3, #32]
      break;
 8006b76:	e016      	b.n	8006ba6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	6899      	ldr	r1, [r3, #8]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	461a      	mov	r2, r3
 8006b86:	f000 f813 	bl	8006bb0 <TIM_TI1_ConfigInputStage>
      break;
 8006b8a:	e00c      	b.n	8006ba6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6899      	ldr	r1, [r3, #8]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f000 f837 	bl	8006c0c <TIM_TI2_ConfigInputStage>
      break;
 8006b9e:	e002      	b.n	8006ba6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006ba0:	bf00      	nop
 8006ba2:	e000      	b.n	8006ba6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8006ba4:	bf00      	nop
  }
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f023 0201 	bic.w	r2, r3, #1
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f023 030a 	bic.w	r3, r3, #10
 8006bec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f023 0210 	bic.w	r2, r3, #16
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	031b      	lsls	r3, r3, #12
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	621a      	str	r2, [r3, #32]
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr

08006c6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f043 0307 	orr.w	r3, r3, #7
 8006c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	609a      	str	r2, [r3, #8]
}
 8006c94:	bf00      	nop
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr

08006c9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b087      	sub	sp, #28
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
 8006caa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	021a      	lsls	r2, r3, #8
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	609a      	str	r2, [r3, #8]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr

08006cdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f003 031f 	and.w	r3, r3, #31
 8006cee:	2201      	movs	r2, #1
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1a      	ldr	r2, [r3, #32]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	401a      	ands	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1a      	ldr	r2, [r3, #32]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	fa01 f303 	lsl.w	r3, r1, r3
 8006d14:	431a      	orrs	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e046      	b.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a16      	ldr	r2, [pc, #88]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00e      	beq.n	8006d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d88:	d009      	beq.n	8006d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a12      	ldr	r2, [pc, #72]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d004      	beq.n	8006d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a10      	ldr	r2, [pc, #64]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d10c      	bne.n	8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40000400 	.word	0x40000400
 8006ddc:	40000800 	.word	0x40000800

08006de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e03f      	b.n	8006e72 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fc fd72 	bl	80038f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2224      	movs	r2, #36	; 0x24
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fba9 	bl	800757c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695a      	ldr	r2, [r3, #20]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	4613      	mov	r3, r2
 8006e86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d11d      	bne.n	8006ed0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <HAL_UART_Receive_IT+0x26>
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e016      	b.n	8006ed2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d101      	bne.n	8006eb2 <HAL_UART_Receive_IT+0x38>
 8006eae:	2302      	movs	r3, #2
 8006eb0:	e00f      	b.n	8006ed2 <HAL_UART_Receive_IT+0x58>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006ec0:	88fb      	ldrh	r3, [r7, #6]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	68b9      	ldr	r1, [r7, #8]
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 f9cf 	bl	800726a <UART_Start_Receive_IT>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	e000      	b.n	8006ed2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ed0:	2302      	movs	r3, #2
  }
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	; 0x28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10d      	bne.n	8006f2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d008      	beq.n	8006f2e <HAL_UART_IRQHandler+0x52>
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa7f 	bl	800742a <UART_Receive_IT>
      return;
 8006f2c:	e17b      	b.n	8007226 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80b1 	beq.w	8007098 <HAL_UART_IRQHandler+0x1bc>
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d105      	bne.n	8006f4c <HAL_UART_IRQHandler+0x70>
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 80a6 	beq.w	8007098 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <HAL_UART_IRQHandler+0x90>
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	f043 0201 	orr.w	r2, r3, #1
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	f003 0304 	and.w	r3, r3, #4
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <HAL_UART_IRQHandler+0xb0>
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d005      	beq.n	8006f8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	f043 0202 	orr.w	r2, r3, #2
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <HAL_UART_IRQHandler+0xd0>
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	f043 0204 	orr.w	r2, r3, #4
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00f      	beq.n	8006fd6 <HAL_UART_IRQHandler+0xfa>
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	f003 0320 	and.w	r3, r3, #32
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <HAL_UART_IRQHandler+0xee>
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	f043 0208 	orr.w	r2, r3, #8
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 811e 	beq.w	800721c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <HAL_UART_IRQHandler+0x11e>
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	f003 0320 	and.w	r3, r3, #32
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fa18 	bl	800742a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007004:	2b00      	cmp	r3, #0
 8007006:	bf14      	ite	ne
 8007008:	2301      	movne	r3, #1
 800700a:	2300      	moveq	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	f003 0308 	and.w	r3, r3, #8
 8007018:	2b00      	cmp	r3, #0
 800701a:	d102      	bne.n	8007022 <HAL_UART_IRQHandler+0x146>
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d031      	beq.n	8007086 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f95a 	bl	80072dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	d023      	beq.n	800707e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695a      	ldr	r2, [r3, #20]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007044:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	2b00      	cmp	r3, #0
 800704c:	d013      	beq.n	8007076 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	4a76      	ldr	r2, [pc, #472]	; (800722c <HAL_UART_IRQHandler+0x350>)
 8007054:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705a:	4618      	mov	r0, r3
 800705c:	f7fd f9ae 	bl	80043bc <HAL_DMA_Abort_IT>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d016      	beq.n	8007094 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007074:	e00e      	b.n	8007094 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f8e3 	bl	8007242 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707c:	e00a      	b.n	8007094 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f8df 	bl	8007242 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007084:	e006      	b.n	8007094 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f8db 	bl	8007242 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007092:	e0c3      	b.n	800721c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	bf00      	nop
    return;
 8007096:	e0c1      	b.n	800721c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	2b01      	cmp	r3, #1
 800709e:	f040 80a1 	bne.w	80071e4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 809b 	beq.w	80071e4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	f003 0310 	and.w	r3, r3, #16
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8095 	beq.w	80071e4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d04e      	beq.n	800717c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80070e8:	8a3b      	ldrh	r3, [r7, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 8098 	beq.w	8007220 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070f4:	8a3a      	ldrh	r2, [r7, #16]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	f080 8092 	bcs.w	8007220 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	8a3a      	ldrh	r2, [r7, #16]
 8007100:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	2b20      	cmp	r3, #32
 800710a:	d02b      	beq.n	8007164 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800711a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695a      	ldr	r2, [r3, #20]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0201 	bic.w	r2, r2, #1
 800712a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695a      	ldr	r2, [r3, #20]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800713a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0210 	bic.w	r2, r2, #16
 8007158:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	4618      	mov	r0, r3
 8007160:	f7fd f8f1 	bl	8004346 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800716c:	b29b      	uxth	r3, r3
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	b29b      	uxth	r3, r3
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f86d 	bl	8007254 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800717a:	e051      	b.n	8007220 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007184:	b29b      	uxth	r3, r3
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d047      	beq.n	8007224 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007194:	8a7b      	ldrh	r3, [r7, #18]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d044      	beq.n	8007224 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80071a8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695a      	ldr	r2, [r3, #20]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0201 	bic.w	r2, r2, #1
 80071b8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0210 	bic.w	r2, r2, #16
 80071d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071d8:	8a7b      	ldrh	r3, [r7, #18]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f839 	bl	8007254 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80071e2:	e01f      	b.n	8007224 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d008      	beq.n	8007200 <HAL_UART_IRQHandler+0x324>
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f8af 	bl	800735c <UART_Transmit_IT>
    return;
 80071fe:	e012      	b.n	8007226 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00d      	beq.n	8007226 <HAL_UART_IRQHandler+0x34a>
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f8f0 	bl	80073fa <UART_EndTransmit_IT>
    return;
 800721a:	e004      	b.n	8007226 <HAL_UART_IRQHandler+0x34a>
    return;
 800721c:	bf00      	nop
 800721e:	e002      	b.n	8007226 <HAL_UART_IRQHandler+0x34a>
      return;
 8007220:	bf00      	nop
 8007222:	e000      	b.n	8007226 <HAL_UART_IRQHandler+0x34a>
      return;
 8007224:	bf00      	nop
  }
}
 8007226:	3728      	adds	r7, #40	; 0x28
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	08007335 	.word	0x08007335

08007230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	bc80      	pop	{r7}
 8007240:	4770      	bx	lr

08007242 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr

08007254 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr

0800726a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	4613      	mov	r3, r2
 8007276:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	88fa      	ldrh	r2, [r7, #6]
 8007282:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	88fa      	ldrh	r2, [r7, #6]
 8007288:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2222      	movs	r2, #34	; 0x22
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072ae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695a      	ldr	r2, [r3, #20]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0201 	orr.w	r2, r2, #1
 80072be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0220 	orr.w	r2, r2, #32
 80072ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bc80      	pop	{r7}
 80072da:	4770      	bx	lr

080072dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	695a      	ldr	r2, [r3, #20]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0201 	bic.w	r2, r2, #1
 8007302:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	2b01      	cmp	r3, #1
 800730a:	d107      	bne.n	800731c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0210 	bic.w	r2, r2, #16
 800731a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2220      	movs	r2, #32
 8007320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	631a      	str	r2, [r3, #48]	; 0x30
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	bc80      	pop	{r7}
 8007332:	4770      	bx	lr

08007334 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff ff77 	bl	8007242 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007354:	bf00      	nop
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b21      	cmp	r3, #33	; 0x21
 800736e:	d13e      	bne.n	80073ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007378:	d114      	bne.n	80073a4 <UART_Transmit_IT+0x48>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d110      	bne.n	80073a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007396:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	1c9a      	adds	r2, r3, #2
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	621a      	str	r2, [r3, #32]
 80073a2:	e008      	b.n	80073b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	1c59      	adds	r1, r3, #1
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6211      	str	r1, [r2, #32]
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29b      	uxth	r3, r3
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4619      	mov	r1, r3
 80073c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10f      	bne.n	80073ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	e000      	b.n	80073f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073ee:	2302      	movs	r3, #2
  }
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr

080073fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007410:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff ff08 	bl	8007230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b086      	sub	sp, #24
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b22      	cmp	r3, #34	; 0x22
 800743c:	f040 8099 	bne.w	8007572 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007448:	d117      	bne.n	800747a <UART_Receive_IT+0x50>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d113      	bne.n	800747a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	b29b      	uxth	r3, r3
 8007464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007468:	b29a      	uxth	r2, r3
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	1c9a      	adds	r2, r3, #2
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	629a      	str	r2, [r3, #40]	; 0x28
 8007478:	e026      	b.n	80074c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007480:	2300      	movs	r3, #0
 8007482:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748c:	d007      	beq.n	800749e <UART_Receive_IT+0x74>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <UART_Receive_IT+0x82>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	e008      	b.n	80074be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	4619      	mov	r1, r3
 80074d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d148      	bne.n	800756e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0220 	bic.w	r2, r2, #32
 80074ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695a      	ldr	r2, [r3, #20]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2220      	movs	r2, #32
 8007510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	2b01      	cmp	r3, #1
 800751a:	d123      	bne.n	8007564 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0210 	bic.w	r2, r2, #16
 8007530:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0310 	and.w	r3, r3, #16
 800753c:	2b10      	cmp	r3, #16
 800753e:	d10a      	bne.n	8007556 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff fe79 	bl	8007254 <HAL_UARTEx_RxEventCallback>
 8007562:	e002      	b.n	800756a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7fb fc37 	bl	8002dd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	e002      	b.n	8007574 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	e000      	b.n	8007574 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007572:	2302      	movs	r3, #2
  }
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80075b6:	f023 030c 	bic.w	r3, r3, #12
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	430b      	orrs	r3, r1
 80075c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	699a      	ldr	r2, [r3, #24]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a2c      	ldr	r2, [pc, #176]	; (8007690 <UART_SetConfig+0x114>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d103      	bne.n	80075ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80075e4:	f7fe fd2c 	bl	8006040 <HAL_RCC_GetPCLK2Freq>
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	e002      	b.n	80075f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80075ec:	f7fe fd14 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 80075f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	009a      	lsls	r2, r3, #2
 80075fc:	441a      	add	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	fbb2 f3f3 	udiv	r3, r2, r3
 8007608:	4a22      	ldr	r2, [pc, #136]	; (8007694 <UART_SetConfig+0x118>)
 800760a:	fba2 2303 	umull	r2, r3, r2, r3
 800760e:	095b      	lsrs	r3, r3, #5
 8007610:	0119      	lsls	r1, r3, #4
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009a      	lsls	r2, r3, #2
 800761c:	441a      	add	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	fbb2 f2f3 	udiv	r2, r2, r3
 8007628:	4b1a      	ldr	r3, [pc, #104]	; (8007694 <UART_SetConfig+0x118>)
 800762a:	fba3 0302 	umull	r0, r3, r3, r2
 800762e:	095b      	lsrs	r3, r3, #5
 8007630:	2064      	movs	r0, #100	; 0x64
 8007632:	fb00 f303 	mul.w	r3, r0, r3
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	3332      	adds	r3, #50	; 0x32
 800763c:	4a15      	ldr	r2, [pc, #84]	; (8007694 <UART_SetConfig+0x118>)
 800763e:	fba2 2303 	umull	r2, r3, r2, r3
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007648:	4419      	add	r1, r3
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009a      	lsls	r2, r3, #2
 8007654:	441a      	add	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007660:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <UART_SetConfig+0x118>)
 8007662:	fba3 0302 	umull	r0, r3, r3, r2
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	2064      	movs	r0, #100	; 0x64
 800766a:	fb00 f303 	mul.w	r3, r0, r3
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	3332      	adds	r3, #50	; 0x32
 8007674:	4a07      	ldr	r2, [pc, #28]	; (8007694 <UART_SetConfig+0x118>)
 8007676:	fba2 2303 	umull	r2, r3, r2, r3
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	f003 020f 	and.w	r2, r3, #15
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	440a      	add	r2, r1
 8007686:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007688:	bf00      	nop
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	40013800 	.word	0x40013800
 8007694:	51eb851f 	.word	0x51eb851f

08007698 <_ZdlPvj>:
 8007698:	f000 b824 	b.w	80076e4 <_ZdlPv>

0800769c <_ZdaPv>:
 800769c:	f000 b822 	b.w	80076e4 <_ZdlPv>

080076a0 <__cxa_guard_acquire>:
 80076a0:	6802      	ldr	r2, [r0, #0]
 80076a2:	4603      	mov	r3, r0
 80076a4:	07d2      	lsls	r2, r2, #31
 80076a6:	d405      	bmi.n	80076b4 <__cxa_guard_acquire+0x14>
 80076a8:	7842      	ldrb	r2, [r0, #1]
 80076aa:	b102      	cbz	r2, 80076ae <__cxa_guard_acquire+0xe>
 80076ac:	deff      	udf	#255	; 0xff
 80076ae:	2001      	movs	r0, #1
 80076b0:	7058      	strb	r0, [r3, #1]
 80076b2:	4770      	bx	lr
 80076b4:	2000      	movs	r0, #0
 80076b6:	4770      	bx	lr

080076b8 <__cxa_guard_release>:
 80076b8:	2301      	movs	r3, #1
 80076ba:	6003      	str	r3, [r0, #0]
 80076bc:	4770      	bx	lr

080076be <_Znwj>:
 80076be:	2801      	cmp	r0, #1
 80076c0:	bf38      	it	cc
 80076c2:	2001      	movcc	r0, #1
 80076c4:	b510      	push	{r4, lr}
 80076c6:	4604      	mov	r4, r0
 80076c8:	4620      	mov	r0, r4
 80076ca:	f001 f805 	bl	80086d8 <malloc>
 80076ce:	b930      	cbnz	r0, 80076de <_Znwj+0x20>
 80076d0:	f000 f80a 	bl	80076e8 <_ZSt15get_new_handlerv>
 80076d4:	b908      	cbnz	r0, 80076da <_Znwj+0x1c>
 80076d6:	f000 ffc3 	bl	8008660 <abort>
 80076da:	4780      	blx	r0
 80076dc:	e7f4      	b.n	80076c8 <_Znwj+0xa>
 80076de:	bd10      	pop	{r4, pc}

080076e0 <_Znaj>:
 80076e0:	f7ff bfed 	b.w	80076be <_Znwj>

080076e4 <_ZdlPv>:
 80076e4:	f001 b800 	b.w	80086e8 <free>

080076e8 <_ZSt15get_new_handlerv>:
 80076e8:	4b02      	ldr	r3, [pc, #8]	; (80076f4 <_ZSt15get_new_handlerv+0xc>)
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	f3bf 8f5b 	dmb	ish
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	200004f4 	.word	0x200004f4

080076f8 <sinf>:
 80076f8:	b507      	push	{r0, r1, r2, lr}
 80076fa:	4a19      	ldr	r2, [pc, #100]	; (8007760 <sinf+0x68>)
 80076fc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007700:	4293      	cmp	r3, r2
 8007702:	4601      	mov	r1, r0
 8007704:	dc04      	bgt.n	8007710 <sinf+0x18>
 8007706:	2200      	movs	r2, #0
 8007708:	2100      	movs	r1, #0
 800770a:	f000 fe9d 	bl	8008448 <__kernel_sinf>
 800770e:	e004      	b.n	800771a <sinf+0x22>
 8007710:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007714:	db04      	blt.n	8007720 <sinf+0x28>
 8007716:	f7f9 fa2b 	bl	8000b70 <__aeabi_fsub>
 800771a:	b003      	add	sp, #12
 800771c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007720:	4669      	mov	r1, sp
 8007722:	f000 f9ab 	bl	8007a7c <__ieee754_rem_pio2f>
 8007726:	f000 0003 	and.w	r0, r0, #3
 800772a:	2801      	cmp	r0, #1
 800772c:	d006      	beq.n	800773c <sinf+0x44>
 800772e:	2802      	cmp	r0, #2
 8007730:	d009      	beq.n	8007746 <sinf+0x4e>
 8007732:	b980      	cbnz	r0, 8007756 <sinf+0x5e>
 8007734:	2201      	movs	r2, #1
 8007736:	9901      	ldr	r1, [sp, #4]
 8007738:	9800      	ldr	r0, [sp, #0]
 800773a:	e7e6      	b.n	800770a <sinf+0x12>
 800773c:	9901      	ldr	r1, [sp, #4]
 800773e:	9800      	ldr	r0, [sp, #0]
 8007740:	f000 fb4c 	bl	8007ddc <__kernel_cosf>
 8007744:	e7e9      	b.n	800771a <sinf+0x22>
 8007746:	2201      	movs	r2, #1
 8007748:	9901      	ldr	r1, [sp, #4]
 800774a:	9800      	ldr	r0, [sp, #0]
 800774c:	f000 fe7c 	bl	8008448 <__kernel_sinf>
 8007750:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007754:	e7e1      	b.n	800771a <sinf+0x22>
 8007756:	9901      	ldr	r1, [sp, #4]
 8007758:	9800      	ldr	r0, [sp, #0]
 800775a:	f000 fb3f 	bl	8007ddc <__kernel_cosf>
 800775e:	e7f7      	b.n	8007750 <sinf+0x58>
 8007760:	3f490fd8 	.word	0x3f490fd8

08007764 <asinf>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4604      	mov	r4, r0
 8007768:	f000 f844 	bl	80077f4 <__ieee754_asinf>
 800776c:	4b0e      	ldr	r3, [pc, #56]	; (80077a8 <asinf+0x44>)
 800776e:	4605      	mov	r5, r0
 8007770:	f993 3000 	ldrsb.w	r3, [r3]
 8007774:	3301      	adds	r3, #1
 8007776:	d015      	beq.n	80077a4 <asinf+0x40>
 8007778:	4621      	mov	r1, r4
 800777a:	4620      	mov	r0, r4
 800777c:	f7f9 fcc8 	bl	8001110 <__aeabi_fcmpun>
 8007780:	b980      	cbnz	r0, 80077a4 <asinf+0x40>
 8007782:	4620      	mov	r0, r4
 8007784:	f000 fed6 	bl	8008534 <fabsf>
 8007788:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800778c:	f7f9 fcb6 	bl	80010fc <__aeabi_fcmpgt>
 8007790:	b140      	cbz	r0, 80077a4 <asinf+0x40>
 8007792:	f000 ff77 	bl	8008684 <__errno>
 8007796:	2321      	movs	r3, #33	; 0x21
 8007798:	6003      	str	r3, [r0, #0]
 800779a:	4804      	ldr	r0, [pc, #16]	; (80077ac <asinf+0x48>)
 800779c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077a0:	f000 bf0e 	b.w	80085c0 <nanf>
 80077a4:	4628      	mov	r0, r5
 80077a6:	bd38      	pop	{r3, r4, r5, pc}
 80077a8:	20000015 	.word	0x20000015
 80077ac:	0800d830 	.word	0x0800d830

080077b0 <sqrtf>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4605      	mov	r5, r0
 80077b4:	f000 fac0 	bl	8007d38 <__ieee754_sqrtf>
 80077b8:	4b0d      	ldr	r3, [pc, #52]	; (80077f0 <sqrtf+0x40>)
 80077ba:	4604      	mov	r4, r0
 80077bc:	f993 3000 	ldrsb.w	r3, [r3]
 80077c0:	3301      	adds	r3, #1
 80077c2:	d012      	beq.n	80077ea <sqrtf+0x3a>
 80077c4:	4629      	mov	r1, r5
 80077c6:	4628      	mov	r0, r5
 80077c8:	f7f9 fca2 	bl	8001110 <__aeabi_fcmpun>
 80077cc:	b968      	cbnz	r0, 80077ea <sqrtf+0x3a>
 80077ce:	2100      	movs	r1, #0
 80077d0:	4628      	mov	r0, r5
 80077d2:	f7f9 fc75 	bl	80010c0 <__aeabi_fcmplt>
 80077d6:	b140      	cbz	r0, 80077ea <sqrtf+0x3a>
 80077d8:	f000 ff54 	bl	8008684 <__errno>
 80077dc:	2321      	movs	r3, #33	; 0x21
 80077de:	2100      	movs	r1, #0
 80077e0:	6003      	str	r3, [r0, #0]
 80077e2:	4608      	mov	r0, r1
 80077e4:	f7f9 fb82 	bl	8000eec <__aeabi_fdiv>
 80077e8:	4604      	mov	r4, r0
 80077ea:	4620      	mov	r0, r4
 80077ec:	bd38      	pop	{r3, r4, r5, pc}
 80077ee:	bf00      	nop
 80077f0:	20000015 	.word	0x20000015

080077f4 <__ieee754_asinf>:
 80077f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f8:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80077fc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8007800:	4604      	mov	r4, r0
 8007802:	4605      	mov	r5, r0
 8007804:	d10c      	bne.n	8007820 <__ieee754_asinf+0x2c>
 8007806:	498d      	ldr	r1, [pc, #564]	; (8007a3c <__ieee754_asinf+0x248>)
 8007808:	f7f9 fabc 	bl	8000d84 <__aeabi_fmul>
 800780c:	498c      	ldr	r1, [pc, #560]	; (8007a40 <__ieee754_asinf+0x24c>)
 800780e:	4605      	mov	r5, r0
 8007810:	4620      	mov	r0, r4
 8007812:	f7f9 fab7 	bl	8000d84 <__aeabi_fmul>
 8007816:	4601      	mov	r1, r0
 8007818:	4628      	mov	r0, r5
 800781a:	f7f9 f9ab 	bl	8000b74 <__addsf3>
 800781e:	e006      	b.n	800782e <__ieee754_asinf+0x3a>
 8007820:	dd07      	ble.n	8007832 <__ieee754_asinf+0x3e>
 8007822:	4601      	mov	r1, r0
 8007824:	f7f9 f9a4 	bl	8000b70 <__aeabi_fsub>
 8007828:	4601      	mov	r1, r0
 800782a:	f7f9 fb5f 	bl	8000eec <__aeabi_fdiv>
 800782e:	4604      	mov	r4, r0
 8007830:	e00e      	b.n	8007850 <__ieee754_asinf+0x5c>
 8007832:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8007836:	da58      	bge.n	80078ea <__ieee754_asinf+0xf6>
 8007838:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800783c:	da0b      	bge.n	8007856 <__ieee754_asinf+0x62>
 800783e:	4981      	ldr	r1, [pc, #516]	; (8007a44 <__ieee754_asinf+0x250>)
 8007840:	f7f9 f998 	bl	8000b74 <__addsf3>
 8007844:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007848:	f7f9 fc58 	bl	80010fc <__aeabi_fcmpgt>
 800784c:	2800      	cmp	r0, #0
 800784e:	d04c      	beq.n	80078ea <__ieee754_asinf+0xf6>
 8007850:	4620      	mov	r0, r4
 8007852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007856:	4601      	mov	r1, r0
 8007858:	f7f9 fa94 	bl	8000d84 <__aeabi_fmul>
 800785c:	4605      	mov	r5, r0
 800785e:	497a      	ldr	r1, [pc, #488]	; (8007a48 <__ieee754_asinf+0x254>)
 8007860:	f7f9 fa90 	bl	8000d84 <__aeabi_fmul>
 8007864:	4979      	ldr	r1, [pc, #484]	; (8007a4c <__ieee754_asinf+0x258>)
 8007866:	f7f9 f985 	bl	8000b74 <__addsf3>
 800786a:	4629      	mov	r1, r5
 800786c:	f7f9 fa8a 	bl	8000d84 <__aeabi_fmul>
 8007870:	4977      	ldr	r1, [pc, #476]	; (8007a50 <__ieee754_asinf+0x25c>)
 8007872:	f7f9 f97d 	bl	8000b70 <__aeabi_fsub>
 8007876:	4629      	mov	r1, r5
 8007878:	f7f9 fa84 	bl	8000d84 <__aeabi_fmul>
 800787c:	4975      	ldr	r1, [pc, #468]	; (8007a54 <__ieee754_asinf+0x260>)
 800787e:	f7f9 f979 	bl	8000b74 <__addsf3>
 8007882:	4629      	mov	r1, r5
 8007884:	f7f9 fa7e 	bl	8000d84 <__aeabi_fmul>
 8007888:	4973      	ldr	r1, [pc, #460]	; (8007a58 <__ieee754_asinf+0x264>)
 800788a:	f7f9 f971 	bl	8000b70 <__aeabi_fsub>
 800788e:	4629      	mov	r1, r5
 8007890:	f7f9 fa78 	bl	8000d84 <__aeabi_fmul>
 8007894:	4971      	ldr	r1, [pc, #452]	; (8007a5c <__ieee754_asinf+0x268>)
 8007896:	f7f9 f96d 	bl	8000b74 <__addsf3>
 800789a:	4629      	mov	r1, r5
 800789c:	f7f9 fa72 	bl	8000d84 <__aeabi_fmul>
 80078a0:	496f      	ldr	r1, [pc, #444]	; (8007a60 <__ieee754_asinf+0x26c>)
 80078a2:	4606      	mov	r6, r0
 80078a4:	4628      	mov	r0, r5
 80078a6:	f7f9 fa6d 	bl	8000d84 <__aeabi_fmul>
 80078aa:	496e      	ldr	r1, [pc, #440]	; (8007a64 <__ieee754_asinf+0x270>)
 80078ac:	f7f9 f960 	bl	8000b70 <__aeabi_fsub>
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f9 fa67 	bl	8000d84 <__aeabi_fmul>
 80078b6:	496c      	ldr	r1, [pc, #432]	; (8007a68 <__ieee754_asinf+0x274>)
 80078b8:	f7f9 f95c 	bl	8000b74 <__addsf3>
 80078bc:	4629      	mov	r1, r5
 80078be:	f7f9 fa61 	bl	8000d84 <__aeabi_fmul>
 80078c2:	496a      	ldr	r1, [pc, #424]	; (8007a6c <__ieee754_asinf+0x278>)
 80078c4:	f7f9 f954 	bl	8000b70 <__aeabi_fsub>
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f9 fa5b 	bl	8000d84 <__aeabi_fmul>
 80078ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80078d2:	f7f9 f94f 	bl	8000b74 <__addsf3>
 80078d6:	4601      	mov	r1, r0
 80078d8:	4630      	mov	r0, r6
 80078da:	f7f9 fb07 	bl	8000eec <__aeabi_fdiv>
 80078de:	4621      	mov	r1, r4
 80078e0:	f7f9 fa50 	bl	8000d84 <__aeabi_fmul>
 80078e4:	4601      	mov	r1, r0
 80078e6:	4620      	mov	r0, r4
 80078e8:	e797      	b.n	800781a <__ieee754_asinf+0x26>
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 fe22 	bl	8008534 <fabsf>
 80078f0:	4601      	mov	r1, r0
 80078f2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80078f6:	f7f9 f93b 	bl	8000b70 <__aeabi_fsub>
 80078fa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80078fe:	f7f9 fa41 	bl	8000d84 <__aeabi_fmul>
 8007902:	4606      	mov	r6, r0
 8007904:	4950      	ldr	r1, [pc, #320]	; (8007a48 <__ieee754_asinf+0x254>)
 8007906:	f7f9 fa3d 	bl	8000d84 <__aeabi_fmul>
 800790a:	4950      	ldr	r1, [pc, #320]	; (8007a4c <__ieee754_asinf+0x258>)
 800790c:	f7f9 f932 	bl	8000b74 <__addsf3>
 8007910:	4631      	mov	r1, r6
 8007912:	f7f9 fa37 	bl	8000d84 <__aeabi_fmul>
 8007916:	494e      	ldr	r1, [pc, #312]	; (8007a50 <__ieee754_asinf+0x25c>)
 8007918:	f7f9 f92a 	bl	8000b70 <__aeabi_fsub>
 800791c:	4631      	mov	r1, r6
 800791e:	f7f9 fa31 	bl	8000d84 <__aeabi_fmul>
 8007922:	494c      	ldr	r1, [pc, #304]	; (8007a54 <__ieee754_asinf+0x260>)
 8007924:	f7f9 f926 	bl	8000b74 <__addsf3>
 8007928:	4631      	mov	r1, r6
 800792a:	f7f9 fa2b 	bl	8000d84 <__aeabi_fmul>
 800792e:	494a      	ldr	r1, [pc, #296]	; (8007a58 <__ieee754_asinf+0x264>)
 8007930:	f7f9 f91e 	bl	8000b70 <__aeabi_fsub>
 8007934:	4631      	mov	r1, r6
 8007936:	f7f9 fa25 	bl	8000d84 <__aeabi_fmul>
 800793a:	4948      	ldr	r1, [pc, #288]	; (8007a5c <__ieee754_asinf+0x268>)
 800793c:	f7f9 f91a 	bl	8000b74 <__addsf3>
 8007940:	4631      	mov	r1, r6
 8007942:	f7f9 fa1f 	bl	8000d84 <__aeabi_fmul>
 8007946:	4946      	ldr	r1, [pc, #280]	; (8007a60 <__ieee754_asinf+0x26c>)
 8007948:	4681      	mov	r9, r0
 800794a:	4630      	mov	r0, r6
 800794c:	f7f9 fa1a 	bl	8000d84 <__aeabi_fmul>
 8007950:	4944      	ldr	r1, [pc, #272]	; (8007a64 <__ieee754_asinf+0x270>)
 8007952:	f7f9 f90d 	bl	8000b70 <__aeabi_fsub>
 8007956:	4631      	mov	r1, r6
 8007958:	f7f9 fa14 	bl	8000d84 <__aeabi_fmul>
 800795c:	4942      	ldr	r1, [pc, #264]	; (8007a68 <__ieee754_asinf+0x274>)
 800795e:	f7f9 f909 	bl	8000b74 <__addsf3>
 8007962:	4631      	mov	r1, r6
 8007964:	f7f9 fa0e 	bl	8000d84 <__aeabi_fmul>
 8007968:	4940      	ldr	r1, [pc, #256]	; (8007a6c <__ieee754_asinf+0x278>)
 800796a:	f7f9 f901 	bl	8000b70 <__aeabi_fsub>
 800796e:	4631      	mov	r1, r6
 8007970:	f7f9 fa08 	bl	8000d84 <__aeabi_fmul>
 8007974:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007978:	f7f9 f8fc 	bl	8000b74 <__addsf3>
 800797c:	4682      	mov	sl, r0
 800797e:	4630      	mov	r0, r6
 8007980:	f000 f9da 	bl	8007d38 <__ieee754_sqrtf>
 8007984:	4b3a      	ldr	r3, [pc, #232]	; (8007a70 <__ieee754_asinf+0x27c>)
 8007986:	4607      	mov	r7, r0
 8007988:	4598      	cmp	r8, r3
 800798a:	dd1a      	ble.n	80079c2 <__ieee754_asinf+0x1ce>
 800798c:	4651      	mov	r1, sl
 800798e:	4648      	mov	r0, r9
 8007990:	f7f9 faac 	bl	8000eec <__aeabi_fdiv>
 8007994:	4639      	mov	r1, r7
 8007996:	f7f9 f9f5 	bl	8000d84 <__aeabi_fmul>
 800799a:	4639      	mov	r1, r7
 800799c:	f7f9 f8ea 	bl	8000b74 <__addsf3>
 80079a0:	4601      	mov	r1, r0
 80079a2:	f7f9 f8e7 	bl	8000b74 <__addsf3>
 80079a6:	4933      	ldr	r1, [pc, #204]	; (8007a74 <__ieee754_asinf+0x280>)
 80079a8:	f7f9 f8e4 	bl	8000b74 <__addsf3>
 80079ac:	4601      	mov	r1, r0
 80079ae:	4823      	ldr	r0, [pc, #140]	; (8007a3c <__ieee754_asinf+0x248>)
 80079b0:	f7f9 f8de 	bl	8000b70 <__aeabi_fsub>
 80079b4:	2d00      	cmp	r5, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	f73f af4a 	bgt.w	8007850 <__ieee754_asinf+0x5c>
 80079bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80079c0:	e735      	b.n	800782e <__ieee754_asinf+0x3a>
 80079c2:	4601      	mov	r1, r0
 80079c4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 80079c8:	f7f9 f8d4 	bl	8000b74 <__addsf3>
 80079cc:	4651      	mov	r1, sl
 80079ce:	4604      	mov	r4, r0
 80079d0:	4648      	mov	r0, r9
 80079d2:	f7f9 fa8b 	bl	8000eec <__aeabi_fdiv>
 80079d6:	4601      	mov	r1, r0
 80079d8:	4620      	mov	r0, r4
 80079da:	f7f9 f9d3 	bl	8000d84 <__aeabi_fmul>
 80079de:	f028 080f 	bic.w	r8, r8, #15
 80079e2:	4681      	mov	r9, r0
 80079e4:	4641      	mov	r1, r8
 80079e6:	4640      	mov	r0, r8
 80079e8:	f7f9 f9cc 	bl	8000d84 <__aeabi_fmul>
 80079ec:	4601      	mov	r1, r0
 80079ee:	4630      	mov	r0, r6
 80079f0:	f7f9 f8be 	bl	8000b70 <__aeabi_fsub>
 80079f4:	4641      	mov	r1, r8
 80079f6:	4604      	mov	r4, r0
 80079f8:	4638      	mov	r0, r7
 80079fa:	f7f9 f8bb 	bl	8000b74 <__addsf3>
 80079fe:	4601      	mov	r1, r0
 8007a00:	4620      	mov	r0, r4
 8007a02:	f7f9 fa73 	bl	8000eec <__aeabi_fdiv>
 8007a06:	4601      	mov	r1, r0
 8007a08:	f7f9 f8b4 	bl	8000b74 <__addsf3>
 8007a0c:	4601      	mov	r1, r0
 8007a0e:	480c      	ldr	r0, [pc, #48]	; (8007a40 <__ieee754_asinf+0x24c>)
 8007a10:	f7f9 f8ae 	bl	8000b70 <__aeabi_fsub>
 8007a14:	4601      	mov	r1, r0
 8007a16:	4648      	mov	r0, r9
 8007a18:	f7f9 f8aa 	bl	8000b70 <__aeabi_fsub>
 8007a1c:	4641      	mov	r1, r8
 8007a1e:	4604      	mov	r4, r0
 8007a20:	4640      	mov	r0, r8
 8007a22:	f7f9 f8a7 	bl	8000b74 <__addsf3>
 8007a26:	4601      	mov	r1, r0
 8007a28:	4813      	ldr	r0, [pc, #76]	; (8007a78 <__ieee754_asinf+0x284>)
 8007a2a:	f7f9 f8a1 	bl	8000b70 <__aeabi_fsub>
 8007a2e:	4601      	mov	r1, r0
 8007a30:	4620      	mov	r0, r4
 8007a32:	f7f9 f89d 	bl	8000b70 <__aeabi_fsub>
 8007a36:	4601      	mov	r1, r0
 8007a38:	480f      	ldr	r0, [pc, #60]	; (8007a78 <__ieee754_asinf+0x284>)
 8007a3a:	e7b9      	b.n	80079b0 <__ieee754_asinf+0x1bc>
 8007a3c:	3fc90fdb 	.word	0x3fc90fdb
 8007a40:	b33bbd2e 	.word	0xb33bbd2e
 8007a44:	7149f2ca 	.word	0x7149f2ca
 8007a48:	3811ef08 	.word	0x3811ef08
 8007a4c:	3a4f7f04 	.word	0x3a4f7f04
 8007a50:	3d241146 	.word	0x3d241146
 8007a54:	3e4e0aa8 	.word	0x3e4e0aa8
 8007a58:	3ea6b090 	.word	0x3ea6b090
 8007a5c:	3e2aaaab 	.word	0x3e2aaaab
 8007a60:	3d9dc62e 	.word	0x3d9dc62e
 8007a64:	3f303361 	.word	0x3f303361
 8007a68:	4001572d 	.word	0x4001572d
 8007a6c:	4019d139 	.word	0x4019d139
 8007a70:	3f799999 	.word	0x3f799999
 8007a74:	333bbd2e 	.word	0x333bbd2e
 8007a78:	3f490fdb 	.word	0x3f490fdb

08007a7c <__ieee754_rem_pio2f>:
 8007a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a80:	4aa0      	ldr	r2, [pc, #640]	; (8007d04 <__ieee754_rem_pio2f+0x288>)
 8007a82:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8007a86:	4296      	cmp	r6, r2
 8007a88:	460c      	mov	r4, r1
 8007a8a:	4682      	mov	sl, r0
 8007a8c:	b087      	sub	sp, #28
 8007a8e:	dc04      	bgt.n	8007a9a <__ieee754_rem_pio2f+0x1e>
 8007a90:	2300      	movs	r3, #0
 8007a92:	6008      	str	r0, [r1, #0]
 8007a94:	604b      	str	r3, [r1, #4]
 8007a96:	2500      	movs	r5, #0
 8007a98:	e01a      	b.n	8007ad0 <__ieee754_rem_pio2f+0x54>
 8007a9a:	4a9b      	ldr	r2, [pc, #620]	; (8007d08 <__ieee754_rem_pio2f+0x28c>)
 8007a9c:	4296      	cmp	r6, r2
 8007a9e:	dc4b      	bgt.n	8007b38 <__ieee754_rem_pio2f+0xbc>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	499a      	ldr	r1, [pc, #616]	; (8007d0c <__ieee754_rem_pio2f+0x290>)
 8007aa4:	4f9a      	ldr	r7, [pc, #616]	; (8007d10 <__ieee754_rem_pio2f+0x294>)
 8007aa6:	f026 060f 	bic.w	r6, r6, #15
 8007aaa:	dd23      	ble.n	8007af4 <__ieee754_rem_pio2f+0x78>
 8007aac:	f7f9 f860 	bl	8000b70 <__aeabi_fsub>
 8007ab0:	42be      	cmp	r6, r7
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	d010      	beq.n	8007ad8 <__ieee754_rem_pio2f+0x5c>
 8007ab6:	4997      	ldr	r1, [pc, #604]	; (8007d14 <__ieee754_rem_pio2f+0x298>)
 8007ab8:	f7f9 f85a 	bl	8000b70 <__aeabi_fsub>
 8007abc:	4601      	mov	r1, r0
 8007abe:	6020      	str	r0, [r4, #0]
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	f7f9 f855 	bl	8000b70 <__aeabi_fsub>
 8007ac6:	4993      	ldr	r1, [pc, #588]	; (8007d14 <__ieee754_rem_pio2f+0x298>)
 8007ac8:	f7f9 f852 	bl	8000b70 <__aeabi_fsub>
 8007acc:	2501      	movs	r5, #1
 8007ace:	6060      	str	r0, [r4, #4]
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	b007      	add	sp, #28
 8007ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad8:	498f      	ldr	r1, [pc, #572]	; (8007d18 <__ieee754_rem_pio2f+0x29c>)
 8007ada:	f7f9 f849 	bl	8000b70 <__aeabi_fsub>
 8007ade:	498f      	ldr	r1, [pc, #572]	; (8007d1c <__ieee754_rem_pio2f+0x2a0>)
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	f7f9 f845 	bl	8000b70 <__aeabi_fsub>
 8007ae6:	4601      	mov	r1, r0
 8007ae8:	6020      	str	r0, [r4, #0]
 8007aea:	4628      	mov	r0, r5
 8007aec:	f7f9 f840 	bl	8000b70 <__aeabi_fsub>
 8007af0:	498a      	ldr	r1, [pc, #552]	; (8007d1c <__ieee754_rem_pio2f+0x2a0>)
 8007af2:	e7e9      	b.n	8007ac8 <__ieee754_rem_pio2f+0x4c>
 8007af4:	f7f9 f83e 	bl	8000b74 <__addsf3>
 8007af8:	42be      	cmp	r6, r7
 8007afa:	4605      	mov	r5, r0
 8007afc:	d00e      	beq.n	8007b1c <__ieee754_rem_pio2f+0xa0>
 8007afe:	4985      	ldr	r1, [pc, #532]	; (8007d14 <__ieee754_rem_pio2f+0x298>)
 8007b00:	f7f9 f838 	bl	8000b74 <__addsf3>
 8007b04:	4601      	mov	r1, r0
 8007b06:	6020      	str	r0, [r4, #0]
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f7f9 f831 	bl	8000b70 <__aeabi_fsub>
 8007b0e:	4981      	ldr	r1, [pc, #516]	; (8007d14 <__ieee754_rem_pio2f+0x298>)
 8007b10:	f7f9 f830 	bl	8000b74 <__addsf3>
 8007b14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007b18:	6060      	str	r0, [r4, #4]
 8007b1a:	e7d9      	b.n	8007ad0 <__ieee754_rem_pio2f+0x54>
 8007b1c:	497e      	ldr	r1, [pc, #504]	; (8007d18 <__ieee754_rem_pio2f+0x29c>)
 8007b1e:	f7f9 f829 	bl	8000b74 <__addsf3>
 8007b22:	497e      	ldr	r1, [pc, #504]	; (8007d1c <__ieee754_rem_pio2f+0x2a0>)
 8007b24:	4605      	mov	r5, r0
 8007b26:	f7f9 f825 	bl	8000b74 <__addsf3>
 8007b2a:	4601      	mov	r1, r0
 8007b2c:	6020      	str	r0, [r4, #0]
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f7f9 f81e 	bl	8000b70 <__aeabi_fsub>
 8007b34:	4979      	ldr	r1, [pc, #484]	; (8007d1c <__ieee754_rem_pio2f+0x2a0>)
 8007b36:	e7eb      	b.n	8007b10 <__ieee754_rem_pio2f+0x94>
 8007b38:	4a79      	ldr	r2, [pc, #484]	; (8007d20 <__ieee754_rem_pio2f+0x2a4>)
 8007b3a:	4296      	cmp	r6, r2
 8007b3c:	f300 8091 	bgt.w	8007c62 <__ieee754_rem_pio2f+0x1e6>
 8007b40:	f000 fcf8 	bl	8008534 <fabsf>
 8007b44:	4977      	ldr	r1, [pc, #476]	; (8007d24 <__ieee754_rem_pio2f+0x2a8>)
 8007b46:	4607      	mov	r7, r0
 8007b48:	f7f9 f91c 	bl	8000d84 <__aeabi_fmul>
 8007b4c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007b50:	f7f9 f810 	bl	8000b74 <__addsf3>
 8007b54:	f7f9 faf2 	bl	800113c <__aeabi_f2iz>
 8007b58:	4605      	mov	r5, r0
 8007b5a:	f7f9 f8bf 	bl	8000cdc <__aeabi_i2f>
 8007b5e:	496b      	ldr	r1, [pc, #428]	; (8007d0c <__ieee754_rem_pio2f+0x290>)
 8007b60:	4681      	mov	r9, r0
 8007b62:	f7f9 f90f 	bl	8000d84 <__aeabi_fmul>
 8007b66:	4601      	mov	r1, r0
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7f9 f801 	bl	8000b70 <__aeabi_fsub>
 8007b6e:	4969      	ldr	r1, [pc, #420]	; (8007d14 <__ieee754_rem_pio2f+0x298>)
 8007b70:	4680      	mov	r8, r0
 8007b72:	4648      	mov	r0, r9
 8007b74:	f7f9 f906 	bl	8000d84 <__aeabi_fmul>
 8007b78:	2d1f      	cmp	r5, #31
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	dc0c      	bgt.n	8007b98 <__ieee754_rem_pio2f+0x11c>
 8007b7e:	4a6a      	ldr	r2, [pc, #424]	; (8007d28 <__ieee754_rem_pio2f+0x2ac>)
 8007b80:	1e69      	subs	r1, r5, #1
 8007b82:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007b86:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d004      	beq.n	8007b98 <__ieee754_rem_pio2f+0x11c>
 8007b8e:	4639      	mov	r1, r7
 8007b90:	4640      	mov	r0, r8
 8007b92:	f7f8 ffed 	bl	8000b70 <__aeabi_fsub>
 8007b96:	e00b      	b.n	8007bb0 <__ieee754_rem_pio2f+0x134>
 8007b98:	4639      	mov	r1, r7
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	f7f8 ffe8 	bl	8000b70 <__aeabi_fsub>
 8007ba0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007ba4:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8007ba8:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8007bac:	2e08      	cmp	r6, #8
 8007bae:	dc01      	bgt.n	8007bb4 <__ieee754_rem_pio2f+0x138>
 8007bb0:	6020      	str	r0, [r4, #0]
 8007bb2:	e026      	b.n	8007c02 <__ieee754_rem_pio2f+0x186>
 8007bb4:	4958      	ldr	r1, [pc, #352]	; (8007d18 <__ieee754_rem_pio2f+0x29c>)
 8007bb6:	4648      	mov	r0, r9
 8007bb8:	f7f9 f8e4 	bl	8000d84 <__aeabi_fmul>
 8007bbc:	4607      	mov	r7, r0
 8007bbe:	4601      	mov	r1, r0
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	f7f8 ffd5 	bl	8000b70 <__aeabi_fsub>
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	4606      	mov	r6, r0
 8007bca:	4640      	mov	r0, r8
 8007bcc:	f7f8 ffd0 	bl	8000b70 <__aeabi_fsub>
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	f7f8 ffcd 	bl	8000b70 <__aeabi_fsub>
 8007bd6:	4607      	mov	r7, r0
 8007bd8:	4950      	ldr	r1, [pc, #320]	; (8007d1c <__ieee754_rem_pio2f+0x2a0>)
 8007bda:	4648      	mov	r0, r9
 8007bdc:	f7f9 f8d2 	bl	8000d84 <__aeabi_fmul>
 8007be0:	4639      	mov	r1, r7
 8007be2:	f7f8 ffc5 	bl	8000b70 <__aeabi_fsub>
 8007be6:	4601      	mov	r1, r0
 8007be8:	4607      	mov	r7, r0
 8007bea:	4630      	mov	r0, r6
 8007bec:	f7f8 ffc0 	bl	8000b70 <__aeabi_fsub>
 8007bf0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007bf4:	ebab 0b03 	sub.w	fp, fp, r3
 8007bf8:	f1bb 0f19 	cmp.w	fp, #25
 8007bfc:	dc16      	bgt.n	8007c2c <__ieee754_rem_pio2f+0x1b0>
 8007bfe:	46b0      	mov	r8, r6
 8007c00:	6020      	str	r0, [r4, #0]
 8007c02:	6826      	ldr	r6, [r4, #0]
 8007c04:	4640      	mov	r0, r8
 8007c06:	4631      	mov	r1, r6
 8007c08:	f7f8 ffb2 	bl	8000b70 <__aeabi_fsub>
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	f7f8 ffaf 	bl	8000b70 <__aeabi_fsub>
 8007c12:	f1ba 0f00 	cmp.w	sl, #0
 8007c16:	6060      	str	r0, [r4, #4]
 8007c18:	f6bf af5a 	bge.w	8007ad0 <__ieee754_rem_pio2f+0x54>
 8007c1c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8007c20:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007c24:	6026      	str	r6, [r4, #0]
 8007c26:	6060      	str	r0, [r4, #4]
 8007c28:	426d      	negs	r5, r5
 8007c2a:	e751      	b.n	8007ad0 <__ieee754_rem_pio2f+0x54>
 8007c2c:	493f      	ldr	r1, [pc, #252]	; (8007d2c <__ieee754_rem_pio2f+0x2b0>)
 8007c2e:	4648      	mov	r0, r9
 8007c30:	f7f9 f8a8 	bl	8000d84 <__aeabi_fmul>
 8007c34:	4607      	mov	r7, r0
 8007c36:	4601      	mov	r1, r0
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f7f8 ff99 	bl	8000b70 <__aeabi_fsub>
 8007c3e:	4601      	mov	r1, r0
 8007c40:	4680      	mov	r8, r0
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7f8 ff94 	bl	8000b70 <__aeabi_fsub>
 8007c48:	4639      	mov	r1, r7
 8007c4a:	f7f8 ff91 	bl	8000b70 <__aeabi_fsub>
 8007c4e:	4606      	mov	r6, r0
 8007c50:	4937      	ldr	r1, [pc, #220]	; (8007d30 <__ieee754_rem_pio2f+0x2b4>)
 8007c52:	4648      	mov	r0, r9
 8007c54:	f7f9 f896 	bl	8000d84 <__aeabi_fmul>
 8007c58:	4631      	mov	r1, r6
 8007c5a:	f7f8 ff89 	bl	8000b70 <__aeabi_fsub>
 8007c5e:	4607      	mov	r7, r0
 8007c60:	e795      	b.n	8007b8e <__ieee754_rem_pio2f+0x112>
 8007c62:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007c66:	db05      	blt.n	8007c74 <__ieee754_rem_pio2f+0x1f8>
 8007c68:	4601      	mov	r1, r0
 8007c6a:	f7f8 ff81 	bl	8000b70 <__aeabi_fsub>
 8007c6e:	6060      	str	r0, [r4, #4]
 8007c70:	6020      	str	r0, [r4, #0]
 8007c72:	e710      	b.n	8007a96 <__ieee754_rem_pio2f+0x1a>
 8007c74:	15f7      	asrs	r7, r6, #23
 8007c76:	3f86      	subs	r7, #134	; 0x86
 8007c78:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f7f9 fa5d 	bl	800113c <__aeabi_f2iz>
 8007c82:	f7f9 f82b 	bl	8000cdc <__aeabi_i2f>
 8007c86:	4601      	mov	r1, r0
 8007c88:	9003      	str	r0, [sp, #12]
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f7f8 ff70 	bl	8000b70 <__aeabi_fsub>
 8007c90:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007c94:	f7f9 f876 	bl	8000d84 <__aeabi_fmul>
 8007c98:	4606      	mov	r6, r0
 8007c9a:	f7f9 fa4f 	bl	800113c <__aeabi_f2iz>
 8007c9e:	f7f9 f81d 	bl	8000cdc <__aeabi_i2f>
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	9004      	str	r0, [sp, #16]
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f7f8 ff61 	bl	8000b70 <__aeabi_fsub>
 8007cae:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007cb2:	f7f9 f867 	bl	8000d84 <__aeabi_fmul>
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	9005      	str	r0, [sp, #20]
 8007cba:	f7f9 f9f7 	bl	80010ac <__aeabi_fcmpeq>
 8007cbe:	b1f0      	cbz	r0, 8007cfe <__ieee754_rem_pio2f+0x282>
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f7f9 f9f2 	bl	80010ac <__aeabi_fcmpeq>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	bf14      	ite	ne
 8007ccc:	2301      	movne	r3, #1
 8007cce:	2302      	moveq	r3, #2
 8007cd0:	4a18      	ldr	r2, [pc, #96]	; (8007d34 <__ieee754_rem_pio2f+0x2b8>)
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	9201      	str	r2, [sp, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	a803      	add	r0, sp, #12
 8007cda:	9200      	str	r2, [sp, #0]
 8007cdc:	463a      	mov	r2, r7
 8007cde:	f000 f8fd 	bl	8007edc <__kernel_rem_pio2f>
 8007ce2:	f1ba 0f00 	cmp.w	sl, #0
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	f6bf aef2 	bge.w	8007ad0 <__ieee754_rem_pio2f+0x54>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007cf2:	6023      	str	r3, [r4, #0]
 8007cf4:	6863      	ldr	r3, [r4, #4]
 8007cf6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007cfa:	6063      	str	r3, [r4, #4]
 8007cfc:	e794      	b.n	8007c28 <__ieee754_rem_pio2f+0x1ac>
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e7e6      	b.n	8007cd0 <__ieee754_rem_pio2f+0x254>
 8007d02:	bf00      	nop
 8007d04:	3f490fd8 	.word	0x3f490fd8
 8007d08:	4016cbe3 	.word	0x4016cbe3
 8007d0c:	3fc90f80 	.word	0x3fc90f80
 8007d10:	3fc90fd0 	.word	0x3fc90fd0
 8007d14:	37354443 	.word	0x37354443
 8007d18:	37354400 	.word	0x37354400
 8007d1c:	2e85a308 	.word	0x2e85a308
 8007d20:	43490f80 	.word	0x43490f80
 8007d24:	3f22f984 	.word	0x3f22f984
 8007d28:	0800d010 	.word	0x0800d010
 8007d2c:	2e85a300 	.word	0x2e85a300
 8007d30:	248d3132 	.word	0x248d3132
 8007d34:	0800d090 	.word	0x0800d090

08007d38 <__ieee754_sqrtf>:
 8007d38:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8007d3c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	4603      	mov	r3, r0
 8007d44:	4604      	mov	r4, r0
 8007d46:	d309      	bcc.n	8007d5c <__ieee754_sqrtf+0x24>
 8007d48:	4601      	mov	r1, r0
 8007d4a:	f7f9 f81b 	bl	8000d84 <__aeabi_fmul>
 8007d4e:	4601      	mov	r1, r0
 8007d50:	4620      	mov	r0, r4
 8007d52:	f7f8 ff0f 	bl	8000b74 <__addsf3>
 8007d56:	4604      	mov	r4, r0
 8007d58:	4620      	mov	r0, r4
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}
 8007d5c:	2a00      	cmp	r2, #0
 8007d5e:	d0fb      	beq.n	8007d58 <__ieee754_sqrtf+0x20>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	da06      	bge.n	8007d72 <__ieee754_sqrtf+0x3a>
 8007d64:	4601      	mov	r1, r0
 8007d66:	f7f8 ff03 	bl	8000b70 <__aeabi_fsub>
 8007d6a:	4601      	mov	r1, r0
 8007d6c:	f7f9 f8be 	bl	8000eec <__aeabi_fdiv>
 8007d70:	e7f1      	b.n	8007d56 <__ieee754_sqrtf+0x1e>
 8007d72:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8007d76:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8007d7a:	d029      	beq.n	8007dd0 <__ieee754_sqrtf+0x98>
 8007d7c:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8007d80:	07cb      	lsls	r3, r1, #31
 8007d82:	f04f 0300 	mov.w	r3, #0
 8007d86:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8007d8a:	f04f 0419 	mov.w	r4, #25
 8007d8e:	461e      	mov	r6, r3
 8007d90:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8007d94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007d98:	bf58      	it	pl
 8007d9a:	0052      	lslpl	r2, r2, #1
 8007d9c:	1040      	asrs	r0, r0, #1
 8007d9e:	0052      	lsls	r2, r2, #1
 8007da0:	1875      	adds	r5, r6, r1
 8007da2:	4295      	cmp	r5, r2
 8007da4:	bfde      	ittt	le
 8007da6:	186e      	addle	r6, r5, r1
 8007da8:	1b52      	suble	r2, r2, r5
 8007daa:	185b      	addle	r3, r3, r1
 8007dac:	3c01      	subs	r4, #1
 8007dae:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007db2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007db6:	d1f3      	bne.n	8007da0 <__ieee754_sqrtf+0x68>
 8007db8:	b112      	cbz	r2, 8007dc0 <__ieee754_sqrtf+0x88>
 8007dba:	3301      	adds	r3, #1
 8007dbc:	f023 0301 	bic.w	r3, r3, #1
 8007dc0:	105c      	asrs	r4, r3, #1
 8007dc2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8007dc6:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8007dca:	e7c5      	b.n	8007d58 <__ieee754_sqrtf+0x20>
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	3201      	adds	r2, #1
 8007dd0:	0218      	lsls	r0, r3, #8
 8007dd2:	d5fb      	bpl.n	8007dcc <__ieee754_sqrtf+0x94>
 8007dd4:	3a01      	subs	r2, #1
 8007dd6:	1a89      	subs	r1, r1, r2
 8007dd8:	e7d0      	b.n	8007d7c <__ieee754_sqrtf+0x44>
	...

08007ddc <__kernel_cosf>:
 8007ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8007de4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8007de8:	4606      	mov	r6, r0
 8007dea:	4688      	mov	r8, r1
 8007dec:	da03      	bge.n	8007df6 <__kernel_cosf+0x1a>
 8007dee:	f7f9 f9a5 	bl	800113c <__aeabi_f2iz>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d05c      	beq.n	8007eb0 <__kernel_cosf+0xd4>
 8007df6:	4631      	mov	r1, r6
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7f8 ffc3 	bl	8000d84 <__aeabi_fmul>
 8007dfe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007e02:	4605      	mov	r5, r0
 8007e04:	f7f8 ffbe 	bl	8000d84 <__aeabi_fmul>
 8007e08:	492b      	ldr	r1, [pc, #172]	; (8007eb8 <__kernel_cosf+0xdc>)
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f7f8 ffb9 	bl	8000d84 <__aeabi_fmul>
 8007e12:	492a      	ldr	r1, [pc, #168]	; (8007ebc <__kernel_cosf+0xe0>)
 8007e14:	f7f8 feae 	bl	8000b74 <__addsf3>
 8007e18:	4629      	mov	r1, r5
 8007e1a:	f7f8 ffb3 	bl	8000d84 <__aeabi_fmul>
 8007e1e:	4928      	ldr	r1, [pc, #160]	; (8007ec0 <__kernel_cosf+0xe4>)
 8007e20:	f7f8 fea6 	bl	8000b70 <__aeabi_fsub>
 8007e24:	4629      	mov	r1, r5
 8007e26:	f7f8 ffad 	bl	8000d84 <__aeabi_fmul>
 8007e2a:	4926      	ldr	r1, [pc, #152]	; (8007ec4 <__kernel_cosf+0xe8>)
 8007e2c:	f7f8 fea2 	bl	8000b74 <__addsf3>
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7f8 ffa7 	bl	8000d84 <__aeabi_fmul>
 8007e36:	4924      	ldr	r1, [pc, #144]	; (8007ec8 <__kernel_cosf+0xec>)
 8007e38:	f7f8 fe9a 	bl	8000b70 <__aeabi_fsub>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7f8 ffa1 	bl	8000d84 <__aeabi_fmul>
 8007e42:	4922      	ldr	r1, [pc, #136]	; (8007ecc <__kernel_cosf+0xf0>)
 8007e44:	f7f8 fe96 	bl	8000b74 <__addsf3>
 8007e48:	4629      	mov	r1, r5
 8007e4a:	f7f8 ff9b 	bl	8000d84 <__aeabi_fmul>
 8007e4e:	4629      	mov	r1, r5
 8007e50:	f7f8 ff98 	bl	8000d84 <__aeabi_fmul>
 8007e54:	4641      	mov	r1, r8
 8007e56:	4605      	mov	r5, r0
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7f8 ff93 	bl	8000d84 <__aeabi_fmul>
 8007e5e:	4601      	mov	r1, r0
 8007e60:	4628      	mov	r0, r5
 8007e62:	f7f8 fe85 	bl	8000b70 <__aeabi_fsub>
 8007e66:	4b1a      	ldr	r3, [pc, #104]	; (8007ed0 <__kernel_cosf+0xf4>)
 8007e68:	4605      	mov	r5, r0
 8007e6a:	429c      	cmp	r4, r3
 8007e6c:	dc0a      	bgt.n	8007e84 <__kernel_cosf+0xa8>
 8007e6e:	4601      	mov	r1, r0
 8007e70:	4638      	mov	r0, r7
 8007e72:	f7f8 fe7d 	bl	8000b70 <__aeabi_fsub>
 8007e76:	4601      	mov	r1, r0
 8007e78:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007e7c:	f7f8 fe78 	bl	8000b70 <__aeabi_fsub>
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	4b13      	ldr	r3, [pc, #76]	; (8007ed4 <__kernel_cosf+0xf8>)
 8007e86:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007e8a:	429c      	cmp	r4, r3
 8007e8c:	bfcc      	ite	gt
 8007e8e:	4c12      	ldrgt	r4, [pc, #72]	; (8007ed8 <__kernel_cosf+0xfc>)
 8007e90:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8007e94:	4621      	mov	r1, r4
 8007e96:	f7f8 fe6b 	bl	8000b70 <__aeabi_fsub>
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f7f8 fe66 	bl	8000b70 <__aeabi_fsub>
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	f7f8 fe63 	bl	8000b70 <__aeabi_fsub>
 8007eaa:	4601      	mov	r1, r0
 8007eac:	4630      	mov	r0, r6
 8007eae:	e7e5      	b.n	8007e7c <__kernel_cosf+0xa0>
 8007eb0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007eb4:	e7e4      	b.n	8007e80 <__kernel_cosf+0xa4>
 8007eb6:	bf00      	nop
 8007eb8:	ad47d74e 	.word	0xad47d74e
 8007ebc:	310f74f6 	.word	0x310f74f6
 8007ec0:	3493f27c 	.word	0x3493f27c
 8007ec4:	37d00d01 	.word	0x37d00d01
 8007ec8:	3ab60b61 	.word	0x3ab60b61
 8007ecc:	3d2aaaab 	.word	0x3d2aaaab
 8007ed0:	3e999999 	.word	0x3e999999
 8007ed4:	3f480000 	.word	0x3f480000
 8007ed8:	3e900000 	.word	0x3e900000

08007edc <__kernel_rem_pio2f>:
 8007edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee0:	b0db      	sub	sp, #364	; 0x16c
 8007ee2:	9202      	str	r2, [sp, #8]
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007ee8:	4bc5      	ldr	r3, [pc, #788]	; (8008200 <__kernel_rem_pio2f+0x324>)
 8007eea:	9005      	str	r0, [sp, #20]
 8007eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef0:	9100      	str	r1, [sp, #0]
 8007ef2:	9301      	str	r3, [sp, #4]
 8007ef4:	9b04      	ldr	r3, [sp, #16]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	9303      	str	r3, [sp, #12]
 8007efa:	9b02      	ldr	r3, [sp, #8]
 8007efc:	1d1a      	adds	r2, r3, #4
 8007efe:	f2c0 809b 	blt.w	8008038 <__kernel_rem_pio2f+0x15c>
 8007f02:	1edc      	subs	r4, r3, #3
 8007f04:	bf48      	it	mi
 8007f06:	1d1c      	addmi	r4, r3, #4
 8007f08:	10e4      	asrs	r4, r4, #3
 8007f0a:	2500      	movs	r5, #0
 8007f0c:	f04f 0a00 	mov.w	sl, #0
 8007f10:	1c67      	adds	r7, r4, #1
 8007f12:	00fb      	lsls	r3, r7, #3
 8007f14:	9306      	str	r3, [sp, #24]
 8007f16:	9b02      	ldr	r3, [sp, #8]
 8007f18:	9a03      	ldr	r2, [sp, #12]
 8007f1a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	1aa6      	subs	r6, r4, r2
 8007f22:	eb03 0802 	add.w	r8, r3, r2
 8007f26:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007f28:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 8007f2c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 8007f30:	4545      	cmp	r5, r8
 8007f32:	f340 8083 	ble.w	800803c <__kernel_rem_pio2f+0x160>
 8007f36:	f04f 0800 	mov.w	r8, #0
 8007f3a:	f04f 0b00 	mov.w	fp, #0
 8007f3e:	9b04      	ldr	r3, [sp, #16]
 8007f40:	aa1e      	add	r2, sp, #120	; 0x78
 8007f42:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007f46:	ab46      	add	r3, sp, #280	; 0x118
 8007f48:	9a01      	ldr	r2, [sp, #4]
 8007f4a:	4590      	cmp	r8, r2
 8007f4c:	f340 809c 	ble.w	8008088 <__kernel_rem_pio2f+0x1ac>
 8007f50:	4613      	mov	r3, r2
 8007f52:	aa0a      	add	r2, sp, #40	; 0x28
 8007f54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f58:	9308      	str	r3, [sp, #32]
 8007f5a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007f5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007f60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007f64:	9307      	str	r3, [sp, #28]
 8007f66:	ad0a      	add	r5, sp, #40	; 0x28
 8007f68:	462e      	mov	r6, r5
 8007f6a:	46c3      	mov	fp, r8
 8007f6c:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8007f70:	ab5a      	add	r3, sp, #360	; 0x168
 8007f72:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8007f76:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8007f7a:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8007f7e:	f1bb 0f00 	cmp.w	fp, #0
 8007f82:	f300 8086 	bgt.w	8008092 <__kernel_rem_pio2f+0x1b6>
 8007f86:	4639      	mov	r1, r7
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 fb1d 	bl	80085c8 <scalbnf>
 8007f8e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8007f92:	4604      	mov	r4, r0
 8007f94:	f7f8 fef6 	bl	8000d84 <__aeabi_fmul>
 8007f98:	f000 fad0 	bl	800853c <floorf>
 8007f9c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8007fa0:	f7f8 fef0 	bl	8000d84 <__aeabi_fmul>
 8007fa4:	4601      	mov	r1, r0
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f7f8 fde2 	bl	8000b70 <__aeabi_fsub>
 8007fac:	4604      	mov	r4, r0
 8007fae:	f7f9 f8c5 	bl	800113c <__aeabi_f2iz>
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	f7f8 fe92 	bl	8000cdc <__aeabi_i2f>
 8007fb8:	4601      	mov	r1, r0
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f7f8 fdd8 	bl	8000b70 <__aeabi_fsub>
 8007fc0:	2f00      	cmp	r7, #0
 8007fc2:	4681      	mov	r9, r0
 8007fc4:	f340 8084 	ble.w	80080d0 <__kernel_rem_pio2f+0x1f4>
 8007fc8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8007fcc:	ab0a      	add	r3, sp, #40	; 0x28
 8007fce:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8007fd2:	f1c7 0108 	rsb	r1, r7, #8
 8007fd6:	fa44 f301 	asr.w	r3, r4, r1
 8007fda:	441e      	add	r6, r3
 8007fdc:	408b      	lsls	r3, r1
 8007fde:	1ae4      	subs	r4, r4, r3
 8007fe0:	f1c7 0007 	rsb	r0, r7, #7
 8007fe4:	ab0a      	add	r3, sp, #40	; 0x28
 8007fe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fea:	4104      	asrs	r4, r0
 8007fec:	2c00      	cmp	r4, #0
 8007fee:	dd7e      	ble.n	80080ee <__kernel_rem_pio2f+0x212>
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4692      	mov	sl, r2
 8007ff4:	3601      	adds	r6, #1
 8007ff6:	4590      	cmp	r8, r2
 8007ff8:	f300 80b0 	bgt.w	800815c <__kernel_rem_pio2f+0x280>
 8007ffc:	2f00      	cmp	r7, #0
 8007ffe:	dd05      	ble.n	800800c <__kernel_rem_pio2f+0x130>
 8008000:	2f01      	cmp	r7, #1
 8008002:	f000 80bd 	beq.w	8008180 <__kernel_rem_pio2f+0x2a4>
 8008006:	2f02      	cmp	r7, #2
 8008008:	f000 80c5 	beq.w	8008196 <__kernel_rem_pio2f+0x2ba>
 800800c:	2c02      	cmp	r4, #2
 800800e:	d16e      	bne.n	80080ee <__kernel_rem_pio2f+0x212>
 8008010:	4649      	mov	r1, r9
 8008012:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008016:	f7f8 fdab 	bl	8000b70 <__aeabi_fsub>
 800801a:	4681      	mov	r9, r0
 800801c:	f1ba 0f00 	cmp.w	sl, #0
 8008020:	d065      	beq.n	80080ee <__kernel_rem_pio2f+0x212>
 8008022:	4639      	mov	r1, r7
 8008024:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008028:	f000 face 	bl	80085c8 <scalbnf>
 800802c:	4601      	mov	r1, r0
 800802e:	4648      	mov	r0, r9
 8008030:	f7f8 fd9e 	bl	8000b70 <__aeabi_fsub>
 8008034:	4681      	mov	r9, r0
 8008036:	e05a      	b.n	80080ee <__kernel_rem_pio2f+0x212>
 8008038:	2400      	movs	r4, #0
 800803a:	e766      	b.n	8007f0a <__kernel_rem_pio2f+0x2e>
 800803c:	42ee      	cmn	r6, r5
 800803e:	d407      	bmi.n	8008050 <__kernel_rem_pio2f+0x174>
 8008040:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008044:	f7f8 fe4a 	bl	8000cdc <__aeabi_i2f>
 8008048:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800804c:	3501      	adds	r5, #1
 800804e:	e76f      	b.n	8007f30 <__kernel_rem_pio2f+0x54>
 8008050:	4650      	mov	r0, sl
 8008052:	e7f9      	b.n	8008048 <__kernel_rem_pio2f+0x16c>
 8008054:	9b05      	ldr	r3, [sp, #20]
 8008056:	f8da 1000 	ldr.w	r1, [sl]
 800805a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800805e:	f7f8 fe91 	bl	8000d84 <__aeabi_fmul>
 8008062:	4601      	mov	r1, r0
 8008064:	4630      	mov	r0, r6
 8008066:	f7f8 fd85 	bl	8000b74 <__addsf3>
 800806a:	4606      	mov	r6, r0
 800806c:	f109 0901 	add.w	r9, r9, #1
 8008070:	ab46      	add	r3, sp, #280	; 0x118
 8008072:	9a03      	ldr	r2, [sp, #12]
 8008074:	f1aa 0a04 	sub.w	sl, sl, #4
 8008078:	4591      	cmp	r9, r2
 800807a:	ddeb      	ble.n	8008054 <__kernel_rem_pio2f+0x178>
 800807c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8008080:	3504      	adds	r5, #4
 8008082:	f108 0801 	add.w	r8, r8, #1
 8008086:	e75f      	b.n	8007f48 <__kernel_rem_pio2f+0x6c>
 8008088:	46aa      	mov	sl, r5
 800808a:	465e      	mov	r6, fp
 800808c:	f04f 0900 	mov.w	r9, #0
 8008090:	e7ef      	b.n	8008072 <__kernel_rem_pio2f+0x196>
 8008092:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8008096:	4620      	mov	r0, r4
 8008098:	f7f8 fe74 	bl	8000d84 <__aeabi_fmul>
 800809c:	f7f9 f84e 	bl	800113c <__aeabi_f2iz>
 80080a0:	f7f8 fe1c 	bl	8000cdc <__aeabi_i2f>
 80080a4:	4649      	mov	r1, r9
 80080a6:	9009      	str	r0, [sp, #36]	; 0x24
 80080a8:	f7f8 fe6c 	bl	8000d84 <__aeabi_fmul>
 80080ac:	4601      	mov	r1, r0
 80080ae:	4620      	mov	r0, r4
 80080b0:	f7f8 fd5e 	bl	8000b70 <__aeabi_fsub>
 80080b4:	f7f9 f842 	bl	800113c <__aeabi_f2iz>
 80080b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80080be:	f846 0b04 	str.w	r0, [r6], #4
 80080c2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7f8 fd54 	bl	8000b74 <__addsf3>
 80080cc:	4604      	mov	r4, r0
 80080ce:	e756      	b.n	8007f7e <__kernel_rem_pio2f+0xa2>
 80080d0:	d106      	bne.n	80080e0 <__kernel_rem_pio2f+0x204>
 80080d2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80080d6:	aa0a      	add	r2, sp, #40	; 0x28
 80080d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080dc:	1224      	asrs	r4, r4, #8
 80080de:	e785      	b.n	8007fec <__kernel_rem_pio2f+0x110>
 80080e0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80080e4:	f7f9 f800 	bl	80010e8 <__aeabi_fcmpge>
 80080e8:	4604      	mov	r4, r0
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d134      	bne.n	8008158 <__kernel_rem_pio2f+0x27c>
 80080ee:	2100      	movs	r1, #0
 80080f0:	4648      	mov	r0, r9
 80080f2:	f7f8 ffdb 	bl	80010ac <__aeabi_fcmpeq>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	f000 809a 	beq.w	8008230 <__kernel_rem_pio2f+0x354>
 80080fc:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8008100:	462b      	mov	r3, r5
 8008102:	2200      	movs	r2, #0
 8008104:	9901      	ldr	r1, [sp, #4]
 8008106:	428b      	cmp	r3, r1
 8008108:	da4d      	bge.n	80081a6 <__kernel_rem_pio2f+0x2ca>
 800810a:	2a00      	cmp	r2, #0
 800810c:	d07c      	beq.n	8008208 <__kernel_rem_pio2f+0x32c>
 800810e:	ab0a      	add	r3, sp, #40	; 0x28
 8008110:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008114:	3f08      	subs	r7, #8
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 8088 	beq.w	800822c <__kernel_rem_pio2f+0x350>
 800811c:	4639      	mov	r1, r7
 800811e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008122:	f000 fa51 	bl	80085c8 <scalbnf>
 8008126:	46aa      	mov	sl, r5
 8008128:	4681      	mov	r9, r0
 800812a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800812e:	af46      	add	r7, sp, #280	; 0x118
 8008130:	f1ba 0f00 	cmp.w	sl, #0
 8008134:	f280 80b1 	bge.w	800829a <__kernel_rem_pio2f+0x3be>
 8008138:	46a9      	mov	r9, r5
 800813a:	f04f 0a00 	mov.w	sl, #0
 800813e:	2200      	movs	r2, #0
 8008140:	f1b9 0f00 	cmp.w	r9, #0
 8008144:	f2c0 80db 	blt.w	80082fe <__kernel_rem_pio2f+0x422>
 8008148:	a946      	add	r1, sp, #280	; 0x118
 800814a:	4617      	mov	r7, r2
 800814c:	f04f 0800 	mov.w	r8, #0
 8008150:	4b2c      	ldr	r3, [pc, #176]	; (8008204 <__kernel_rem_pio2f+0x328>)
 8008152:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 8008156:	e0c3      	b.n	80082e0 <__kernel_rem_pio2f+0x404>
 8008158:	2402      	movs	r4, #2
 800815a:	e749      	b.n	8007ff0 <__kernel_rem_pio2f+0x114>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	f1ba 0f00 	cmp.w	sl, #0
 8008162:	d108      	bne.n	8008176 <__kernel_rem_pio2f+0x29a>
 8008164:	b11b      	cbz	r3, 800816e <__kernel_rem_pio2f+0x292>
 8008166:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800816a:	602b      	str	r3, [r5, #0]
 800816c:	2301      	movs	r3, #1
 800816e:	469a      	mov	sl, r3
 8008170:	3201      	adds	r2, #1
 8008172:	3504      	adds	r5, #4
 8008174:	e73f      	b.n	8007ff6 <__kernel_rem_pio2f+0x11a>
 8008176:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800817a:	602b      	str	r3, [r5, #0]
 800817c:	4653      	mov	r3, sl
 800817e:	e7f6      	b.n	800816e <__kernel_rem_pio2f+0x292>
 8008180:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8008184:	ab0a      	add	r3, sp, #40	; 0x28
 8008186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800818e:	a90a      	add	r1, sp, #40	; 0x28
 8008190:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008194:	e73a      	b.n	800800c <__kernel_rem_pio2f+0x130>
 8008196:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800819a:	ab0a      	add	r3, sp, #40	; 0x28
 800819c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081a4:	e7f3      	b.n	800818e <__kernel_rem_pio2f+0x2b2>
 80081a6:	a90a      	add	r1, sp, #40	; 0x28
 80081a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	430a      	orrs	r2, r1
 80081b0:	e7a8      	b.n	8008104 <__kernel_rem_pio2f+0x228>
 80081b2:	3301      	adds	r3, #1
 80081b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80081b8:	2900      	cmp	r1, #0
 80081ba:	d0fa      	beq.n	80081b2 <__kernel_rem_pio2f+0x2d6>
 80081bc:	9a04      	ldr	r2, [sp, #16]
 80081be:	f108 0501 	add.w	r5, r8, #1
 80081c2:	eb08 0402 	add.w	r4, r8, r2
 80081c6:	aa1e      	add	r2, sp, #120	; 0x78
 80081c8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80081cc:	4498      	add	r8, r3
 80081ce:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80081d2:	45a8      	cmp	r8, r5
 80081d4:	f6ff aec7 	blt.w	8007f66 <__kernel_rem_pio2f+0x8a>
 80081d8:	9b07      	ldr	r3, [sp, #28]
 80081da:	46a3      	mov	fp, r4
 80081dc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081e0:	f7f8 fd7c 	bl	8000cdc <__aeabi_i2f>
 80081e4:	f04f 0a00 	mov.w	sl, #0
 80081e8:	2600      	movs	r6, #0
 80081ea:	f84b 0b04 	str.w	r0, [fp], #4
 80081ee:	9b03      	ldr	r3, [sp, #12]
 80081f0:	459a      	cmp	sl, r3
 80081f2:	dd0c      	ble.n	800820e <__kernel_rem_pio2f+0x332>
 80081f4:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 80081f8:	465c      	mov	r4, fp
 80081fa:	3501      	adds	r5, #1
 80081fc:	e7e9      	b.n	80081d2 <__kernel_rem_pio2f+0x2f6>
 80081fe:	bf00      	nop
 8008200:	0800d3d4 	.word	0x0800d3d4
 8008204:	0800d3a8 	.word	0x0800d3a8
 8008208:	2301      	movs	r3, #1
 800820a:	9a08      	ldr	r2, [sp, #32]
 800820c:	e7d2      	b.n	80081b4 <__kernel_rem_pio2f+0x2d8>
 800820e:	9b05      	ldr	r3, [sp, #20]
 8008210:	f854 0904 	ldr.w	r0, [r4], #-4
 8008214:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8008218:	f7f8 fdb4 	bl	8000d84 <__aeabi_fmul>
 800821c:	4601      	mov	r1, r0
 800821e:	4630      	mov	r0, r6
 8008220:	f7f8 fca8 	bl	8000b74 <__addsf3>
 8008224:	f10a 0a01 	add.w	sl, sl, #1
 8008228:	4606      	mov	r6, r0
 800822a:	e7e0      	b.n	80081ee <__kernel_rem_pio2f+0x312>
 800822c:	3d01      	subs	r5, #1
 800822e:	e76e      	b.n	800810e <__kernel_rem_pio2f+0x232>
 8008230:	9b06      	ldr	r3, [sp, #24]
 8008232:	9a02      	ldr	r2, [sp, #8]
 8008234:	4648      	mov	r0, r9
 8008236:	1a99      	subs	r1, r3, r2
 8008238:	f000 f9c6 	bl	80085c8 <scalbnf>
 800823c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008240:	4605      	mov	r5, r0
 8008242:	f7f8 ff51 	bl	80010e8 <__aeabi_fcmpge>
 8008246:	b300      	cbz	r0, 800828a <__kernel_rem_pio2f+0x3ae>
 8008248:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800824c:	4628      	mov	r0, r5
 800824e:	f7f8 fd99 	bl	8000d84 <__aeabi_fmul>
 8008252:	f7f8 ff73 	bl	800113c <__aeabi_f2iz>
 8008256:	f7f8 fd41 	bl	8000cdc <__aeabi_i2f>
 800825a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800825e:	4681      	mov	r9, r0
 8008260:	f7f8 fd90 	bl	8000d84 <__aeabi_fmul>
 8008264:	4601      	mov	r1, r0
 8008266:	4628      	mov	r0, r5
 8008268:	f7f8 fc82 	bl	8000b70 <__aeabi_fsub>
 800826c:	f7f8 ff66 	bl	800113c <__aeabi_f2iz>
 8008270:	ab0a      	add	r3, sp, #40	; 0x28
 8008272:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008276:	4648      	mov	r0, r9
 8008278:	f7f8 ff60 	bl	800113c <__aeabi_f2iz>
 800827c:	f108 0501 	add.w	r5, r8, #1
 8008280:	ab0a      	add	r3, sp, #40	; 0x28
 8008282:	3708      	adds	r7, #8
 8008284:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8008288:	e748      	b.n	800811c <__kernel_rem_pio2f+0x240>
 800828a:	4628      	mov	r0, r5
 800828c:	f7f8 ff56 	bl	800113c <__aeabi_f2iz>
 8008290:	ab0a      	add	r3, sp, #40	; 0x28
 8008292:	4645      	mov	r5, r8
 8008294:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008298:	e740      	b.n	800811c <__kernel_rem_pio2f+0x240>
 800829a:	ab0a      	add	r3, sp, #40	; 0x28
 800829c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80082a0:	f7f8 fd1c 	bl	8000cdc <__aeabi_i2f>
 80082a4:	4649      	mov	r1, r9
 80082a6:	f7f8 fd6d 	bl	8000d84 <__aeabi_fmul>
 80082aa:	4641      	mov	r1, r8
 80082ac:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 80082b0:	4648      	mov	r0, r9
 80082b2:	f7f8 fd67 	bl	8000d84 <__aeabi_fmul>
 80082b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80082ba:	4681      	mov	r9, r0
 80082bc:	e738      	b.n	8008130 <__kernel_rem_pio2f+0x254>
 80082be:	f853 0b04 	ldr.w	r0, [r3], #4
 80082c2:	f85b 1b04 	ldr.w	r1, [fp], #4
 80082c6:	9203      	str	r2, [sp, #12]
 80082c8:	9302      	str	r3, [sp, #8]
 80082ca:	f7f8 fd5b 	bl	8000d84 <__aeabi_fmul>
 80082ce:	4601      	mov	r1, r0
 80082d0:	4638      	mov	r0, r7
 80082d2:	f7f8 fc4f 	bl	8000b74 <__addsf3>
 80082d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80082da:	4607      	mov	r7, r0
 80082dc:	f108 0801 	add.w	r8, r8, #1
 80082e0:	9901      	ldr	r1, [sp, #4]
 80082e2:	4588      	cmp	r8, r1
 80082e4:	dc01      	bgt.n	80082ea <__kernel_rem_pio2f+0x40e>
 80082e6:	45c2      	cmp	sl, r8
 80082e8:	dae9      	bge.n	80082be <__kernel_rem_pio2f+0x3e2>
 80082ea:	ab5a      	add	r3, sp, #360	; 0x168
 80082ec:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80082f0:	f843 7ca0 	str.w	r7, [r3, #-160]
 80082f4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80082f8:	f10a 0a01 	add.w	sl, sl, #1
 80082fc:	e720      	b.n	8008140 <__kernel_rem_pio2f+0x264>
 80082fe:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008300:	2b02      	cmp	r3, #2
 8008302:	dc07      	bgt.n	8008314 <__kernel_rem_pio2f+0x438>
 8008304:	2b00      	cmp	r3, #0
 8008306:	dc4d      	bgt.n	80083a4 <__kernel_rem_pio2f+0x4c8>
 8008308:	d02e      	beq.n	8008368 <__kernel_rem_pio2f+0x48c>
 800830a:	f006 0007 	and.w	r0, r6, #7
 800830e:	b05b      	add	sp, #364	; 0x16c
 8008310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008314:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008316:	2b03      	cmp	r3, #3
 8008318:	d1f7      	bne.n	800830a <__kernel_rem_pio2f+0x42e>
 800831a:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800831e:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 8008322:	46b8      	mov	r8, r7
 8008324:	46aa      	mov	sl, r5
 8008326:	f1ba 0f00 	cmp.w	sl, #0
 800832a:	dc48      	bgt.n	80083be <__kernel_rem_pio2f+0x4e2>
 800832c:	46a9      	mov	r9, r5
 800832e:	f1b9 0f01 	cmp.w	r9, #1
 8008332:	dc5f      	bgt.n	80083f4 <__kernel_rem_pio2f+0x518>
 8008334:	2000      	movs	r0, #0
 8008336:	2d01      	cmp	r5, #1
 8008338:	dc75      	bgt.n	8008426 <__kernel_rem_pio2f+0x54a>
 800833a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800833c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800833e:	2c00      	cmp	r4, #0
 8008340:	d177      	bne.n	8008432 <__kernel_rem_pio2f+0x556>
 8008342:	9900      	ldr	r1, [sp, #0]
 8008344:	600a      	str	r2, [r1, #0]
 8008346:	460a      	mov	r2, r1
 8008348:	604b      	str	r3, [r1, #4]
 800834a:	6090      	str	r0, [r2, #8]
 800834c:	e7dd      	b.n	800830a <__kernel_rem_pio2f+0x42e>
 800834e:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8008352:	f7f8 fc0f 	bl	8000b74 <__addsf3>
 8008356:	3d01      	subs	r5, #1
 8008358:	2d00      	cmp	r5, #0
 800835a:	daf8      	bge.n	800834e <__kernel_rem_pio2f+0x472>
 800835c:	b10c      	cbz	r4, 8008362 <__kernel_rem_pio2f+0x486>
 800835e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008362:	9b00      	ldr	r3, [sp, #0]
 8008364:	6018      	str	r0, [r3, #0]
 8008366:	e7d0      	b.n	800830a <__kernel_rem_pio2f+0x42e>
 8008368:	2000      	movs	r0, #0
 800836a:	af32      	add	r7, sp, #200	; 0xc8
 800836c:	e7f4      	b.n	8008358 <__kernel_rem_pio2f+0x47c>
 800836e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8008372:	f7f8 fbff 	bl	8000b74 <__addsf3>
 8008376:	3f01      	subs	r7, #1
 8008378:	2f00      	cmp	r7, #0
 800837a:	daf8      	bge.n	800836e <__kernel_rem_pio2f+0x492>
 800837c:	b1bc      	cbz	r4, 80083ae <__kernel_rem_pio2f+0x4d2>
 800837e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8008382:	9a00      	ldr	r2, [sp, #0]
 8008384:	4601      	mov	r1, r0
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800838a:	f7f8 fbf1 	bl	8000b70 <__aeabi_fsub>
 800838e:	2701      	movs	r7, #1
 8008390:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8008394:	42bd      	cmp	r5, r7
 8008396:	da0c      	bge.n	80083b2 <__kernel_rem_pio2f+0x4d6>
 8008398:	b10c      	cbz	r4, 800839e <__kernel_rem_pio2f+0x4c2>
 800839a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800839e:	9b00      	ldr	r3, [sp, #0]
 80083a0:	6058      	str	r0, [r3, #4]
 80083a2:	e7b2      	b.n	800830a <__kernel_rem_pio2f+0x42e>
 80083a4:	462f      	mov	r7, r5
 80083a6:	2000      	movs	r0, #0
 80083a8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80083ac:	e7e4      	b.n	8008378 <__kernel_rem_pio2f+0x49c>
 80083ae:	4603      	mov	r3, r0
 80083b0:	e7e7      	b.n	8008382 <__kernel_rem_pio2f+0x4a6>
 80083b2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80083b6:	f7f8 fbdd 	bl	8000b74 <__addsf3>
 80083ba:	3701      	adds	r7, #1
 80083bc:	e7ea      	b.n	8008394 <__kernel_rem_pio2f+0x4b8>
 80083be:	f8d8 3000 	ldr.w	r3, [r8]
 80083c2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80083c6:	4619      	mov	r1, r3
 80083c8:	4610      	mov	r0, r2
 80083ca:	9302      	str	r3, [sp, #8]
 80083cc:	9201      	str	r2, [sp, #4]
 80083ce:	f7f8 fbd1 	bl	8000b74 <__addsf3>
 80083d2:	9a01      	ldr	r2, [sp, #4]
 80083d4:	4601      	mov	r1, r0
 80083d6:	4681      	mov	r9, r0
 80083d8:	4610      	mov	r0, r2
 80083da:	f7f8 fbc9 	bl	8000b70 <__aeabi_fsub>
 80083de:	9b02      	ldr	r3, [sp, #8]
 80083e0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80083e4:	4619      	mov	r1, r3
 80083e6:	f7f8 fbc5 	bl	8000b74 <__addsf3>
 80083ea:	f848 0904 	str.w	r0, [r8], #-4
 80083ee:	f8c8 9000 	str.w	r9, [r8]
 80083f2:	e798      	b.n	8008326 <__kernel_rem_pio2f+0x44a>
 80083f4:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80083f8:	f8d7 a000 	ldr.w	sl, [r7]
 80083fc:	4618      	mov	r0, r3
 80083fe:	4651      	mov	r1, sl
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	f7f8 fbb7 	bl	8000b74 <__addsf3>
 8008406:	9b01      	ldr	r3, [sp, #4]
 8008408:	4601      	mov	r1, r0
 800840a:	4680      	mov	r8, r0
 800840c:	4618      	mov	r0, r3
 800840e:	f7f8 fbaf 	bl	8000b70 <__aeabi_fsub>
 8008412:	4651      	mov	r1, sl
 8008414:	f7f8 fbae 	bl	8000b74 <__addsf3>
 8008418:	f847 0904 	str.w	r0, [r7], #-4
 800841c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008420:	f8c7 8000 	str.w	r8, [r7]
 8008424:	e783      	b.n	800832e <__kernel_rem_pio2f+0x452>
 8008426:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800842a:	f7f8 fba3 	bl	8000b74 <__addsf3>
 800842e:	3d01      	subs	r5, #1
 8008430:	e781      	b.n	8008336 <__kernel_rem_pio2f+0x45a>
 8008432:	9900      	ldr	r1, [sp, #0]
 8008434:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8008438:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800843c:	600a      	str	r2, [r1, #0]
 800843e:	604b      	str	r3, [r1, #4]
 8008440:	460a      	mov	r2, r1
 8008442:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008446:	e780      	b.n	800834a <__kernel_rem_pio2f+0x46e>

08008448 <__kernel_sinf>:
 8008448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800844c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008450:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008454:	4604      	mov	r4, r0
 8008456:	460f      	mov	r7, r1
 8008458:	4691      	mov	r9, r2
 800845a:	da03      	bge.n	8008464 <__kernel_sinf+0x1c>
 800845c:	f7f8 fe6e 	bl	800113c <__aeabi_f2iz>
 8008460:	2800      	cmp	r0, #0
 8008462:	d035      	beq.n	80084d0 <__kernel_sinf+0x88>
 8008464:	4621      	mov	r1, r4
 8008466:	4620      	mov	r0, r4
 8008468:	f7f8 fc8c 	bl	8000d84 <__aeabi_fmul>
 800846c:	4605      	mov	r5, r0
 800846e:	4601      	mov	r1, r0
 8008470:	4620      	mov	r0, r4
 8008472:	f7f8 fc87 	bl	8000d84 <__aeabi_fmul>
 8008476:	4929      	ldr	r1, [pc, #164]	; (800851c <__kernel_sinf+0xd4>)
 8008478:	4606      	mov	r6, r0
 800847a:	4628      	mov	r0, r5
 800847c:	f7f8 fc82 	bl	8000d84 <__aeabi_fmul>
 8008480:	4927      	ldr	r1, [pc, #156]	; (8008520 <__kernel_sinf+0xd8>)
 8008482:	f7f8 fb75 	bl	8000b70 <__aeabi_fsub>
 8008486:	4629      	mov	r1, r5
 8008488:	f7f8 fc7c 	bl	8000d84 <__aeabi_fmul>
 800848c:	4925      	ldr	r1, [pc, #148]	; (8008524 <__kernel_sinf+0xdc>)
 800848e:	f7f8 fb71 	bl	8000b74 <__addsf3>
 8008492:	4629      	mov	r1, r5
 8008494:	f7f8 fc76 	bl	8000d84 <__aeabi_fmul>
 8008498:	4923      	ldr	r1, [pc, #140]	; (8008528 <__kernel_sinf+0xe0>)
 800849a:	f7f8 fb69 	bl	8000b70 <__aeabi_fsub>
 800849e:	4629      	mov	r1, r5
 80084a0:	f7f8 fc70 	bl	8000d84 <__aeabi_fmul>
 80084a4:	4921      	ldr	r1, [pc, #132]	; (800852c <__kernel_sinf+0xe4>)
 80084a6:	f7f8 fb65 	bl	8000b74 <__addsf3>
 80084aa:	4680      	mov	r8, r0
 80084ac:	f1b9 0f00 	cmp.w	r9, #0
 80084b0:	d111      	bne.n	80084d6 <__kernel_sinf+0x8e>
 80084b2:	4601      	mov	r1, r0
 80084b4:	4628      	mov	r0, r5
 80084b6:	f7f8 fc65 	bl	8000d84 <__aeabi_fmul>
 80084ba:	491d      	ldr	r1, [pc, #116]	; (8008530 <__kernel_sinf+0xe8>)
 80084bc:	f7f8 fb58 	bl	8000b70 <__aeabi_fsub>
 80084c0:	4631      	mov	r1, r6
 80084c2:	f7f8 fc5f 	bl	8000d84 <__aeabi_fmul>
 80084c6:	4601      	mov	r1, r0
 80084c8:	4620      	mov	r0, r4
 80084ca:	f7f8 fb53 	bl	8000b74 <__addsf3>
 80084ce:	4604      	mov	r4, r0
 80084d0:	4620      	mov	r0, r4
 80084d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80084da:	4638      	mov	r0, r7
 80084dc:	f7f8 fc52 	bl	8000d84 <__aeabi_fmul>
 80084e0:	4641      	mov	r1, r8
 80084e2:	4681      	mov	r9, r0
 80084e4:	4630      	mov	r0, r6
 80084e6:	f7f8 fc4d 	bl	8000d84 <__aeabi_fmul>
 80084ea:	4601      	mov	r1, r0
 80084ec:	4648      	mov	r0, r9
 80084ee:	f7f8 fb3f 	bl	8000b70 <__aeabi_fsub>
 80084f2:	4629      	mov	r1, r5
 80084f4:	f7f8 fc46 	bl	8000d84 <__aeabi_fmul>
 80084f8:	4639      	mov	r1, r7
 80084fa:	f7f8 fb39 	bl	8000b70 <__aeabi_fsub>
 80084fe:	490c      	ldr	r1, [pc, #48]	; (8008530 <__kernel_sinf+0xe8>)
 8008500:	4605      	mov	r5, r0
 8008502:	4630      	mov	r0, r6
 8008504:	f7f8 fc3e 	bl	8000d84 <__aeabi_fmul>
 8008508:	4601      	mov	r1, r0
 800850a:	4628      	mov	r0, r5
 800850c:	f7f8 fb32 	bl	8000b74 <__addsf3>
 8008510:	4601      	mov	r1, r0
 8008512:	4620      	mov	r0, r4
 8008514:	f7f8 fb2c 	bl	8000b70 <__aeabi_fsub>
 8008518:	e7d9      	b.n	80084ce <__kernel_sinf+0x86>
 800851a:	bf00      	nop
 800851c:	2f2ec9d3 	.word	0x2f2ec9d3
 8008520:	32d72f34 	.word	0x32d72f34
 8008524:	3638ef1b 	.word	0x3638ef1b
 8008528:	39500d01 	.word	0x39500d01
 800852c:	3c088889 	.word	0x3c088889
 8008530:	3e2aaaab 	.word	0x3e2aaaab

08008534 <fabsf>:
 8008534:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008538:	4770      	bx	lr
	...

0800853c <floorf>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8008542:	3d7f      	subs	r5, #127	; 0x7f
 8008544:	2d16      	cmp	r5, #22
 8008546:	4601      	mov	r1, r0
 8008548:	4604      	mov	r4, r0
 800854a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800854e:	dc26      	bgt.n	800859e <floorf+0x62>
 8008550:	2d00      	cmp	r5, #0
 8008552:	da0e      	bge.n	8008572 <floorf+0x36>
 8008554:	4917      	ldr	r1, [pc, #92]	; (80085b4 <floorf+0x78>)
 8008556:	f7f8 fb0d 	bl	8000b74 <__addsf3>
 800855a:	2100      	movs	r1, #0
 800855c:	f7f8 fdce 	bl	80010fc <__aeabi_fcmpgt>
 8008560:	b128      	cbz	r0, 800856e <floorf+0x32>
 8008562:	2c00      	cmp	r4, #0
 8008564:	da23      	bge.n	80085ae <floorf+0x72>
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <floorf+0x7c>)
 8008568:	2e00      	cmp	r6, #0
 800856a:	bf18      	it	ne
 800856c:	461c      	movne	r4, r3
 800856e:	4621      	mov	r1, r4
 8008570:	e01b      	b.n	80085aa <floorf+0x6e>
 8008572:	4e12      	ldr	r6, [pc, #72]	; (80085bc <floorf+0x80>)
 8008574:	412e      	asrs	r6, r5
 8008576:	4230      	tst	r0, r6
 8008578:	d017      	beq.n	80085aa <floorf+0x6e>
 800857a:	490e      	ldr	r1, [pc, #56]	; (80085b4 <floorf+0x78>)
 800857c:	f7f8 fafa 	bl	8000b74 <__addsf3>
 8008580:	2100      	movs	r1, #0
 8008582:	f7f8 fdbb 	bl	80010fc <__aeabi_fcmpgt>
 8008586:	2800      	cmp	r0, #0
 8008588:	d0f1      	beq.n	800856e <floorf+0x32>
 800858a:	2c00      	cmp	r4, #0
 800858c:	bfbe      	ittt	lt
 800858e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8008592:	fa43 f505 	asrlt.w	r5, r3, r5
 8008596:	1964      	addlt	r4, r4, r5
 8008598:	ea24 0406 	bic.w	r4, r4, r6
 800859c:	e7e7      	b.n	800856e <floorf+0x32>
 800859e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80085a2:	d302      	bcc.n	80085aa <floorf+0x6e>
 80085a4:	f7f8 fae6 	bl	8000b74 <__addsf3>
 80085a8:	4601      	mov	r1, r0
 80085aa:	4608      	mov	r0, r1
 80085ac:	bd70      	pop	{r4, r5, r6, pc}
 80085ae:	2400      	movs	r4, #0
 80085b0:	e7dd      	b.n	800856e <floorf+0x32>
 80085b2:	bf00      	nop
 80085b4:	7149f2ca 	.word	0x7149f2ca
 80085b8:	bf800000 	.word	0xbf800000
 80085bc:	007fffff 	.word	0x007fffff

080085c0 <nanf>:
 80085c0:	4800      	ldr	r0, [pc, #0]	; (80085c4 <nanf+0x4>)
 80085c2:	4770      	bx	lr
 80085c4:	7fc00000 	.word	0x7fc00000

080085c8 <scalbnf>:
 80085c8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4603      	mov	r3, r0
 80085d0:	460d      	mov	r5, r1
 80085d2:	4604      	mov	r4, r0
 80085d4:	d02a      	beq.n	800862c <scalbnf+0x64>
 80085d6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80085da:	d304      	bcc.n	80085e6 <scalbnf+0x1e>
 80085dc:	4601      	mov	r1, r0
 80085de:	f7f8 fac9 	bl	8000b74 <__addsf3>
 80085e2:	4603      	mov	r3, r0
 80085e4:	e022      	b.n	800862c <scalbnf+0x64>
 80085e6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80085ea:	d117      	bne.n	800861c <scalbnf+0x54>
 80085ec:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80085f0:	f7f8 fbc8 	bl	8000d84 <__aeabi_fmul>
 80085f4:	4a17      	ldr	r2, [pc, #92]	; (8008654 <scalbnf+0x8c>)
 80085f6:	4603      	mov	r3, r0
 80085f8:	4295      	cmp	r5, r2
 80085fa:	db0b      	blt.n	8008614 <scalbnf+0x4c>
 80085fc:	4604      	mov	r4, r0
 80085fe:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008602:	3a19      	subs	r2, #25
 8008604:	442a      	add	r2, r5
 8008606:	2afe      	cmp	r2, #254	; 0xfe
 8008608:	dd0a      	ble.n	8008620 <scalbnf+0x58>
 800860a:	4913      	ldr	r1, [pc, #76]	; (8008658 <scalbnf+0x90>)
 800860c:	4618      	mov	r0, r3
 800860e:	f361 001e 	bfi	r0, r1, #0, #31
 8008612:	e000      	b.n	8008616 <scalbnf+0x4e>
 8008614:	4911      	ldr	r1, [pc, #68]	; (800865c <scalbnf+0x94>)
 8008616:	f7f8 fbb5 	bl	8000d84 <__aeabi_fmul>
 800861a:	e7e2      	b.n	80085e2 <scalbnf+0x1a>
 800861c:	0dd2      	lsrs	r2, r2, #23
 800861e:	e7f1      	b.n	8008604 <scalbnf+0x3c>
 8008620:	2a00      	cmp	r2, #0
 8008622:	dd05      	ble.n	8008630 <scalbnf+0x68>
 8008624:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8008628:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800862c:	4618      	mov	r0, r3
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	f112 0f16 	cmn.w	r2, #22
 8008634:	da05      	bge.n	8008642 <scalbnf+0x7a>
 8008636:	f24c 3250 	movw	r2, #50000	; 0xc350
 800863a:	4295      	cmp	r5, r2
 800863c:	dce5      	bgt.n	800860a <scalbnf+0x42>
 800863e:	4907      	ldr	r1, [pc, #28]	; (800865c <scalbnf+0x94>)
 8008640:	e7e4      	b.n	800860c <scalbnf+0x44>
 8008642:	3219      	adds	r2, #25
 8008644:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8008648:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800864c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8008650:	e7e1      	b.n	8008616 <scalbnf+0x4e>
 8008652:	bf00      	nop
 8008654:	ffff3cb0 	.word	0xffff3cb0
 8008658:	7149f2ca 	.word	0x7149f2ca
 800865c:	0da24260 	.word	0x0da24260

08008660 <abort>:
 8008660:	2006      	movs	r0, #6
 8008662:	b508      	push	{r3, lr}
 8008664:	f000 ffae 	bl	80095c4 <raise>
 8008668:	2001      	movs	r0, #1
 800866a:	f7fb f9e6 	bl	8003a3a <_exit>

0800866e <atexit>:
 800866e:	2300      	movs	r3, #0
 8008670:	4601      	mov	r1, r0
 8008672:	461a      	mov	r2, r3
 8008674:	4618      	mov	r0, r3
 8008676:	f001 be8f 	b.w	800a398 <__register_exitproc>

0800867a <atoi>:
 800867a:	220a      	movs	r2, #10
 800867c:	2100      	movs	r1, #0
 800867e:	f001 be81 	b.w	800a384 <strtol>
	...

08008684 <__errno>:
 8008684:	4b01      	ldr	r3, [pc, #4]	; (800868c <__errno+0x8>)
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20000018 	.word	0x20000018

08008690 <__libc_init_array>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	2600      	movs	r6, #0
 8008694:	4d0c      	ldr	r5, [pc, #48]	; (80086c8 <__libc_init_array+0x38>)
 8008696:	4c0d      	ldr	r4, [pc, #52]	; (80086cc <__libc_init_array+0x3c>)
 8008698:	1b64      	subs	r4, r4, r5
 800869a:	10a4      	asrs	r4, r4, #2
 800869c:	42a6      	cmp	r6, r4
 800869e:	d109      	bne.n	80086b4 <__libc_init_array+0x24>
 80086a0:	f004 fc96 	bl	800cfd0 <_init>
 80086a4:	2600      	movs	r6, #0
 80086a6:	4d0a      	ldr	r5, [pc, #40]	; (80086d0 <__libc_init_array+0x40>)
 80086a8:	4c0a      	ldr	r4, [pc, #40]	; (80086d4 <__libc_init_array+0x44>)
 80086aa:	1b64      	subs	r4, r4, r5
 80086ac:	10a4      	asrs	r4, r4, #2
 80086ae:	42a6      	cmp	r6, r4
 80086b0:	d105      	bne.n	80086be <__libc_init_array+0x2e>
 80086b2:	bd70      	pop	{r4, r5, r6, pc}
 80086b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b8:	4798      	blx	r3
 80086ba:	3601      	adds	r6, #1
 80086bc:	e7ee      	b.n	800869c <__libc_init_array+0xc>
 80086be:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c2:	4798      	blx	r3
 80086c4:	3601      	adds	r6, #1
 80086c6:	e7f2      	b.n	80086ae <__libc_init_array+0x1e>
 80086c8:	0800d894 	.word	0x0800d894
 80086cc:	0800d894 	.word	0x0800d894
 80086d0:	0800d894 	.word	0x0800d894
 80086d4:	0800d89c 	.word	0x0800d89c

080086d8 <malloc>:
 80086d8:	4b02      	ldr	r3, [pc, #8]	; (80086e4 <malloc+0xc>)
 80086da:	4601      	mov	r1, r0
 80086dc:	6818      	ldr	r0, [r3, #0]
 80086de:	f000 b86d 	b.w	80087bc <_malloc_r>
 80086e2:	bf00      	nop
 80086e4:	20000018 	.word	0x20000018

080086e8 <free>:
 80086e8:	4b02      	ldr	r3, [pc, #8]	; (80086f4 <free+0xc>)
 80086ea:	4601      	mov	r1, r0
 80086ec:	6818      	ldr	r0, [r3, #0]
 80086ee:	f000 b819 	b.w	8008724 <_free_r>
 80086f2:	bf00      	nop
 80086f4:	20000018 	.word	0x20000018

080086f8 <memcpy>:
 80086f8:	440a      	add	r2, r1
 80086fa:	4291      	cmp	r1, r2
 80086fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008700:	d100      	bne.n	8008704 <memcpy+0xc>
 8008702:	4770      	bx	lr
 8008704:	b510      	push	{r4, lr}
 8008706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800870a:	4291      	cmp	r1, r2
 800870c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008710:	d1f9      	bne.n	8008706 <memcpy+0xe>
 8008712:	bd10      	pop	{r4, pc}

08008714 <memset>:
 8008714:	4603      	mov	r3, r0
 8008716:	4402      	add	r2, r0
 8008718:	4293      	cmp	r3, r2
 800871a:	d100      	bne.n	800871e <memset+0xa>
 800871c:	4770      	bx	lr
 800871e:	f803 1b01 	strb.w	r1, [r3], #1
 8008722:	e7f9      	b.n	8008718 <memset+0x4>

08008724 <_free_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	4605      	mov	r5, r0
 8008728:	2900      	cmp	r1, #0
 800872a:	d043      	beq.n	80087b4 <_free_r+0x90>
 800872c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008730:	1f0c      	subs	r4, r1, #4
 8008732:	2b00      	cmp	r3, #0
 8008734:	bfb8      	it	lt
 8008736:	18e4      	addlt	r4, r4, r3
 8008738:	f003 f89e 	bl	800b878 <__malloc_lock>
 800873c:	4a1e      	ldr	r2, [pc, #120]	; (80087b8 <_free_r+0x94>)
 800873e:	6813      	ldr	r3, [r2, #0]
 8008740:	4610      	mov	r0, r2
 8008742:	b933      	cbnz	r3, 8008752 <_free_r+0x2e>
 8008744:	6063      	str	r3, [r4, #4]
 8008746:	6014      	str	r4, [r2, #0]
 8008748:	4628      	mov	r0, r5
 800874a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800874e:	f003 b899 	b.w	800b884 <__malloc_unlock>
 8008752:	42a3      	cmp	r3, r4
 8008754:	d90a      	bls.n	800876c <_free_r+0x48>
 8008756:	6821      	ldr	r1, [r4, #0]
 8008758:	1862      	adds	r2, r4, r1
 800875a:	4293      	cmp	r3, r2
 800875c:	bf01      	itttt	eq
 800875e:	681a      	ldreq	r2, [r3, #0]
 8008760:	685b      	ldreq	r3, [r3, #4]
 8008762:	1852      	addeq	r2, r2, r1
 8008764:	6022      	streq	r2, [r4, #0]
 8008766:	6063      	str	r3, [r4, #4]
 8008768:	6004      	str	r4, [r0, #0]
 800876a:	e7ed      	b.n	8008748 <_free_r+0x24>
 800876c:	461a      	mov	r2, r3
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	b10b      	cbz	r3, 8008776 <_free_r+0x52>
 8008772:	42a3      	cmp	r3, r4
 8008774:	d9fa      	bls.n	800876c <_free_r+0x48>
 8008776:	6811      	ldr	r1, [r2, #0]
 8008778:	1850      	adds	r0, r2, r1
 800877a:	42a0      	cmp	r0, r4
 800877c:	d10b      	bne.n	8008796 <_free_r+0x72>
 800877e:	6820      	ldr	r0, [r4, #0]
 8008780:	4401      	add	r1, r0
 8008782:	1850      	adds	r0, r2, r1
 8008784:	4283      	cmp	r3, r0
 8008786:	6011      	str	r1, [r2, #0]
 8008788:	d1de      	bne.n	8008748 <_free_r+0x24>
 800878a:	6818      	ldr	r0, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	4401      	add	r1, r0
 8008790:	6011      	str	r1, [r2, #0]
 8008792:	6053      	str	r3, [r2, #4]
 8008794:	e7d8      	b.n	8008748 <_free_r+0x24>
 8008796:	d902      	bls.n	800879e <_free_r+0x7a>
 8008798:	230c      	movs	r3, #12
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	e7d4      	b.n	8008748 <_free_r+0x24>
 800879e:	6820      	ldr	r0, [r4, #0]
 80087a0:	1821      	adds	r1, r4, r0
 80087a2:	428b      	cmp	r3, r1
 80087a4:	bf01      	itttt	eq
 80087a6:	6819      	ldreq	r1, [r3, #0]
 80087a8:	685b      	ldreq	r3, [r3, #4]
 80087aa:	1809      	addeq	r1, r1, r0
 80087ac:	6021      	streq	r1, [r4, #0]
 80087ae:	6063      	str	r3, [r4, #4]
 80087b0:	6054      	str	r4, [r2, #4]
 80087b2:	e7c9      	b.n	8008748 <_free_r+0x24>
 80087b4:	bd38      	pop	{r3, r4, r5, pc}
 80087b6:	bf00      	nop
 80087b8:	200004f8 	.word	0x200004f8

080087bc <_malloc_r>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	1ccd      	adds	r5, r1, #3
 80087c0:	f025 0503 	bic.w	r5, r5, #3
 80087c4:	3508      	adds	r5, #8
 80087c6:	2d0c      	cmp	r5, #12
 80087c8:	bf38      	it	cc
 80087ca:	250c      	movcc	r5, #12
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	4606      	mov	r6, r0
 80087d0:	db01      	blt.n	80087d6 <_malloc_r+0x1a>
 80087d2:	42a9      	cmp	r1, r5
 80087d4:	d903      	bls.n	80087de <_malloc_r+0x22>
 80087d6:	230c      	movs	r3, #12
 80087d8:	6033      	str	r3, [r6, #0]
 80087da:	2000      	movs	r0, #0
 80087dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087de:	f003 f84b 	bl	800b878 <__malloc_lock>
 80087e2:	4921      	ldr	r1, [pc, #132]	; (8008868 <_malloc_r+0xac>)
 80087e4:	680a      	ldr	r2, [r1, #0]
 80087e6:	4614      	mov	r4, r2
 80087e8:	b99c      	cbnz	r4, 8008812 <_malloc_r+0x56>
 80087ea:	4f20      	ldr	r7, [pc, #128]	; (800886c <_malloc_r+0xb0>)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	b923      	cbnz	r3, 80087fa <_malloc_r+0x3e>
 80087f0:	4621      	mov	r1, r4
 80087f2:	4630      	mov	r0, r6
 80087f4:	f000 feae 	bl	8009554 <_sbrk_r>
 80087f8:	6038      	str	r0, [r7, #0]
 80087fa:	4629      	mov	r1, r5
 80087fc:	4630      	mov	r0, r6
 80087fe:	f000 fea9 	bl	8009554 <_sbrk_r>
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	d123      	bne.n	800884e <_malloc_r+0x92>
 8008806:	230c      	movs	r3, #12
 8008808:	4630      	mov	r0, r6
 800880a:	6033      	str	r3, [r6, #0]
 800880c:	f003 f83a 	bl	800b884 <__malloc_unlock>
 8008810:	e7e3      	b.n	80087da <_malloc_r+0x1e>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	1b5b      	subs	r3, r3, r5
 8008816:	d417      	bmi.n	8008848 <_malloc_r+0x8c>
 8008818:	2b0b      	cmp	r3, #11
 800881a:	d903      	bls.n	8008824 <_malloc_r+0x68>
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	441c      	add	r4, r3
 8008820:	6025      	str	r5, [r4, #0]
 8008822:	e004      	b.n	800882e <_malloc_r+0x72>
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	42a2      	cmp	r2, r4
 8008828:	bf0c      	ite	eq
 800882a:	600b      	streq	r3, [r1, #0]
 800882c:	6053      	strne	r3, [r2, #4]
 800882e:	4630      	mov	r0, r6
 8008830:	f003 f828 	bl	800b884 <__malloc_unlock>
 8008834:	f104 000b 	add.w	r0, r4, #11
 8008838:	1d23      	adds	r3, r4, #4
 800883a:	f020 0007 	bic.w	r0, r0, #7
 800883e:	1ac2      	subs	r2, r0, r3
 8008840:	d0cc      	beq.n	80087dc <_malloc_r+0x20>
 8008842:	1a1b      	subs	r3, r3, r0
 8008844:	50a3      	str	r3, [r4, r2]
 8008846:	e7c9      	b.n	80087dc <_malloc_r+0x20>
 8008848:	4622      	mov	r2, r4
 800884a:	6864      	ldr	r4, [r4, #4]
 800884c:	e7cc      	b.n	80087e8 <_malloc_r+0x2c>
 800884e:	1cc4      	adds	r4, r0, #3
 8008850:	f024 0403 	bic.w	r4, r4, #3
 8008854:	42a0      	cmp	r0, r4
 8008856:	d0e3      	beq.n	8008820 <_malloc_r+0x64>
 8008858:	1a21      	subs	r1, r4, r0
 800885a:	4630      	mov	r0, r6
 800885c:	f000 fe7a 	bl	8009554 <_sbrk_r>
 8008860:	3001      	adds	r0, #1
 8008862:	d1dd      	bne.n	8008820 <_malloc_r+0x64>
 8008864:	e7cf      	b.n	8008806 <_malloc_r+0x4a>
 8008866:	bf00      	nop
 8008868:	200004f8 	.word	0x200004f8
 800886c:	200004fc 	.word	0x200004fc

08008870 <__cvt>:
 8008870:	2b00      	cmp	r3, #0
 8008872:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008876:	461f      	mov	r7, r3
 8008878:	bfbb      	ittet	lt
 800887a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800887e:	461f      	movlt	r7, r3
 8008880:	2300      	movge	r3, #0
 8008882:	232d      	movlt	r3, #45	; 0x2d
 8008884:	b088      	sub	sp, #32
 8008886:	4614      	mov	r4, r2
 8008888:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800888a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800888c:	7013      	strb	r3, [r2, #0]
 800888e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008890:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008894:	f023 0820 	bic.w	r8, r3, #32
 8008898:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800889c:	d005      	beq.n	80088aa <__cvt+0x3a>
 800889e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088a2:	d100      	bne.n	80088a6 <__cvt+0x36>
 80088a4:	3501      	adds	r5, #1
 80088a6:	2302      	movs	r3, #2
 80088a8:	e000      	b.n	80088ac <__cvt+0x3c>
 80088aa:	2303      	movs	r3, #3
 80088ac:	aa07      	add	r2, sp, #28
 80088ae:	9204      	str	r2, [sp, #16]
 80088b0:	aa06      	add	r2, sp, #24
 80088b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80088b6:	e9cd 3500 	strd	r3, r5, [sp]
 80088ba:	4622      	mov	r2, r4
 80088bc:	463b      	mov	r3, r7
 80088be:	f001 fe5f 	bl	800a580 <_dtoa_r>
 80088c2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088c6:	4606      	mov	r6, r0
 80088c8:	d102      	bne.n	80088d0 <__cvt+0x60>
 80088ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088cc:	07db      	lsls	r3, r3, #31
 80088ce:	d522      	bpl.n	8008916 <__cvt+0xa6>
 80088d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088d4:	eb06 0905 	add.w	r9, r6, r5
 80088d8:	d110      	bne.n	80088fc <__cvt+0x8c>
 80088da:	7833      	ldrb	r3, [r6, #0]
 80088dc:	2b30      	cmp	r3, #48	; 0x30
 80088de:	d10a      	bne.n	80088f6 <__cvt+0x86>
 80088e0:	2200      	movs	r2, #0
 80088e2:	2300      	movs	r3, #0
 80088e4:	4620      	mov	r0, r4
 80088e6:	4639      	mov	r1, r7
 80088e8:	f7f8 f85e 	bl	80009a8 <__aeabi_dcmpeq>
 80088ec:	b918      	cbnz	r0, 80088f6 <__cvt+0x86>
 80088ee:	f1c5 0501 	rsb	r5, r5, #1
 80088f2:	f8ca 5000 	str.w	r5, [sl]
 80088f6:	f8da 3000 	ldr.w	r3, [sl]
 80088fa:	4499      	add	r9, r3
 80088fc:	2200      	movs	r2, #0
 80088fe:	2300      	movs	r3, #0
 8008900:	4620      	mov	r0, r4
 8008902:	4639      	mov	r1, r7
 8008904:	f7f8 f850 	bl	80009a8 <__aeabi_dcmpeq>
 8008908:	b108      	cbz	r0, 800890e <__cvt+0x9e>
 800890a:	f8cd 901c 	str.w	r9, [sp, #28]
 800890e:	2230      	movs	r2, #48	; 0x30
 8008910:	9b07      	ldr	r3, [sp, #28]
 8008912:	454b      	cmp	r3, r9
 8008914:	d307      	bcc.n	8008926 <__cvt+0xb6>
 8008916:	4630      	mov	r0, r6
 8008918:	9b07      	ldr	r3, [sp, #28]
 800891a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800891c:	1b9b      	subs	r3, r3, r6
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	b008      	add	sp, #32
 8008922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008926:	1c59      	adds	r1, r3, #1
 8008928:	9107      	str	r1, [sp, #28]
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	e7f0      	b.n	8008910 <__cvt+0xa0>

0800892e <__exponent>:
 800892e:	4603      	mov	r3, r0
 8008930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008932:	2900      	cmp	r1, #0
 8008934:	f803 2b02 	strb.w	r2, [r3], #2
 8008938:	bfb6      	itet	lt
 800893a:	222d      	movlt	r2, #45	; 0x2d
 800893c:	222b      	movge	r2, #43	; 0x2b
 800893e:	4249      	neglt	r1, r1
 8008940:	2909      	cmp	r1, #9
 8008942:	7042      	strb	r2, [r0, #1]
 8008944:	dd2b      	ble.n	800899e <__exponent+0x70>
 8008946:	f10d 0407 	add.w	r4, sp, #7
 800894a:	46a4      	mov	ip, r4
 800894c:	270a      	movs	r7, #10
 800894e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008952:	460a      	mov	r2, r1
 8008954:	46a6      	mov	lr, r4
 8008956:	fb07 1516 	mls	r5, r7, r6, r1
 800895a:	2a63      	cmp	r2, #99	; 0x63
 800895c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008960:	4631      	mov	r1, r6
 8008962:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008966:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800896a:	dcf0      	bgt.n	800894e <__exponent+0x20>
 800896c:	3130      	adds	r1, #48	; 0x30
 800896e:	f1ae 0502 	sub.w	r5, lr, #2
 8008972:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008976:	4629      	mov	r1, r5
 8008978:	1c44      	adds	r4, r0, #1
 800897a:	4561      	cmp	r1, ip
 800897c:	d30a      	bcc.n	8008994 <__exponent+0x66>
 800897e:	f10d 0209 	add.w	r2, sp, #9
 8008982:	eba2 020e 	sub.w	r2, r2, lr
 8008986:	4565      	cmp	r5, ip
 8008988:	bf88      	it	hi
 800898a:	2200      	movhi	r2, #0
 800898c:	4413      	add	r3, r2
 800898e:	1a18      	subs	r0, r3, r0
 8008990:	b003      	add	sp, #12
 8008992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008994:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008998:	f804 2f01 	strb.w	r2, [r4, #1]!
 800899c:	e7ed      	b.n	800897a <__exponent+0x4c>
 800899e:	2330      	movs	r3, #48	; 0x30
 80089a0:	3130      	adds	r1, #48	; 0x30
 80089a2:	7083      	strb	r3, [r0, #2]
 80089a4:	70c1      	strb	r1, [r0, #3]
 80089a6:	1d03      	adds	r3, r0, #4
 80089a8:	e7f1      	b.n	800898e <__exponent+0x60>
	...

080089ac <_printf_float>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	b091      	sub	sp, #68	; 0x44
 80089b2:	460c      	mov	r4, r1
 80089b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80089b8:	4616      	mov	r6, r2
 80089ba:	461f      	mov	r7, r3
 80089bc:	4605      	mov	r5, r0
 80089be:	f002 ff33 	bl	800b828 <_localeconv_r>
 80089c2:	6803      	ldr	r3, [r0, #0]
 80089c4:	4618      	mov	r0, r3
 80089c6:	9309      	str	r3, [sp, #36]	; 0x24
 80089c8:	f7f7 fbc2 	bl	8000150 <strlen>
 80089cc:	2300      	movs	r3, #0
 80089ce:	930e      	str	r3, [sp, #56]	; 0x38
 80089d0:	f8d8 3000 	ldr.w	r3, [r8]
 80089d4:	900a      	str	r0, [sp, #40]	; 0x28
 80089d6:	3307      	adds	r3, #7
 80089d8:	f023 0307 	bic.w	r3, r3, #7
 80089dc:	f103 0208 	add.w	r2, r3, #8
 80089e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80089e4:	f8d4 b000 	ldr.w	fp, [r4]
 80089e8:	f8c8 2000 	str.w	r2, [r8]
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80089f4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80089f8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80089fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80089fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a02:	4640      	mov	r0, r8
 8008a04:	4b9c      	ldr	r3, [pc, #624]	; (8008c78 <_printf_float+0x2cc>)
 8008a06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a08:	f7f8 f800 	bl	8000a0c <__aeabi_dcmpun>
 8008a0c:	bb70      	cbnz	r0, 8008a6c <_printf_float+0xc0>
 8008a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a12:	4640      	mov	r0, r8
 8008a14:	4b98      	ldr	r3, [pc, #608]	; (8008c78 <_printf_float+0x2cc>)
 8008a16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a18:	f7f7 ffda 	bl	80009d0 <__aeabi_dcmple>
 8008a1c:	bb30      	cbnz	r0, 8008a6c <_printf_float+0xc0>
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2300      	movs	r3, #0
 8008a22:	4640      	mov	r0, r8
 8008a24:	4651      	mov	r1, sl
 8008a26:	f7f7 ffc9 	bl	80009bc <__aeabi_dcmplt>
 8008a2a:	b110      	cbz	r0, 8008a32 <_printf_float+0x86>
 8008a2c:	232d      	movs	r3, #45	; 0x2d
 8008a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a32:	4b92      	ldr	r3, [pc, #584]	; (8008c7c <_printf_float+0x2d0>)
 8008a34:	4892      	ldr	r0, [pc, #584]	; (8008c80 <_printf_float+0x2d4>)
 8008a36:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008a3a:	bf94      	ite	ls
 8008a3c:	4698      	movls	r8, r3
 8008a3e:	4680      	movhi	r8, r0
 8008a40:	2303      	movs	r3, #3
 8008a42:	f04f 0a00 	mov.w	sl, #0
 8008a46:	6123      	str	r3, [r4, #16]
 8008a48:	f02b 0304 	bic.w	r3, fp, #4
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	4633      	mov	r3, r6
 8008a50:	4621      	mov	r1, r4
 8008a52:	4628      	mov	r0, r5
 8008a54:	9700      	str	r7, [sp, #0]
 8008a56:	aa0f      	add	r2, sp, #60	; 0x3c
 8008a58:	f000 f9d4 	bl	8008e04 <_printf_common>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f040 8090 	bne.w	8008b82 <_printf_float+0x1d6>
 8008a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a66:	b011      	add	sp, #68	; 0x44
 8008a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	4653      	mov	r3, sl
 8008a70:	4640      	mov	r0, r8
 8008a72:	4651      	mov	r1, sl
 8008a74:	f7f7 ffca 	bl	8000a0c <__aeabi_dcmpun>
 8008a78:	b148      	cbz	r0, 8008a8e <_printf_float+0xe2>
 8008a7a:	f1ba 0f00 	cmp.w	sl, #0
 8008a7e:	bfb8      	it	lt
 8008a80:	232d      	movlt	r3, #45	; 0x2d
 8008a82:	4880      	ldr	r0, [pc, #512]	; (8008c84 <_printf_float+0x2d8>)
 8008a84:	bfb8      	it	lt
 8008a86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a8a:	4b7f      	ldr	r3, [pc, #508]	; (8008c88 <_printf_float+0x2dc>)
 8008a8c:	e7d3      	b.n	8008a36 <_printf_float+0x8a>
 8008a8e:	6863      	ldr	r3, [r4, #4]
 8008a90:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	d142      	bne.n	8008b1e <_printf_float+0x172>
 8008a98:	2306      	movs	r3, #6
 8008a9a:	6063      	str	r3, [r4, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	9206      	str	r2, [sp, #24]
 8008aa0:	aa0e      	add	r2, sp, #56	; 0x38
 8008aa2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008aa6:	aa0d      	add	r2, sp, #52	; 0x34
 8008aa8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008aac:	9203      	str	r2, [sp, #12]
 8008aae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008ab2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	6863      	ldr	r3, [r4, #4]
 8008aba:	4642      	mov	r2, r8
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	4628      	mov	r0, r5
 8008ac0:	4653      	mov	r3, sl
 8008ac2:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ac4:	f7ff fed4 	bl	8008870 <__cvt>
 8008ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008aca:	4680      	mov	r8, r0
 8008acc:	2947      	cmp	r1, #71	; 0x47
 8008ace:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ad0:	d108      	bne.n	8008ae4 <_printf_float+0x138>
 8008ad2:	1cc8      	adds	r0, r1, #3
 8008ad4:	db02      	blt.n	8008adc <_printf_float+0x130>
 8008ad6:	6863      	ldr	r3, [r4, #4]
 8008ad8:	4299      	cmp	r1, r3
 8008ada:	dd40      	ble.n	8008b5e <_printf_float+0x1b2>
 8008adc:	f1a9 0902 	sub.w	r9, r9, #2
 8008ae0:	fa5f f989 	uxtb.w	r9, r9
 8008ae4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ae8:	d81f      	bhi.n	8008b2a <_printf_float+0x17e>
 8008aea:	464a      	mov	r2, r9
 8008aec:	3901      	subs	r1, #1
 8008aee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008af2:	910d      	str	r1, [sp, #52]	; 0x34
 8008af4:	f7ff ff1b 	bl	800892e <__exponent>
 8008af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008afa:	4682      	mov	sl, r0
 8008afc:	1813      	adds	r3, r2, r0
 8008afe:	2a01      	cmp	r2, #1
 8008b00:	6123      	str	r3, [r4, #16]
 8008b02:	dc02      	bgt.n	8008b0a <_printf_float+0x15e>
 8008b04:	6822      	ldr	r2, [r4, #0]
 8008b06:	07d2      	lsls	r2, r2, #31
 8008b08:	d501      	bpl.n	8008b0e <_printf_float+0x162>
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	6123      	str	r3, [r4, #16]
 8008b0e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d09b      	beq.n	8008a4e <_printf_float+0xa2>
 8008b16:	232d      	movs	r3, #45	; 0x2d
 8008b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b1c:	e797      	b.n	8008a4e <_printf_float+0xa2>
 8008b1e:	2947      	cmp	r1, #71	; 0x47
 8008b20:	d1bc      	bne.n	8008a9c <_printf_float+0xf0>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1ba      	bne.n	8008a9c <_printf_float+0xf0>
 8008b26:	2301      	movs	r3, #1
 8008b28:	e7b7      	b.n	8008a9a <_printf_float+0xee>
 8008b2a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008b2e:	d118      	bne.n	8008b62 <_printf_float+0x1b6>
 8008b30:	2900      	cmp	r1, #0
 8008b32:	6863      	ldr	r3, [r4, #4]
 8008b34:	dd0b      	ble.n	8008b4e <_printf_float+0x1a2>
 8008b36:	6121      	str	r1, [r4, #16]
 8008b38:	b913      	cbnz	r3, 8008b40 <_printf_float+0x194>
 8008b3a:	6822      	ldr	r2, [r4, #0]
 8008b3c:	07d0      	lsls	r0, r2, #31
 8008b3e:	d502      	bpl.n	8008b46 <_printf_float+0x19a>
 8008b40:	3301      	adds	r3, #1
 8008b42:	440b      	add	r3, r1
 8008b44:	6123      	str	r3, [r4, #16]
 8008b46:	f04f 0a00 	mov.w	sl, #0
 8008b4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b4c:	e7df      	b.n	8008b0e <_printf_float+0x162>
 8008b4e:	b913      	cbnz	r3, 8008b56 <_printf_float+0x1aa>
 8008b50:	6822      	ldr	r2, [r4, #0]
 8008b52:	07d2      	lsls	r2, r2, #31
 8008b54:	d501      	bpl.n	8008b5a <_printf_float+0x1ae>
 8008b56:	3302      	adds	r3, #2
 8008b58:	e7f4      	b.n	8008b44 <_printf_float+0x198>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e7f2      	b.n	8008b44 <_printf_float+0x198>
 8008b5e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b64:	4299      	cmp	r1, r3
 8008b66:	db05      	blt.n	8008b74 <_printf_float+0x1c8>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	6121      	str	r1, [r4, #16]
 8008b6c:	07d8      	lsls	r0, r3, #31
 8008b6e:	d5ea      	bpl.n	8008b46 <_printf_float+0x19a>
 8008b70:	1c4b      	adds	r3, r1, #1
 8008b72:	e7e7      	b.n	8008b44 <_printf_float+0x198>
 8008b74:	2900      	cmp	r1, #0
 8008b76:	bfcc      	ite	gt
 8008b78:	2201      	movgt	r2, #1
 8008b7a:	f1c1 0202 	rsble	r2, r1, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	e7e0      	b.n	8008b44 <_printf_float+0x198>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	055a      	lsls	r2, r3, #21
 8008b86:	d407      	bmi.n	8008b98 <_printf_float+0x1ec>
 8008b88:	6923      	ldr	r3, [r4, #16]
 8008b8a:	4642      	mov	r2, r8
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4628      	mov	r0, r5
 8008b90:	47b8      	blx	r7
 8008b92:	3001      	adds	r0, #1
 8008b94:	d12b      	bne.n	8008bee <_printf_float+0x242>
 8008b96:	e764      	b.n	8008a62 <_printf_float+0xb6>
 8008b98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b9c:	f240 80dd 	bls.w	8008d5a <_printf_float+0x3ae>
 8008ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f7f7 fefe 	bl	80009a8 <__aeabi_dcmpeq>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d033      	beq.n	8008c18 <_printf_float+0x26c>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	4a35      	ldr	r2, [pc, #212]	; (8008c8c <_printf_float+0x2e0>)
 8008bb8:	47b8      	blx	r7
 8008bba:	3001      	adds	r0, #1
 8008bbc:	f43f af51 	beq.w	8008a62 <_printf_float+0xb6>
 8008bc0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	db02      	blt.n	8008bce <_printf_float+0x222>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	07d8      	lsls	r0, r3, #31
 8008bcc:	d50f      	bpl.n	8008bee <_printf_float+0x242>
 8008bce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	47b8      	blx	r7
 8008bd8:	3001      	adds	r0, #1
 8008bda:	f43f af42 	beq.w	8008a62 <_printf_float+0xb6>
 8008bde:	f04f 0800 	mov.w	r8, #0
 8008be2:	f104 091a 	add.w	r9, r4, #26
 8008be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008be8:	3b01      	subs	r3, #1
 8008bea:	4543      	cmp	r3, r8
 8008bec:	dc09      	bgt.n	8008c02 <_printf_float+0x256>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	079b      	lsls	r3, r3, #30
 8008bf2:	f100 8102 	bmi.w	8008dfa <_printf_float+0x44e>
 8008bf6:	68e0      	ldr	r0, [r4, #12]
 8008bf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bfa:	4298      	cmp	r0, r3
 8008bfc:	bfb8      	it	lt
 8008bfe:	4618      	movlt	r0, r3
 8008c00:	e731      	b.n	8008a66 <_printf_float+0xba>
 8008c02:	2301      	movs	r3, #1
 8008c04:	464a      	mov	r2, r9
 8008c06:	4631      	mov	r1, r6
 8008c08:	4628      	mov	r0, r5
 8008c0a:	47b8      	blx	r7
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	f43f af28 	beq.w	8008a62 <_printf_float+0xb6>
 8008c12:	f108 0801 	add.w	r8, r8, #1
 8008c16:	e7e6      	b.n	8008be6 <_printf_float+0x23a>
 8008c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	dc38      	bgt.n	8008c90 <_printf_float+0x2e4>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4631      	mov	r1, r6
 8008c22:	4628      	mov	r0, r5
 8008c24:	4a19      	ldr	r2, [pc, #100]	; (8008c8c <_printf_float+0x2e0>)
 8008c26:	47b8      	blx	r7
 8008c28:	3001      	adds	r0, #1
 8008c2a:	f43f af1a 	beq.w	8008a62 <_printf_float+0xb6>
 8008c2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c32:	4313      	orrs	r3, r2
 8008c34:	d102      	bne.n	8008c3c <_printf_float+0x290>
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	07d9      	lsls	r1, r3, #31
 8008c3a:	d5d8      	bpl.n	8008bee <_printf_float+0x242>
 8008c3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c40:	4631      	mov	r1, r6
 8008c42:	4628      	mov	r0, r5
 8008c44:	47b8      	blx	r7
 8008c46:	3001      	adds	r0, #1
 8008c48:	f43f af0b 	beq.w	8008a62 <_printf_float+0xb6>
 8008c4c:	f04f 0900 	mov.w	r9, #0
 8008c50:	f104 0a1a 	add.w	sl, r4, #26
 8008c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c56:	425b      	negs	r3, r3
 8008c58:	454b      	cmp	r3, r9
 8008c5a:	dc01      	bgt.n	8008c60 <_printf_float+0x2b4>
 8008c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c5e:	e794      	b.n	8008b8a <_printf_float+0x1de>
 8008c60:	2301      	movs	r3, #1
 8008c62:	4652      	mov	r2, sl
 8008c64:	4631      	mov	r1, r6
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b8      	blx	r7
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f43f aef9 	beq.w	8008a62 <_printf_float+0xb6>
 8008c70:	f109 0901 	add.w	r9, r9, #1
 8008c74:	e7ee      	b.n	8008c54 <_printf_float+0x2a8>
 8008c76:	bf00      	nop
 8008c78:	7fefffff 	.word	0x7fefffff
 8008c7c:	0800d3e4 	.word	0x0800d3e4
 8008c80:	0800d3e8 	.word	0x0800d3e8
 8008c84:	0800d3f0 	.word	0x0800d3f0
 8008c88:	0800d3ec 	.word	0x0800d3ec
 8008c8c:	0800d3f4 	.word	0x0800d3f4
 8008c90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c94:	429a      	cmp	r2, r3
 8008c96:	bfa8      	it	ge
 8008c98:	461a      	movge	r2, r3
 8008c9a:	2a00      	cmp	r2, #0
 8008c9c:	4691      	mov	r9, r2
 8008c9e:	dc37      	bgt.n	8008d10 <_printf_float+0x364>
 8008ca0:	f04f 0b00 	mov.w	fp, #0
 8008ca4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ca8:	f104 021a 	add.w	r2, r4, #26
 8008cac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008cb0:	ebaa 0309 	sub.w	r3, sl, r9
 8008cb4:	455b      	cmp	r3, fp
 8008cb6:	dc33      	bgt.n	8008d20 <_printf_float+0x374>
 8008cb8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	db3b      	blt.n	8008d38 <_printf_float+0x38c>
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	07da      	lsls	r2, r3, #31
 8008cc4:	d438      	bmi.n	8008d38 <_printf_float+0x38c>
 8008cc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008cca:	eba2 030a 	sub.w	r3, r2, sl
 8008cce:	eba2 0901 	sub.w	r9, r2, r1
 8008cd2:	4599      	cmp	r9, r3
 8008cd4:	bfa8      	it	ge
 8008cd6:	4699      	movge	r9, r3
 8008cd8:	f1b9 0f00 	cmp.w	r9, #0
 8008cdc:	dc34      	bgt.n	8008d48 <_printf_float+0x39c>
 8008cde:	f04f 0800 	mov.w	r8, #0
 8008ce2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ce6:	f104 0a1a 	add.w	sl, r4, #26
 8008cea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008cee:	1a9b      	subs	r3, r3, r2
 8008cf0:	eba3 0309 	sub.w	r3, r3, r9
 8008cf4:	4543      	cmp	r3, r8
 8008cf6:	f77f af7a 	ble.w	8008bee <_printf_float+0x242>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	4652      	mov	r2, sl
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4628      	mov	r0, r5
 8008d02:	47b8      	blx	r7
 8008d04:	3001      	adds	r0, #1
 8008d06:	f43f aeac 	beq.w	8008a62 <_printf_float+0xb6>
 8008d0a:	f108 0801 	add.w	r8, r8, #1
 8008d0e:	e7ec      	b.n	8008cea <_printf_float+0x33e>
 8008d10:	4613      	mov	r3, r2
 8008d12:	4631      	mov	r1, r6
 8008d14:	4642      	mov	r2, r8
 8008d16:	4628      	mov	r0, r5
 8008d18:	47b8      	blx	r7
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d1c0      	bne.n	8008ca0 <_printf_float+0x2f4>
 8008d1e:	e6a0      	b.n	8008a62 <_printf_float+0xb6>
 8008d20:	2301      	movs	r3, #1
 8008d22:	4631      	mov	r1, r6
 8008d24:	4628      	mov	r0, r5
 8008d26:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d28:	47b8      	blx	r7
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	f43f ae99 	beq.w	8008a62 <_printf_float+0xb6>
 8008d30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d32:	f10b 0b01 	add.w	fp, fp, #1
 8008d36:	e7b9      	b.n	8008cac <_printf_float+0x300>
 8008d38:	4631      	mov	r1, r6
 8008d3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d3e:	4628      	mov	r0, r5
 8008d40:	47b8      	blx	r7
 8008d42:	3001      	adds	r0, #1
 8008d44:	d1bf      	bne.n	8008cc6 <_printf_float+0x31a>
 8008d46:	e68c      	b.n	8008a62 <_printf_float+0xb6>
 8008d48:	464b      	mov	r3, r9
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	eb08 020a 	add.w	r2, r8, sl
 8008d52:	47b8      	blx	r7
 8008d54:	3001      	adds	r0, #1
 8008d56:	d1c2      	bne.n	8008cde <_printf_float+0x332>
 8008d58:	e683      	b.n	8008a62 <_printf_float+0xb6>
 8008d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d5c:	2a01      	cmp	r2, #1
 8008d5e:	dc01      	bgt.n	8008d64 <_printf_float+0x3b8>
 8008d60:	07db      	lsls	r3, r3, #31
 8008d62:	d537      	bpl.n	8008dd4 <_printf_float+0x428>
 8008d64:	2301      	movs	r3, #1
 8008d66:	4642      	mov	r2, r8
 8008d68:	4631      	mov	r1, r6
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	47b8      	blx	r7
 8008d6e:	3001      	adds	r0, #1
 8008d70:	f43f ae77 	beq.w	8008a62 <_printf_float+0xb6>
 8008d74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	47b8      	blx	r7
 8008d7e:	3001      	adds	r0, #1
 8008d80:	f43f ae6f 	beq.w	8008a62 <_printf_float+0xb6>
 8008d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f7f7 fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8008d90:	b9d8      	cbnz	r0, 8008dca <_printf_float+0x41e>
 8008d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d94:	f108 0201 	add.w	r2, r8, #1
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	47b8      	blx	r7
 8008da0:	3001      	adds	r0, #1
 8008da2:	d10e      	bne.n	8008dc2 <_printf_float+0x416>
 8008da4:	e65d      	b.n	8008a62 <_printf_float+0xb6>
 8008da6:	2301      	movs	r3, #1
 8008da8:	464a      	mov	r2, r9
 8008daa:	4631      	mov	r1, r6
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b8      	blx	r7
 8008db0:	3001      	adds	r0, #1
 8008db2:	f43f ae56 	beq.w	8008a62 <_printf_float+0xb6>
 8008db6:	f108 0801 	add.w	r8, r8, #1
 8008dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	4543      	cmp	r3, r8
 8008dc0:	dcf1      	bgt.n	8008da6 <_printf_float+0x3fa>
 8008dc2:	4653      	mov	r3, sl
 8008dc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008dc8:	e6e0      	b.n	8008b8c <_printf_float+0x1e0>
 8008dca:	f04f 0800 	mov.w	r8, #0
 8008dce:	f104 091a 	add.w	r9, r4, #26
 8008dd2:	e7f2      	b.n	8008dba <_printf_float+0x40e>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	4642      	mov	r2, r8
 8008dd8:	e7df      	b.n	8008d9a <_printf_float+0x3ee>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	464a      	mov	r2, r9
 8008dde:	4631      	mov	r1, r6
 8008de0:	4628      	mov	r0, r5
 8008de2:	47b8      	blx	r7
 8008de4:	3001      	adds	r0, #1
 8008de6:	f43f ae3c 	beq.w	8008a62 <_printf_float+0xb6>
 8008dea:	f108 0801 	add.w	r8, r8, #1
 8008dee:	68e3      	ldr	r3, [r4, #12]
 8008df0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008df2:	1a5b      	subs	r3, r3, r1
 8008df4:	4543      	cmp	r3, r8
 8008df6:	dcf0      	bgt.n	8008dda <_printf_float+0x42e>
 8008df8:	e6fd      	b.n	8008bf6 <_printf_float+0x24a>
 8008dfa:	f04f 0800 	mov.w	r8, #0
 8008dfe:	f104 0919 	add.w	r9, r4, #25
 8008e02:	e7f4      	b.n	8008dee <_printf_float+0x442>

08008e04 <_printf_common>:
 8008e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e08:	4616      	mov	r6, r2
 8008e0a:	4699      	mov	r9, r3
 8008e0c:	688a      	ldr	r2, [r1, #8]
 8008e0e:	690b      	ldr	r3, [r1, #16]
 8008e10:	4607      	mov	r7, r0
 8008e12:	4293      	cmp	r3, r2
 8008e14:	bfb8      	it	lt
 8008e16:	4613      	movlt	r3, r2
 8008e18:	6033      	str	r3, [r6, #0]
 8008e1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e1e:	460c      	mov	r4, r1
 8008e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e24:	b10a      	cbz	r2, 8008e2a <_printf_common+0x26>
 8008e26:	3301      	adds	r3, #1
 8008e28:	6033      	str	r3, [r6, #0]
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	0699      	lsls	r1, r3, #26
 8008e2e:	bf42      	ittt	mi
 8008e30:	6833      	ldrmi	r3, [r6, #0]
 8008e32:	3302      	addmi	r3, #2
 8008e34:	6033      	strmi	r3, [r6, #0]
 8008e36:	6825      	ldr	r5, [r4, #0]
 8008e38:	f015 0506 	ands.w	r5, r5, #6
 8008e3c:	d106      	bne.n	8008e4c <_printf_common+0x48>
 8008e3e:	f104 0a19 	add.w	sl, r4, #25
 8008e42:	68e3      	ldr	r3, [r4, #12]
 8008e44:	6832      	ldr	r2, [r6, #0]
 8008e46:	1a9b      	subs	r3, r3, r2
 8008e48:	42ab      	cmp	r3, r5
 8008e4a:	dc28      	bgt.n	8008e9e <_printf_common+0x9a>
 8008e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e50:	1e13      	subs	r3, r2, #0
 8008e52:	6822      	ldr	r2, [r4, #0]
 8008e54:	bf18      	it	ne
 8008e56:	2301      	movne	r3, #1
 8008e58:	0692      	lsls	r2, r2, #26
 8008e5a:	d42d      	bmi.n	8008eb8 <_printf_common+0xb4>
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	4638      	mov	r0, r7
 8008e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e64:	47c0      	blx	r8
 8008e66:	3001      	adds	r0, #1
 8008e68:	d020      	beq.n	8008eac <_printf_common+0xa8>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	68e5      	ldr	r5, [r4, #12]
 8008e6e:	f003 0306 	and.w	r3, r3, #6
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	bf18      	it	ne
 8008e76:	2500      	movne	r5, #0
 8008e78:	6832      	ldr	r2, [r6, #0]
 8008e7a:	f04f 0600 	mov.w	r6, #0
 8008e7e:	68a3      	ldr	r3, [r4, #8]
 8008e80:	bf08      	it	eq
 8008e82:	1aad      	subeq	r5, r5, r2
 8008e84:	6922      	ldr	r2, [r4, #16]
 8008e86:	bf08      	it	eq
 8008e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	bfc4      	itt	gt
 8008e90:	1a9b      	subgt	r3, r3, r2
 8008e92:	18ed      	addgt	r5, r5, r3
 8008e94:	341a      	adds	r4, #26
 8008e96:	42b5      	cmp	r5, r6
 8008e98:	d11a      	bne.n	8008ed0 <_printf_common+0xcc>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e008      	b.n	8008eb0 <_printf_common+0xac>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	4649      	mov	r1, r9
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	47c0      	blx	r8
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d103      	bne.n	8008eb4 <_printf_common+0xb0>
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb4:	3501      	adds	r5, #1
 8008eb6:	e7c4      	b.n	8008e42 <_printf_common+0x3e>
 8008eb8:	2030      	movs	r0, #48	; 0x30
 8008eba:	18e1      	adds	r1, r4, r3
 8008ebc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ec6:	4422      	add	r2, r4
 8008ec8:	3302      	adds	r3, #2
 8008eca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ece:	e7c5      	b.n	8008e5c <_printf_common+0x58>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	4622      	mov	r2, r4
 8008ed4:	4649      	mov	r1, r9
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	47c0      	blx	r8
 8008eda:	3001      	adds	r0, #1
 8008edc:	d0e6      	beq.n	8008eac <_printf_common+0xa8>
 8008ede:	3601      	adds	r6, #1
 8008ee0:	e7d9      	b.n	8008e96 <_printf_common+0x92>
	...

08008ee4 <_printf_i>:
 8008ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee8:	460c      	mov	r4, r1
 8008eea:	7e27      	ldrb	r7, [r4, #24]
 8008eec:	4691      	mov	r9, r2
 8008eee:	2f78      	cmp	r7, #120	; 0x78
 8008ef0:	4680      	mov	r8, r0
 8008ef2:	469a      	mov	sl, r3
 8008ef4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ef6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008efa:	d807      	bhi.n	8008f0c <_printf_i+0x28>
 8008efc:	2f62      	cmp	r7, #98	; 0x62
 8008efe:	d80a      	bhi.n	8008f16 <_printf_i+0x32>
 8008f00:	2f00      	cmp	r7, #0
 8008f02:	f000 80d9 	beq.w	80090b8 <_printf_i+0x1d4>
 8008f06:	2f58      	cmp	r7, #88	; 0x58
 8008f08:	f000 80a4 	beq.w	8009054 <_printf_i+0x170>
 8008f0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f14:	e03a      	b.n	8008f8c <_printf_i+0xa8>
 8008f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f1a:	2b15      	cmp	r3, #21
 8008f1c:	d8f6      	bhi.n	8008f0c <_printf_i+0x28>
 8008f1e:	a001      	add	r0, pc, #4	; (adr r0, 8008f24 <_printf_i+0x40>)
 8008f20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f24:	08008f7d 	.word	0x08008f7d
 8008f28:	08008f91 	.word	0x08008f91
 8008f2c:	08008f0d 	.word	0x08008f0d
 8008f30:	08008f0d 	.word	0x08008f0d
 8008f34:	08008f0d 	.word	0x08008f0d
 8008f38:	08008f0d 	.word	0x08008f0d
 8008f3c:	08008f91 	.word	0x08008f91
 8008f40:	08008f0d 	.word	0x08008f0d
 8008f44:	08008f0d 	.word	0x08008f0d
 8008f48:	08008f0d 	.word	0x08008f0d
 8008f4c:	08008f0d 	.word	0x08008f0d
 8008f50:	0800909f 	.word	0x0800909f
 8008f54:	08008fc1 	.word	0x08008fc1
 8008f58:	08009081 	.word	0x08009081
 8008f5c:	08008f0d 	.word	0x08008f0d
 8008f60:	08008f0d 	.word	0x08008f0d
 8008f64:	080090c1 	.word	0x080090c1
 8008f68:	08008f0d 	.word	0x08008f0d
 8008f6c:	08008fc1 	.word	0x08008fc1
 8008f70:	08008f0d 	.word	0x08008f0d
 8008f74:	08008f0d 	.word	0x08008f0d
 8008f78:	08009089 	.word	0x08009089
 8008f7c:	680b      	ldr	r3, [r1, #0]
 8008f7e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f82:	1d1a      	adds	r2, r3, #4
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	600a      	str	r2, [r1, #0]
 8008f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e0a4      	b.n	80090da <_printf_i+0x1f6>
 8008f90:	6825      	ldr	r5, [r4, #0]
 8008f92:	6808      	ldr	r0, [r1, #0]
 8008f94:	062e      	lsls	r6, r5, #24
 8008f96:	f100 0304 	add.w	r3, r0, #4
 8008f9a:	d50a      	bpl.n	8008fb2 <_printf_i+0xce>
 8008f9c:	6805      	ldr	r5, [r0, #0]
 8008f9e:	600b      	str	r3, [r1, #0]
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	da03      	bge.n	8008fac <_printf_i+0xc8>
 8008fa4:	232d      	movs	r3, #45	; 0x2d
 8008fa6:	426d      	negs	r5, r5
 8008fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fac:	230a      	movs	r3, #10
 8008fae:	485e      	ldr	r0, [pc, #376]	; (8009128 <_printf_i+0x244>)
 8008fb0:	e019      	b.n	8008fe6 <_printf_i+0x102>
 8008fb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008fb6:	6805      	ldr	r5, [r0, #0]
 8008fb8:	600b      	str	r3, [r1, #0]
 8008fba:	bf18      	it	ne
 8008fbc:	b22d      	sxthne	r5, r5
 8008fbe:	e7ef      	b.n	8008fa0 <_printf_i+0xbc>
 8008fc0:	680b      	ldr	r3, [r1, #0]
 8008fc2:	6825      	ldr	r5, [r4, #0]
 8008fc4:	1d18      	adds	r0, r3, #4
 8008fc6:	6008      	str	r0, [r1, #0]
 8008fc8:	0628      	lsls	r0, r5, #24
 8008fca:	d501      	bpl.n	8008fd0 <_printf_i+0xec>
 8008fcc:	681d      	ldr	r5, [r3, #0]
 8008fce:	e002      	b.n	8008fd6 <_printf_i+0xf2>
 8008fd0:	0669      	lsls	r1, r5, #25
 8008fd2:	d5fb      	bpl.n	8008fcc <_printf_i+0xe8>
 8008fd4:	881d      	ldrh	r5, [r3, #0]
 8008fd6:	2f6f      	cmp	r7, #111	; 0x6f
 8008fd8:	bf0c      	ite	eq
 8008fda:	2308      	moveq	r3, #8
 8008fdc:	230a      	movne	r3, #10
 8008fde:	4852      	ldr	r0, [pc, #328]	; (8009128 <_printf_i+0x244>)
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fe6:	6866      	ldr	r6, [r4, #4]
 8008fe8:	2e00      	cmp	r6, #0
 8008fea:	bfa8      	it	ge
 8008fec:	6821      	ldrge	r1, [r4, #0]
 8008fee:	60a6      	str	r6, [r4, #8]
 8008ff0:	bfa4      	itt	ge
 8008ff2:	f021 0104 	bicge.w	r1, r1, #4
 8008ff6:	6021      	strge	r1, [r4, #0]
 8008ff8:	b90d      	cbnz	r5, 8008ffe <_printf_i+0x11a>
 8008ffa:	2e00      	cmp	r6, #0
 8008ffc:	d04d      	beq.n	800909a <_printf_i+0x1b6>
 8008ffe:	4616      	mov	r6, r2
 8009000:	fbb5 f1f3 	udiv	r1, r5, r3
 8009004:	fb03 5711 	mls	r7, r3, r1, r5
 8009008:	5dc7      	ldrb	r7, [r0, r7]
 800900a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800900e:	462f      	mov	r7, r5
 8009010:	42bb      	cmp	r3, r7
 8009012:	460d      	mov	r5, r1
 8009014:	d9f4      	bls.n	8009000 <_printf_i+0x11c>
 8009016:	2b08      	cmp	r3, #8
 8009018:	d10b      	bne.n	8009032 <_printf_i+0x14e>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	07df      	lsls	r7, r3, #31
 800901e:	d508      	bpl.n	8009032 <_printf_i+0x14e>
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	6861      	ldr	r1, [r4, #4]
 8009024:	4299      	cmp	r1, r3
 8009026:	bfde      	ittt	le
 8009028:	2330      	movle	r3, #48	; 0x30
 800902a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800902e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009032:	1b92      	subs	r2, r2, r6
 8009034:	6122      	str	r2, [r4, #16]
 8009036:	464b      	mov	r3, r9
 8009038:	4621      	mov	r1, r4
 800903a:	4640      	mov	r0, r8
 800903c:	f8cd a000 	str.w	sl, [sp]
 8009040:	aa03      	add	r2, sp, #12
 8009042:	f7ff fedf 	bl	8008e04 <_printf_common>
 8009046:	3001      	adds	r0, #1
 8009048:	d14c      	bne.n	80090e4 <_printf_i+0x200>
 800904a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800904e:	b004      	add	sp, #16
 8009050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009054:	4834      	ldr	r0, [pc, #208]	; (8009128 <_printf_i+0x244>)
 8009056:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800905a:	680e      	ldr	r6, [r1, #0]
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009062:	061f      	lsls	r7, r3, #24
 8009064:	600e      	str	r6, [r1, #0]
 8009066:	d514      	bpl.n	8009092 <_printf_i+0x1ae>
 8009068:	07d9      	lsls	r1, r3, #31
 800906a:	bf44      	itt	mi
 800906c:	f043 0320 	orrmi.w	r3, r3, #32
 8009070:	6023      	strmi	r3, [r4, #0]
 8009072:	b91d      	cbnz	r5, 800907c <_printf_i+0x198>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	f023 0320 	bic.w	r3, r3, #32
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	2310      	movs	r3, #16
 800907e:	e7af      	b.n	8008fe0 <_printf_i+0xfc>
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	f043 0320 	orr.w	r3, r3, #32
 8009086:	6023      	str	r3, [r4, #0]
 8009088:	2378      	movs	r3, #120	; 0x78
 800908a:	4828      	ldr	r0, [pc, #160]	; (800912c <_printf_i+0x248>)
 800908c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009090:	e7e3      	b.n	800905a <_printf_i+0x176>
 8009092:	065e      	lsls	r6, r3, #25
 8009094:	bf48      	it	mi
 8009096:	b2ad      	uxthmi	r5, r5
 8009098:	e7e6      	b.n	8009068 <_printf_i+0x184>
 800909a:	4616      	mov	r6, r2
 800909c:	e7bb      	b.n	8009016 <_printf_i+0x132>
 800909e:	680b      	ldr	r3, [r1, #0]
 80090a0:	6826      	ldr	r6, [r4, #0]
 80090a2:	1d1d      	adds	r5, r3, #4
 80090a4:	6960      	ldr	r0, [r4, #20]
 80090a6:	600d      	str	r5, [r1, #0]
 80090a8:	0635      	lsls	r5, r6, #24
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	d501      	bpl.n	80090b2 <_printf_i+0x1ce>
 80090ae:	6018      	str	r0, [r3, #0]
 80090b0:	e002      	b.n	80090b8 <_printf_i+0x1d4>
 80090b2:	0671      	lsls	r1, r6, #25
 80090b4:	d5fb      	bpl.n	80090ae <_printf_i+0x1ca>
 80090b6:	8018      	strh	r0, [r3, #0]
 80090b8:	2300      	movs	r3, #0
 80090ba:	4616      	mov	r6, r2
 80090bc:	6123      	str	r3, [r4, #16]
 80090be:	e7ba      	b.n	8009036 <_printf_i+0x152>
 80090c0:	680b      	ldr	r3, [r1, #0]
 80090c2:	1d1a      	adds	r2, r3, #4
 80090c4:	600a      	str	r2, [r1, #0]
 80090c6:	681e      	ldr	r6, [r3, #0]
 80090c8:	2100      	movs	r1, #0
 80090ca:	4630      	mov	r0, r6
 80090cc:	6862      	ldr	r2, [r4, #4]
 80090ce:	f002 fbc5 	bl	800b85c <memchr>
 80090d2:	b108      	cbz	r0, 80090d8 <_printf_i+0x1f4>
 80090d4:	1b80      	subs	r0, r0, r6
 80090d6:	6060      	str	r0, [r4, #4]
 80090d8:	6863      	ldr	r3, [r4, #4]
 80090da:	6123      	str	r3, [r4, #16]
 80090dc:	2300      	movs	r3, #0
 80090de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090e2:	e7a8      	b.n	8009036 <_printf_i+0x152>
 80090e4:	4632      	mov	r2, r6
 80090e6:	4649      	mov	r1, r9
 80090e8:	4640      	mov	r0, r8
 80090ea:	6923      	ldr	r3, [r4, #16]
 80090ec:	47d0      	blx	sl
 80090ee:	3001      	adds	r0, #1
 80090f0:	d0ab      	beq.n	800904a <_printf_i+0x166>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	079b      	lsls	r3, r3, #30
 80090f6:	d413      	bmi.n	8009120 <_printf_i+0x23c>
 80090f8:	68e0      	ldr	r0, [r4, #12]
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	4298      	cmp	r0, r3
 80090fe:	bfb8      	it	lt
 8009100:	4618      	movlt	r0, r3
 8009102:	e7a4      	b.n	800904e <_printf_i+0x16a>
 8009104:	2301      	movs	r3, #1
 8009106:	4632      	mov	r2, r6
 8009108:	4649      	mov	r1, r9
 800910a:	4640      	mov	r0, r8
 800910c:	47d0      	blx	sl
 800910e:	3001      	adds	r0, #1
 8009110:	d09b      	beq.n	800904a <_printf_i+0x166>
 8009112:	3501      	adds	r5, #1
 8009114:	68e3      	ldr	r3, [r4, #12]
 8009116:	9903      	ldr	r1, [sp, #12]
 8009118:	1a5b      	subs	r3, r3, r1
 800911a:	42ab      	cmp	r3, r5
 800911c:	dcf2      	bgt.n	8009104 <_printf_i+0x220>
 800911e:	e7eb      	b.n	80090f8 <_printf_i+0x214>
 8009120:	2500      	movs	r5, #0
 8009122:	f104 0619 	add.w	r6, r4, #25
 8009126:	e7f5      	b.n	8009114 <_printf_i+0x230>
 8009128:	0800d3f6 	.word	0x0800d3f6
 800912c:	0800d407 	.word	0x0800d407

08009130 <_scanf_float>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	b087      	sub	sp, #28
 8009136:	9303      	str	r3, [sp, #12]
 8009138:	688b      	ldr	r3, [r1, #8]
 800913a:	4617      	mov	r7, r2
 800913c:	1e5a      	subs	r2, r3, #1
 800913e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009142:	bf85      	ittet	hi
 8009144:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009148:	195b      	addhi	r3, r3, r5
 800914a:	2300      	movls	r3, #0
 800914c:	9302      	strhi	r3, [sp, #8]
 800914e:	bf88      	it	hi
 8009150:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009154:	468b      	mov	fp, r1
 8009156:	f04f 0500 	mov.w	r5, #0
 800915a:	bf8c      	ite	hi
 800915c:	608b      	strhi	r3, [r1, #8]
 800915e:	9302      	strls	r3, [sp, #8]
 8009160:	680b      	ldr	r3, [r1, #0]
 8009162:	4680      	mov	r8, r0
 8009164:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009168:	f84b 3b1c 	str.w	r3, [fp], #28
 800916c:	460c      	mov	r4, r1
 800916e:	465e      	mov	r6, fp
 8009170:	46aa      	mov	sl, r5
 8009172:	46a9      	mov	r9, r5
 8009174:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009178:	9501      	str	r5, [sp, #4]
 800917a:	68a2      	ldr	r2, [r4, #8]
 800917c:	b152      	cbz	r2, 8009194 <_scanf_float+0x64>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b4e      	cmp	r3, #78	; 0x4e
 8009184:	d864      	bhi.n	8009250 <_scanf_float+0x120>
 8009186:	2b40      	cmp	r3, #64	; 0x40
 8009188:	d83c      	bhi.n	8009204 <_scanf_float+0xd4>
 800918a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800918e:	b2c8      	uxtb	r0, r1
 8009190:	280e      	cmp	r0, #14
 8009192:	d93a      	bls.n	800920a <_scanf_float+0xda>
 8009194:	f1b9 0f00 	cmp.w	r9, #0
 8009198:	d003      	beq.n	80091a2 <_scanf_float+0x72>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80091a6:	f1ba 0f01 	cmp.w	sl, #1
 80091aa:	f200 8113 	bhi.w	80093d4 <_scanf_float+0x2a4>
 80091ae:	455e      	cmp	r6, fp
 80091b0:	f200 8105 	bhi.w	80093be <_scanf_float+0x28e>
 80091b4:	2501      	movs	r5, #1
 80091b6:	4628      	mov	r0, r5
 80091b8:	b007      	add	sp, #28
 80091ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80091c2:	2a0d      	cmp	r2, #13
 80091c4:	d8e6      	bhi.n	8009194 <_scanf_float+0x64>
 80091c6:	a101      	add	r1, pc, #4	; (adr r1, 80091cc <_scanf_float+0x9c>)
 80091c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80091cc:	0800930b 	.word	0x0800930b
 80091d0:	08009195 	.word	0x08009195
 80091d4:	08009195 	.word	0x08009195
 80091d8:	08009195 	.word	0x08009195
 80091dc:	0800936b 	.word	0x0800936b
 80091e0:	08009343 	.word	0x08009343
 80091e4:	08009195 	.word	0x08009195
 80091e8:	08009195 	.word	0x08009195
 80091ec:	08009319 	.word	0x08009319
 80091f0:	08009195 	.word	0x08009195
 80091f4:	08009195 	.word	0x08009195
 80091f8:	08009195 	.word	0x08009195
 80091fc:	08009195 	.word	0x08009195
 8009200:	080092d1 	.word	0x080092d1
 8009204:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009208:	e7db      	b.n	80091c2 <_scanf_float+0x92>
 800920a:	290e      	cmp	r1, #14
 800920c:	d8c2      	bhi.n	8009194 <_scanf_float+0x64>
 800920e:	a001      	add	r0, pc, #4	; (adr r0, 8009214 <_scanf_float+0xe4>)
 8009210:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009214:	080092c3 	.word	0x080092c3
 8009218:	08009195 	.word	0x08009195
 800921c:	080092c3 	.word	0x080092c3
 8009220:	08009357 	.word	0x08009357
 8009224:	08009195 	.word	0x08009195
 8009228:	08009271 	.word	0x08009271
 800922c:	080092ad 	.word	0x080092ad
 8009230:	080092ad 	.word	0x080092ad
 8009234:	080092ad 	.word	0x080092ad
 8009238:	080092ad 	.word	0x080092ad
 800923c:	080092ad 	.word	0x080092ad
 8009240:	080092ad 	.word	0x080092ad
 8009244:	080092ad 	.word	0x080092ad
 8009248:	080092ad 	.word	0x080092ad
 800924c:	080092ad 	.word	0x080092ad
 8009250:	2b6e      	cmp	r3, #110	; 0x6e
 8009252:	d809      	bhi.n	8009268 <_scanf_float+0x138>
 8009254:	2b60      	cmp	r3, #96	; 0x60
 8009256:	d8b2      	bhi.n	80091be <_scanf_float+0x8e>
 8009258:	2b54      	cmp	r3, #84	; 0x54
 800925a:	d077      	beq.n	800934c <_scanf_float+0x21c>
 800925c:	2b59      	cmp	r3, #89	; 0x59
 800925e:	d199      	bne.n	8009194 <_scanf_float+0x64>
 8009260:	2d07      	cmp	r5, #7
 8009262:	d197      	bne.n	8009194 <_scanf_float+0x64>
 8009264:	2508      	movs	r5, #8
 8009266:	e029      	b.n	80092bc <_scanf_float+0x18c>
 8009268:	2b74      	cmp	r3, #116	; 0x74
 800926a:	d06f      	beq.n	800934c <_scanf_float+0x21c>
 800926c:	2b79      	cmp	r3, #121	; 0x79
 800926e:	e7f6      	b.n	800925e <_scanf_float+0x12e>
 8009270:	6821      	ldr	r1, [r4, #0]
 8009272:	05c8      	lsls	r0, r1, #23
 8009274:	d51a      	bpl.n	80092ac <_scanf_float+0x17c>
 8009276:	9b02      	ldr	r3, [sp, #8]
 8009278:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800927c:	6021      	str	r1, [r4, #0]
 800927e:	f109 0901 	add.w	r9, r9, #1
 8009282:	b11b      	cbz	r3, 800928c <_scanf_float+0x15c>
 8009284:	3b01      	subs	r3, #1
 8009286:	3201      	adds	r2, #1
 8009288:	9302      	str	r3, [sp, #8]
 800928a:	60a2      	str	r2, [r4, #8]
 800928c:	68a3      	ldr	r3, [r4, #8]
 800928e:	3b01      	subs	r3, #1
 8009290:	60a3      	str	r3, [r4, #8]
 8009292:	6923      	ldr	r3, [r4, #16]
 8009294:	3301      	adds	r3, #1
 8009296:	6123      	str	r3, [r4, #16]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3b01      	subs	r3, #1
 800929c:	2b00      	cmp	r3, #0
 800929e:	607b      	str	r3, [r7, #4]
 80092a0:	f340 8084 	ble.w	80093ac <_scanf_float+0x27c>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	3301      	adds	r3, #1
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	e766      	b.n	800917a <_scanf_float+0x4a>
 80092ac:	eb1a 0f05 	cmn.w	sl, r5
 80092b0:	f47f af70 	bne.w	8009194 <_scanf_float+0x64>
 80092b4:	6822      	ldr	r2, [r4, #0]
 80092b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80092ba:	6022      	str	r2, [r4, #0]
 80092bc:	f806 3b01 	strb.w	r3, [r6], #1
 80092c0:	e7e4      	b.n	800928c <_scanf_float+0x15c>
 80092c2:	6822      	ldr	r2, [r4, #0]
 80092c4:	0610      	lsls	r0, r2, #24
 80092c6:	f57f af65 	bpl.w	8009194 <_scanf_float+0x64>
 80092ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092ce:	e7f4      	b.n	80092ba <_scanf_float+0x18a>
 80092d0:	f1ba 0f00 	cmp.w	sl, #0
 80092d4:	d10e      	bne.n	80092f4 <_scanf_float+0x1c4>
 80092d6:	f1b9 0f00 	cmp.w	r9, #0
 80092da:	d10e      	bne.n	80092fa <_scanf_float+0x1ca>
 80092dc:	6822      	ldr	r2, [r4, #0]
 80092de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80092e6:	d108      	bne.n	80092fa <_scanf_float+0x1ca>
 80092e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092ec:	f04f 0a01 	mov.w	sl, #1
 80092f0:	6022      	str	r2, [r4, #0]
 80092f2:	e7e3      	b.n	80092bc <_scanf_float+0x18c>
 80092f4:	f1ba 0f02 	cmp.w	sl, #2
 80092f8:	d055      	beq.n	80093a6 <_scanf_float+0x276>
 80092fa:	2d01      	cmp	r5, #1
 80092fc:	d002      	beq.n	8009304 <_scanf_float+0x1d4>
 80092fe:	2d04      	cmp	r5, #4
 8009300:	f47f af48 	bne.w	8009194 <_scanf_float+0x64>
 8009304:	3501      	adds	r5, #1
 8009306:	b2ed      	uxtb	r5, r5
 8009308:	e7d8      	b.n	80092bc <_scanf_float+0x18c>
 800930a:	f1ba 0f01 	cmp.w	sl, #1
 800930e:	f47f af41 	bne.w	8009194 <_scanf_float+0x64>
 8009312:	f04f 0a02 	mov.w	sl, #2
 8009316:	e7d1      	b.n	80092bc <_scanf_float+0x18c>
 8009318:	b97d      	cbnz	r5, 800933a <_scanf_float+0x20a>
 800931a:	f1b9 0f00 	cmp.w	r9, #0
 800931e:	f47f af3c 	bne.w	800919a <_scanf_float+0x6a>
 8009322:	6822      	ldr	r2, [r4, #0]
 8009324:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009328:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800932c:	f47f af39 	bne.w	80091a2 <_scanf_float+0x72>
 8009330:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009334:	2501      	movs	r5, #1
 8009336:	6022      	str	r2, [r4, #0]
 8009338:	e7c0      	b.n	80092bc <_scanf_float+0x18c>
 800933a:	2d03      	cmp	r5, #3
 800933c:	d0e2      	beq.n	8009304 <_scanf_float+0x1d4>
 800933e:	2d05      	cmp	r5, #5
 8009340:	e7de      	b.n	8009300 <_scanf_float+0x1d0>
 8009342:	2d02      	cmp	r5, #2
 8009344:	f47f af26 	bne.w	8009194 <_scanf_float+0x64>
 8009348:	2503      	movs	r5, #3
 800934a:	e7b7      	b.n	80092bc <_scanf_float+0x18c>
 800934c:	2d06      	cmp	r5, #6
 800934e:	f47f af21 	bne.w	8009194 <_scanf_float+0x64>
 8009352:	2507      	movs	r5, #7
 8009354:	e7b2      	b.n	80092bc <_scanf_float+0x18c>
 8009356:	6822      	ldr	r2, [r4, #0]
 8009358:	0591      	lsls	r1, r2, #22
 800935a:	f57f af1b 	bpl.w	8009194 <_scanf_float+0x64>
 800935e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009362:	6022      	str	r2, [r4, #0]
 8009364:	f8cd 9004 	str.w	r9, [sp, #4]
 8009368:	e7a8      	b.n	80092bc <_scanf_float+0x18c>
 800936a:	6822      	ldr	r2, [r4, #0]
 800936c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009370:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009374:	d006      	beq.n	8009384 <_scanf_float+0x254>
 8009376:	0550      	lsls	r0, r2, #21
 8009378:	f57f af0c 	bpl.w	8009194 <_scanf_float+0x64>
 800937c:	f1b9 0f00 	cmp.w	r9, #0
 8009380:	f43f af0f 	beq.w	80091a2 <_scanf_float+0x72>
 8009384:	0591      	lsls	r1, r2, #22
 8009386:	bf58      	it	pl
 8009388:	9901      	ldrpl	r1, [sp, #4]
 800938a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800938e:	bf58      	it	pl
 8009390:	eba9 0101 	subpl.w	r1, r9, r1
 8009394:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009398:	f04f 0900 	mov.w	r9, #0
 800939c:	bf58      	it	pl
 800939e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80093a2:	6022      	str	r2, [r4, #0]
 80093a4:	e78a      	b.n	80092bc <_scanf_float+0x18c>
 80093a6:	f04f 0a03 	mov.w	sl, #3
 80093aa:	e787      	b.n	80092bc <_scanf_float+0x18c>
 80093ac:	4639      	mov	r1, r7
 80093ae:	4640      	mov	r0, r8
 80093b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80093b4:	4798      	blx	r3
 80093b6:	2800      	cmp	r0, #0
 80093b8:	f43f aedf 	beq.w	800917a <_scanf_float+0x4a>
 80093bc:	e6ea      	b.n	8009194 <_scanf_float+0x64>
 80093be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093c2:	463a      	mov	r2, r7
 80093c4:	4640      	mov	r0, r8
 80093c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093ca:	4798      	blx	r3
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	6123      	str	r3, [r4, #16]
 80093d2:	e6ec      	b.n	80091ae <_scanf_float+0x7e>
 80093d4:	1e6b      	subs	r3, r5, #1
 80093d6:	2b06      	cmp	r3, #6
 80093d8:	d825      	bhi.n	8009426 <_scanf_float+0x2f6>
 80093da:	2d02      	cmp	r5, #2
 80093dc:	d836      	bhi.n	800944c <_scanf_float+0x31c>
 80093de:	455e      	cmp	r6, fp
 80093e0:	f67f aee8 	bls.w	80091b4 <_scanf_float+0x84>
 80093e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093e8:	463a      	mov	r2, r7
 80093ea:	4640      	mov	r0, r8
 80093ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093f0:	4798      	blx	r3
 80093f2:	6923      	ldr	r3, [r4, #16]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	6123      	str	r3, [r4, #16]
 80093f8:	e7f1      	b.n	80093de <_scanf_float+0x2ae>
 80093fa:	9802      	ldr	r0, [sp, #8]
 80093fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009400:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009404:	463a      	mov	r2, r7
 8009406:	9002      	str	r0, [sp, #8]
 8009408:	4640      	mov	r0, r8
 800940a:	4798      	blx	r3
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	3b01      	subs	r3, #1
 8009410:	6123      	str	r3, [r4, #16]
 8009412:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009416:	fa5f fa8a 	uxtb.w	sl, sl
 800941a:	f1ba 0f02 	cmp.w	sl, #2
 800941e:	d1ec      	bne.n	80093fa <_scanf_float+0x2ca>
 8009420:	3d03      	subs	r5, #3
 8009422:	b2ed      	uxtb	r5, r5
 8009424:	1b76      	subs	r6, r6, r5
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	05da      	lsls	r2, r3, #23
 800942a:	d52f      	bpl.n	800948c <_scanf_float+0x35c>
 800942c:	055b      	lsls	r3, r3, #21
 800942e:	d510      	bpl.n	8009452 <_scanf_float+0x322>
 8009430:	455e      	cmp	r6, fp
 8009432:	f67f aebf 	bls.w	80091b4 <_scanf_float+0x84>
 8009436:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800943a:	463a      	mov	r2, r7
 800943c:	4640      	mov	r0, r8
 800943e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009442:	4798      	blx	r3
 8009444:	6923      	ldr	r3, [r4, #16]
 8009446:	3b01      	subs	r3, #1
 8009448:	6123      	str	r3, [r4, #16]
 800944a:	e7f1      	b.n	8009430 <_scanf_float+0x300>
 800944c:	46aa      	mov	sl, r5
 800944e:	9602      	str	r6, [sp, #8]
 8009450:	e7df      	b.n	8009412 <_scanf_float+0x2e2>
 8009452:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009456:	6923      	ldr	r3, [r4, #16]
 8009458:	2965      	cmp	r1, #101	; 0x65
 800945a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800945e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009462:	6123      	str	r3, [r4, #16]
 8009464:	d00c      	beq.n	8009480 <_scanf_float+0x350>
 8009466:	2945      	cmp	r1, #69	; 0x45
 8009468:	d00a      	beq.n	8009480 <_scanf_float+0x350>
 800946a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800946e:	463a      	mov	r2, r7
 8009470:	4640      	mov	r0, r8
 8009472:	4798      	blx	r3
 8009474:	6923      	ldr	r3, [r4, #16]
 8009476:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800947a:	3b01      	subs	r3, #1
 800947c:	1eb5      	subs	r5, r6, #2
 800947e:	6123      	str	r3, [r4, #16]
 8009480:	463a      	mov	r2, r7
 8009482:	4640      	mov	r0, r8
 8009484:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009488:	4798      	blx	r3
 800948a:	462e      	mov	r6, r5
 800948c:	6825      	ldr	r5, [r4, #0]
 800948e:	f015 0510 	ands.w	r5, r5, #16
 8009492:	d159      	bne.n	8009548 <_scanf_float+0x418>
 8009494:	7035      	strb	r5, [r6, #0]
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800949c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094a0:	d11c      	bne.n	80094dc <_scanf_float+0x3ac>
 80094a2:	9b01      	ldr	r3, [sp, #4]
 80094a4:	454b      	cmp	r3, r9
 80094a6:	eba3 0209 	sub.w	r2, r3, r9
 80094aa:	d124      	bne.n	80094f6 <_scanf_float+0x3c6>
 80094ac:	2200      	movs	r2, #0
 80094ae:	4659      	mov	r1, fp
 80094b0:	4640      	mov	r0, r8
 80094b2:	f000 fed9 	bl	800a268 <_strtod_r>
 80094b6:	f8d4 c000 	ldr.w	ip, [r4]
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	f01c 0f02 	tst.w	ip, #2
 80094c0:	4606      	mov	r6, r0
 80094c2:	460f      	mov	r7, r1
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	d021      	beq.n	800950c <_scanf_float+0x3dc>
 80094c8:	9903      	ldr	r1, [sp, #12]
 80094ca:	1d1a      	adds	r2, r3, #4
 80094cc:	600a      	str	r2, [r1, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	e9c3 6700 	strd	r6, r7, [r3]
 80094d4:	68e3      	ldr	r3, [r4, #12]
 80094d6:	3301      	adds	r3, #1
 80094d8:	60e3      	str	r3, [r4, #12]
 80094da:	e66c      	b.n	80091b6 <_scanf_float+0x86>
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d0e4      	beq.n	80094ac <_scanf_float+0x37c>
 80094e2:	9905      	ldr	r1, [sp, #20]
 80094e4:	230a      	movs	r3, #10
 80094e6:	462a      	mov	r2, r5
 80094e8:	4640      	mov	r0, r8
 80094ea:	3101      	adds	r1, #1
 80094ec:	f000 ff48 	bl	800a380 <_strtol_r>
 80094f0:	9b04      	ldr	r3, [sp, #16]
 80094f2:	9e05      	ldr	r6, [sp, #20]
 80094f4:	1ac2      	subs	r2, r0, r3
 80094f6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80094fa:	429e      	cmp	r6, r3
 80094fc:	bf28      	it	cs
 80094fe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009502:	4630      	mov	r0, r6
 8009504:	4911      	ldr	r1, [pc, #68]	; (800954c <_scanf_float+0x41c>)
 8009506:	f000 f879 	bl	80095fc <siprintf>
 800950a:	e7cf      	b.n	80094ac <_scanf_float+0x37c>
 800950c:	f01c 0f04 	tst.w	ip, #4
 8009510:	f103 0e04 	add.w	lr, r3, #4
 8009514:	d003      	beq.n	800951e <_scanf_float+0x3ee>
 8009516:	9903      	ldr	r1, [sp, #12]
 8009518:	f8c1 e000 	str.w	lr, [r1]
 800951c:	e7d7      	b.n	80094ce <_scanf_float+0x39e>
 800951e:	9a03      	ldr	r2, [sp, #12]
 8009520:	f8c2 e000 	str.w	lr, [r2]
 8009524:	f8d3 8000 	ldr.w	r8, [r3]
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	f7f7 fa6e 	bl	8000a0c <__aeabi_dcmpun>
 8009530:	b128      	cbz	r0, 800953e <_scanf_float+0x40e>
 8009532:	4807      	ldr	r0, [pc, #28]	; (8009550 <_scanf_float+0x420>)
 8009534:	f7ff f844 	bl	80085c0 <nanf>
 8009538:	f8c8 0000 	str.w	r0, [r8]
 800953c:	e7ca      	b.n	80094d4 <_scanf_float+0x3a4>
 800953e:	4630      	mov	r0, r6
 8009540:	4639      	mov	r1, r7
 8009542:	f7f7 fac1 	bl	8000ac8 <__aeabi_d2f>
 8009546:	e7f7      	b.n	8009538 <_scanf_float+0x408>
 8009548:	2500      	movs	r5, #0
 800954a:	e634      	b.n	80091b6 <_scanf_float+0x86>
 800954c:	0800d418 	.word	0x0800d418
 8009550:	0800d830 	.word	0x0800d830

08009554 <_sbrk_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	2300      	movs	r3, #0
 8009558:	4d05      	ldr	r5, [pc, #20]	; (8009570 <_sbrk_r+0x1c>)
 800955a:	4604      	mov	r4, r0
 800955c:	4608      	mov	r0, r1
 800955e:	602b      	str	r3, [r5, #0]
 8009560:	f7fa fade 	bl	8003b20 <_sbrk>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_sbrk_r+0x1a>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_sbrk_r+0x1a>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	200005a0 	.word	0x200005a0

08009574 <_raise_r>:
 8009574:	291f      	cmp	r1, #31
 8009576:	b538      	push	{r3, r4, r5, lr}
 8009578:	4604      	mov	r4, r0
 800957a:	460d      	mov	r5, r1
 800957c:	d904      	bls.n	8009588 <_raise_r+0x14>
 800957e:	2316      	movs	r3, #22
 8009580:	6003      	str	r3, [r0, #0]
 8009582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800958a:	b112      	cbz	r2, 8009592 <_raise_r+0x1e>
 800958c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009590:	b94b      	cbnz	r3, 80095a6 <_raise_r+0x32>
 8009592:	4620      	mov	r0, r4
 8009594:	f000 f830 	bl	80095f8 <_getpid_r>
 8009598:	462a      	mov	r2, r5
 800959a:	4601      	mov	r1, r0
 800959c:	4620      	mov	r0, r4
 800959e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095a2:	f000 b817 	b.w	80095d4 <_kill_r>
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d00a      	beq.n	80095c0 <_raise_r+0x4c>
 80095aa:	1c59      	adds	r1, r3, #1
 80095ac:	d103      	bne.n	80095b6 <_raise_r+0x42>
 80095ae:	2316      	movs	r3, #22
 80095b0:	6003      	str	r3, [r0, #0]
 80095b2:	2001      	movs	r0, #1
 80095b4:	e7e7      	b.n	8009586 <_raise_r+0x12>
 80095b6:	2400      	movs	r4, #0
 80095b8:	4628      	mov	r0, r5
 80095ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095be:	4798      	blx	r3
 80095c0:	2000      	movs	r0, #0
 80095c2:	e7e0      	b.n	8009586 <_raise_r+0x12>

080095c4 <raise>:
 80095c4:	4b02      	ldr	r3, [pc, #8]	; (80095d0 <raise+0xc>)
 80095c6:	4601      	mov	r1, r0
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	f7ff bfd3 	b.w	8009574 <_raise_r>
 80095ce:	bf00      	nop
 80095d0:	20000018 	.word	0x20000018

080095d4 <_kill_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	2300      	movs	r3, #0
 80095d8:	4d06      	ldr	r5, [pc, #24]	; (80095f4 <_kill_r+0x20>)
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	4611      	mov	r1, r2
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	f7fa fa1a 	bl	8003a1a <_kill>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d102      	bne.n	80095f0 <_kill_r+0x1c>
 80095ea:	682b      	ldr	r3, [r5, #0]
 80095ec:	b103      	cbz	r3, 80095f0 <_kill_r+0x1c>
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	bd38      	pop	{r3, r4, r5, pc}
 80095f2:	bf00      	nop
 80095f4:	200005a0 	.word	0x200005a0

080095f8 <_getpid_r>:
 80095f8:	f7fa ba08 	b.w	8003a0c <_getpid>

080095fc <siprintf>:
 80095fc:	b40e      	push	{r1, r2, r3}
 80095fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009602:	b500      	push	{lr}
 8009604:	b09c      	sub	sp, #112	; 0x70
 8009606:	ab1d      	add	r3, sp, #116	; 0x74
 8009608:	9002      	str	r0, [sp, #8]
 800960a:	9006      	str	r0, [sp, #24]
 800960c:	9107      	str	r1, [sp, #28]
 800960e:	9104      	str	r1, [sp, #16]
 8009610:	4808      	ldr	r0, [pc, #32]	; (8009634 <siprintf+0x38>)
 8009612:	4909      	ldr	r1, [pc, #36]	; (8009638 <siprintf+0x3c>)
 8009614:	f853 2b04 	ldr.w	r2, [r3], #4
 8009618:	9105      	str	r1, [sp, #20]
 800961a:	6800      	ldr	r0, [r0, #0]
 800961c:	a902      	add	r1, sp, #8
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	f002 fe58 	bl	800c2d4 <_svfiprintf_r>
 8009624:	2200      	movs	r2, #0
 8009626:	9b02      	ldr	r3, [sp, #8]
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	b01c      	add	sp, #112	; 0x70
 800962c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009630:	b003      	add	sp, #12
 8009632:	4770      	bx	lr
 8009634:	20000018 	.word	0x20000018
 8009638:	ffff0208 	.word	0xffff0208

0800963c <sulp>:
 800963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009640:	460f      	mov	r7, r1
 8009642:	4690      	mov	r8, r2
 8009644:	f002 fc94 	bl	800bf70 <__ulp>
 8009648:	4604      	mov	r4, r0
 800964a:	460d      	mov	r5, r1
 800964c:	f1b8 0f00 	cmp.w	r8, #0
 8009650:	d011      	beq.n	8009676 <sulp+0x3a>
 8009652:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009656:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800965a:	2b00      	cmp	r3, #0
 800965c:	dd0b      	ble.n	8009676 <sulp+0x3a>
 800965e:	2400      	movs	r4, #0
 8009660:	051b      	lsls	r3, r3, #20
 8009662:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009666:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800966a:	4622      	mov	r2, r4
 800966c:	462b      	mov	r3, r5
 800966e:	f7f6 ff33 	bl	80004d8 <__aeabi_dmul>
 8009672:	4604      	mov	r4, r0
 8009674:	460d      	mov	r5, r1
 8009676:	4620      	mov	r0, r4
 8009678:	4629      	mov	r1, r5
 800967a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009680 <_strtod_l>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	469b      	mov	fp, r3
 8009686:	2300      	movs	r3, #0
 8009688:	b0a1      	sub	sp, #132	; 0x84
 800968a:	931c      	str	r3, [sp, #112]	; 0x70
 800968c:	4ba1      	ldr	r3, [pc, #644]	; (8009914 <_strtod_l+0x294>)
 800968e:	4682      	mov	sl, r0
 8009690:	681f      	ldr	r7, [r3, #0]
 8009692:	460e      	mov	r6, r1
 8009694:	4638      	mov	r0, r7
 8009696:	9217      	str	r2, [sp, #92]	; 0x5c
 8009698:	f7f6 fd5a 	bl	8000150 <strlen>
 800969c:	f04f 0800 	mov.w	r8, #0
 80096a0:	4604      	mov	r4, r0
 80096a2:	f04f 0900 	mov.w	r9, #0
 80096a6:	961b      	str	r6, [sp, #108]	; 0x6c
 80096a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096aa:	781a      	ldrb	r2, [r3, #0]
 80096ac:	2a2b      	cmp	r2, #43	; 0x2b
 80096ae:	d04c      	beq.n	800974a <_strtod_l+0xca>
 80096b0:	d83a      	bhi.n	8009728 <_strtod_l+0xa8>
 80096b2:	2a0d      	cmp	r2, #13
 80096b4:	d833      	bhi.n	800971e <_strtod_l+0x9e>
 80096b6:	2a08      	cmp	r2, #8
 80096b8:	d833      	bhi.n	8009722 <_strtod_l+0xa2>
 80096ba:	2a00      	cmp	r2, #0
 80096bc:	d03d      	beq.n	800973a <_strtod_l+0xba>
 80096be:	2300      	movs	r3, #0
 80096c0:	930c      	str	r3, [sp, #48]	; 0x30
 80096c2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80096c4:	782b      	ldrb	r3, [r5, #0]
 80096c6:	2b30      	cmp	r3, #48	; 0x30
 80096c8:	f040 80af 	bne.w	800982a <_strtod_l+0x1aa>
 80096cc:	786b      	ldrb	r3, [r5, #1]
 80096ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096d2:	2b58      	cmp	r3, #88	; 0x58
 80096d4:	d16c      	bne.n	80097b0 <_strtod_l+0x130>
 80096d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096d8:	4650      	mov	r0, sl
 80096da:	9301      	str	r3, [sp, #4]
 80096dc:	ab1c      	add	r3, sp, #112	; 0x70
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	4a8d      	ldr	r2, [pc, #564]	; (8009918 <_strtod_l+0x298>)
 80096e2:	f8cd b008 	str.w	fp, [sp, #8]
 80096e6:	ab1d      	add	r3, sp, #116	; 0x74
 80096e8:	a91b      	add	r1, sp, #108	; 0x6c
 80096ea:	f001 fd9f 	bl	800b22c <__gethex>
 80096ee:	f010 0607 	ands.w	r6, r0, #7
 80096f2:	4604      	mov	r4, r0
 80096f4:	d005      	beq.n	8009702 <_strtod_l+0x82>
 80096f6:	2e06      	cmp	r6, #6
 80096f8:	d129      	bne.n	800974e <_strtod_l+0xce>
 80096fa:	2300      	movs	r3, #0
 80096fc:	3501      	adds	r5, #1
 80096fe:	951b      	str	r5, [sp, #108]	; 0x6c
 8009700:	930c      	str	r3, [sp, #48]	; 0x30
 8009702:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009704:	2b00      	cmp	r3, #0
 8009706:	f040 8596 	bne.w	800a236 <_strtod_l+0xbb6>
 800970a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800970c:	b1d3      	cbz	r3, 8009744 <_strtod_l+0xc4>
 800970e:	4642      	mov	r2, r8
 8009710:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009714:	4610      	mov	r0, r2
 8009716:	4619      	mov	r1, r3
 8009718:	b021      	add	sp, #132	; 0x84
 800971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971e:	2a20      	cmp	r2, #32
 8009720:	d1cd      	bne.n	80096be <_strtod_l+0x3e>
 8009722:	3301      	adds	r3, #1
 8009724:	931b      	str	r3, [sp, #108]	; 0x6c
 8009726:	e7bf      	b.n	80096a8 <_strtod_l+0x28>
 8009728:	2a2d      	cmp	r2, #45	; 0x2d
 800972a:	d1c8      	bne.n	80096be <_strtod_l+0x3e>
 800972c:	2201      	movs	r2, #1
 800972e:	920c      	str	r2, [sp, #48]	; 0x30
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	921b      	str	r2, [sp, #108]	; 0x6c
 8009734:	785b      	ldrb	r3, [r3, #1]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1c3      	bne.n	80096c2 <_strtod_l+0x42>
 800973a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800973c:	961b      	str	r6, [sp, #108]	; 0x6c
 800973e:	2b00      	cmp	r3, #0
 8009740:	f040 8577 	bne.w	800a232 <_strtod_l+0xbb2>
 8009744:	4642      	mov	r2, r8
 8009746:	464b      	mov	r3, r9
 8009748:	e7e4      	b.n	8009714 <_strtod_l+0x94>
 800974a:	2200      	movs	r2, #0
 800974c:	e7ef      	b.n	800972e <_strtod_l+0xae>
 800974e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009750:	b13a      	cbz	r2, 8009762 <_strtod_l+0xe2>
 8009752:	2135      	movs	r1, #53	; 0x35
 8009754:	a81e      	add	r0, sp, #120	; 0x78
 8009756:	f002 fd0f 	bl	800c178 <__copybits>
 800975a:	4650      	mov	r0, sl
 800975c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800975e:	f002 f8d7 	bl	800b910 <_Bfree>
 8009762:	3e01      	subs	r6, #1
 8009764:	2e05      	cmp	r6, #5
 8009766:	d807      	bhi.n	8009778 <_strtod_l+0xf8>
 8009768:	e8df f006 	tbb	[pc, r6]
 800976c:	1d180b0e 	.word	0x1d180b0e
 8009770:	030e      	.short	0x030e
 8009772:	f04f 0900 	mov.w	r9, #0
 8009776:	46c8      	mov	r8, r9
 8009778:	0721      	lsls	r1, r4, #28
 800977a:	d5c2      	bpl.n	8009702 <_strtod_l+0x82>
 800977c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009780:	e7bf      	b.n	8009702 <_strtod_l+0x82>
 8009782:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8009786:	e7f7      	b.n	8009778 <_strtod_l+0xf8>
 8009788:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800978a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800978e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009792:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009796:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800979a:	e7ed      	b.n	8009778 <_strtod_l+0xf8>
 800979c:	f04f 0800 	mov.w	r8, #0
 80097a0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800991c <_strtod_l+0x29c>
 80097a4:	e7e8      	b.n	8009778 <_strtod_l+0xf8>
 80097a6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80097aa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80097ae:	e7e3      	b.n	8009778 <_strtod_l+0xf8>
 80097b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	921b      	str	r2, [sp, #108]	; 0x6c
 80097b6:	785b      	ldrb	r3, [r3, #1]
 80097b8:	2b30      	cmp	r3, #48	; 0x30
 80097ba:	d0f9      	beq.n	80097b0 <_strtod_l+0x130>
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d0a0      	beq.n	8009702 <_strtod_l+0x82>
 80097c0:	2301      	movs	r3, #1
 80097c2:	9307      	str	r3, [sp, #28]
 80097c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097c6:	220a      	movs	r2, #10
 80097c8:	9308      	str	r3, [sp, #32]
 80097ca:	2300      	movs	r3, #0
 80097cc:	469b      	mov	fp, r3
 80097ce:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80097d2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80097d4:	7805      	ldrb	r5, [r0, #0]
 80097d6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80097da:	b2d9      	uxtb	r1, r3
 80097dc:	2909      	cmp	r1, #9
 80097de:	d926      	bls.n	800982e <_strtod_l+0x1ae>
 80097e0:	4622      	mov	r2, r4
 80097e2:	4639      	mov	r1, r7
 80097e4:	f002 fe7c 	bl	800c4e0 <strncmp>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d032      	beq.n	8009852 <_strtod_l+0x1d2>
 80097ec:	2000      	movs	r0, #0
 80097ee:	462b      	mov	r3, r5
 80097f0:	465c      	mov	r4, fp
 80097f2:	4602      	mov	r2, r0
 80097f4:	9004      	str	r0, [sp, #16]
 80097f6:	2b65      	cmp	r3, #101	; 0x65
 80097f8:	d001      	beq.n	80097fe <_strtod_l+0x17e>
 80097fa:	2b45      	cmp	r3, #69	; 0x45
 80097fc:	d113      	bne.n	8009826 <_strtod_l+0x1a6>
 80097fe:	b91c      	cbnz	r4, 8009808 <_strtod_l+0x188>
 8009800:	9b07      	ldr	r3, [sp, #28]
 8009802:	4303      	orrs	r3, r0
 8009804:	d099      	beq.n	800973a <_strtod_l+0xba>
 8009806:	2400      	movs	r4, #0
 8009808:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800980a:	1c73      	adds	r3, r6, #1
 800980c:	931b      	str	r3, [sp, #108]	; 0x6c
 800980e:	7873      	ldrb	r3, [r6, #1]
 8009810:	2b2b      	cmp	r3, #43	; 0x2b
 8009812:	d078      	beq.n	8009906 <_strtod_l+0x286>
 8009814:	2b2d      	cmp	r3, #45	; 0x2d
 8009816:	d07b      	beq.n	8009910 <_strtod_l+0x290>
 8009818:	2700      	movs	r7, #0
 800981a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800981e:	2909      	cmp	r1, #9
 8009820:	f240 8082 	bls.w	8009928 <_strtod_l+0x2a8>
 8009824:	961b      	str	r6, [sp, #108]	; 0x6c
 8009826:	2500      	movs	r5, #0
 8009828:	e09e      	b.n	8009968 <_strtod_l+0x2e8>
 800982a:	2300      	movs	r3, #0
 800982c:	e7c9      	b.n	80097c2 <_strtod_l+0x142>
 800982e:	f1bb 0f08 	cmp.w	fp, #8
 8009832:	bfd5      	itete	le
 8009834:	9906      	ldrle	r1, [sp, #24]
 8009836:	9905      	ldrgt	r1, [sp, #20]
 8009838:	fb02 3301 	mlale	r3, r2, r1, r3
 800983c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009840:	f100 0001 	add.w	r0, r0, #1
 8009844:	bfd4      	ite	le
 8009846:	9306      	strle	r3, [sp, #24]
 8009848:	9305      	strgt	r3, [sp, #20]
 800984a:	f10b 0b01 	add.w	fp, fp, #1
 800984e:	901b      	str	r0, [sp, #108]	; 0x6c
 8009850:	e7bf      	b.n	80097d2 <_strtod_l+0x152>
 8009852:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009854:	191a      	adds	r2, r3, r4
 8009856:	921b      	str	r2, [sp, #108]	; 0x6c
 8009858:	5d1b      	ldrb	r3, [r3, r4]
 800985a:	f1bb 0f00 	cmp.w	fp, #0
 800985e:	d036      	beq.n	80098ce <_strtod_l+0x24e>
 8009860:	465c      	mov	r4, fp
 8009862:	9004      	str	r0, [sp, #16]
 8009864:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009868:	2a09      	cmp	r2, #9
 800986a:	d912      	bls.n	8009892 <_strtod_l+0x212>
 800986c:	2201      	movs	r2, #1
 800986e:	e7c2      	b.n	80097f6 <_strtod_l+0x176>
 8009870:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009872:	3001      	adds	r0, #1
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	921b      	str	r2, [sp, #108]	; 0x6c
 8009878:	785b      	ldrb	r3, [r3, #1]
 800987a:	2b30      	cmp	r3, #48	; 0x30
 800987c:	d0f8      	beq.n	8009870 <_strtod_l+0x1f0>
 800987e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009882:	2a08      	cmp	r2, #8
 8009884:	f200 84dc 	bhi.w	800a240 <_strtod_l+0xbc0>
 8009888:	9004      	str	r0, [sp, #16]
 800988a:	2000      	movs	r0, #0
 800988c:	4604      	mov	r4, r0
 800988e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009890:	9208      	str	r2, [sp, #32]
 8009892:	3b30      	subs	r3, #48	; 0x30
 8009894:	f100 0201 	add.w	r2, r0, #1
 8009898:	d013      	beq.n	80098c2 <_strtod_l+0x242>
 800989a:	9904      	ldr	r1, [sp, #16]
 800989c:	1905      	adds	r5, r0, r4
 800989e:	4411      	add	r1, r2
 80098a0:	9104      	str	r1, [sp, #16]
 80098a2:	4622      	mov	r2, r4
 80098a4:	210a      	movs	r1, #10
 80098a6:	42aa      	cmp	r2, r5
 80098a8:	d113      	bne.n	80098d2 <_strtod_l+0x252>
 80098aa:	1822      	adds	r2, r4, r0
 80098ac:	2a08      	cmp	r2, #8
 80098ae:	f104 0401 	add.w	r4, r4, #1
 80098b2:	4404      	add	r4, r0
 80098b4:	dc1b      	bgt.n	80098ee <_strtod_l+0x26e>
 80098b6:	220a      	movs	r2, #10
 80098b8:	9906      	ldr	r1, [sp, #24]
 80098ba:	fb02 3301 	mla	r3, r2, r1, r3
 80098be:	9306      	str	r3, [sp, #24]
 80098c0:	2200      	movs	r2, #0
 80098c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098c4:	4610      	mov	r0, r2
 80098c6:	1c59      	adds	r1, r3, #1
 80098c8:	911b      	str	r1, [sp, #108]	; 0x6c
 80098ca:	785b      	ldrb	r3, [r3, #1]
 80098cc:	e7ca      	b.n	8009864 <_strtod_l+0x1e4>
 80098ce:	4658      	mov	r0, fp
 80098d0:	e7d3      	b.n	800987a <_strtod_l+0x1fa>
 80098d2:	2a08      	cmp	r2, #8
 80098d4:	dc04      	bgt.n	80098e0 <_strtod_l+0x260>
 80098d6:	9f06      	ldr	r7, [sp, #24]
 80098d8:	434f      	muls	r7, r1
 80098da:	9706      	str	r7, [sp, #24]
 80098dc:	3201      	adds	r2, #1
 80098de:	e7e2      	b.n	80098a6 <_strtod_l+0x226>
 80098e0:	1c57      	adds	r7, r2, #1
 80098e2:	2f10      	cmp	r7, #16
 80098e4:	bfde      	ittt	le
 80098e6:	9f05      	ldrle	r7, [sp, #20]
 80098e8:	434f      	mulle	r7, r1
 80098ea:	9705      	strle	r7, [sp, #20]
 80098ec:	e7f6      	b.n	80098dc <_strtod_l+0x25c>
 80098ee:	2c10      	cmp	r4, #16
 80098f0:	bfdf      	itttt	le
 80098f2:	220a      	movle	r2, #10
 80098f4:	9905      	ldrle	r1, [sp, #20]
 80098f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80098fa:	9305      	strle	r3, [sp, #20]
 80098fc:	e7e0      	b.n	80098c0 <_strtod_l+0x240>
 80098fe:	2300      	movs	r3, #0
 8009900:	2201      	movs	r2, #1
 8009902:	9304      	str	r3, [sp, #16]
 8009904:	e77c      	b.n	8009800 <_strtod_l+0x180>
 8009906:	2700      	movs	r7, #0
 8009908:	1cb3      	adds	r3, r6, #2
 800990a:	931b      	str	r3, [sp, #108]	; 0x6c
 800990c:	78b3      	ldrb	r3, [r6, #2]
 800990e:	e784      	b.n	800981a <_strtod_l+0x19a>
 8009910:	2701      	movs	r7, #1
 8009912:	e7f9      	b.n	8009908 <_strtod_l+0x288>
 8009914:	0800d670 	.word	0x0800d670
 8009918:	0800d420 	.word	0x0800d420
 800991c:	7ff00000 	.word	0x7ff00000
 8009920:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009922:	1c59      	adds	r1, r3, #1
 8009924:	911b      	str	r1, [sp, #108]	; 0x6c
 8009926:	785b      	ldrb	r3, [r3, #1]
 8009928:	2b30      	cmp	r3, #48	; 0x30
 800992a:	d0f9      	beq.n	8009920 <_strtod_l+0x2a0>
 800992c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009930:	2908      	cmp	r1, #8
 8009932:	f63f af78 	bhi.w	8009826 <_strtod_l+0x1a6>
 8009936:	f04f 0e0a 	mov.w	lr, #10
 800993a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800993e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009940:	9309      	str	r3, [sp, #36]	; 0x24
 8009942:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009944:	1c59      	adds	r1, r3, #1
 8009946:	911b      	str	r1, [sp, #108]	; 0x6c
 8009948:	785b      	ldrb	r3, [r3, #1]
 800994a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800994e:	2d09      	cmp	r5, #9
 8009950:	d935      	bls.n	80099be <_strtod_l+0x33e>
 8009952:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009954:	1b49      	subs	r1, r1, r5
 8009956:	2908      	cmp	r1, #8
 8009958:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800995c:	dc02      	bgt.n	8009964 <_strtod_l+0x2e4>
 800995e:	4565      	cmp	r5, ip
 8009960:	bfa8      	it	ge
 8009962:	4665      	movge	r5, ip
 8009964:	b107      	cbz	r7, 8009968 <_strtod_l+0x2e8>
 8009966:	426d      	negs	r5, r5
 8009968:	2c00      	cmp	r4, #0
 800996a:	d14c      	bne.n	8009a06 <_strtod_l+0x386>
 800996c:	9907      	ldr	r1, [sp, #28]
 800996e:	4301      	orrs	r1, r0
 8009970:	f47f aec7 	bne.w	8009702 <_strtod_l+0x82>
 8009974:	2a00      	cmp	r2, #0
 8009976:	f47f aee0 	bne.w	800973a <_strtod_l+0xba>
 800997a:	2b69      	cmp	r3, #105	; 0x69
 800997c:	d026      	beq.n	80099cc <_strtod_l+0x34c>
 800997e:	dc23      	bgt.n	80099c8 <_strtod_l+0x348>
 8009980:	2b49      	cmp	r3, #73	; 0x49
 8009982:	d023      	beq.n	80099cc <_strtod_l+0x34c>
 8009984:	2b4e      	cmp	r3, #78	; 0x4e
 8009986:	f47f aed8 	bne.w	800973a <_strtod_l+0xba>
 800998a:	499c      	ldr	r1, [pc, #624]	; (8009bfc <_strtod_l+0x57c>)
 800998c:	a81b      	add	r0, sp, #108	; 0x6c
 800998e:	f001 fe9b 	bl	800b6c8 <__match>
 8009992:	2800      	cmp	r0, #0
 8009994:	f43f aed1 	beq.w	800973a <_strtod_l+0xba>
 8009998:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	2b28      	cmp	r3, #40	; 0x28
 800999e:	d12c      	bne.n	80099fa <_strtod_l+0x37a>
 80099a0:	4997      	ldr	r1, [pc, #604]	; (8009c00 <_strtod_l+0x580>)
 80099a2:	aa1e      	add	r2, sp, #120	; 0x78
 80099a4:	a81b      	add	r0, sp, #108	; 0x6c
 80099a6:	f001 fea3 	bl	800b6f0 <__hexnan>
 80099aa:	2805      	cmp	r0, #5
 80099ac:	d125      	bne.n	80099fa <_strtod_l+0x37a>
 80099ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099b0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80099b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80099b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80099bc:	e6a1      	b.n	8009702 <_strtod_l+0x82>
 80099be:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80099c2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80099c6:	e7bc      	b.n	8009942 <_strtod_l+0x2c2>
 80099c8:	2b6e      	cmp	r3, #110	; 0x6e
 80099ca:	e7dc      	b.n	8009986 <_strtod_l+0x306>
 80099cc:	498d      	ldr	r1, [pc, #564]	; (8009c04 <_strtod_l+0x584>)
 80099ce:	a81b      	add	r0, sp, #108	; 0x6c
 80099d0:	f001 fe7a 	bl	800b6c8 <__match>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f43f aeb0 	beq.w	800973a <_strtod_l+0xba>
 80099da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099dc:	498a      	ldr	r1, [pc, #552]	; (8009c08 <_strtod_l+0x588>)
 80099de:	3b01      	subs	r3, #1
 80099e0:	a81b      	add	r0, sp, #108	; 0x6c
 80099e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80099e4:	f001 fe70 	bl	800b6c8 <__match>
 80099e8:	b910      	cbnz	r0, 80099f0 <_strtod_l+0x370>
 80099ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099ec:	3301      	adds	r3, #1
 80099ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80099f0:	f04f 0800 	mov.w	r8, #0
 80099f4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009c18 <_strtod_l+0x598>
 80099f8:	e683      	b.n	8009702 <_strtod_l+0x82>
 80099fa:	4884      	ldr	r0, [pc, #528]	; (8009c0c <_strtod_l+0x58c>)
 80099fc:	f002 fd6a 	bl	800c4d4 <nan>
 8009a00:	4680      	mov	r8, r0
 8009a02:	4689      	mov	r9, r1
 8009a04:	e67d      	b.n	8009702 <_strtod_l+0x82>
 8009a06:	9b04      	ldr	r3, [sp, #16]
 8009a08:	f1bb 0f00 	cmp.w	fp, #0
 8009a0c:	bf08      	it	eq
 8009a0e:	46a3      	moveq	fp, r4
 8009a10:	1aeb      	subs	r3, r5, r3
 8009a12:	2c10      	cmp	r4, #16
 8009a14:	9806      	ldr	r0, [sp, #24]
 8009a16:	4626      	mov	r6, r4
 8009a18:	9307      	str	r3, [sp, #28]
 8009a1a:	bfa8      	it	ge
 8009a1c:	2610      	movge	r6, #16
 8009a1e:	f7f6 fce1 	bl	80003e4 <__aeabi_ui2d>
 8009a22:	2c09      	cmp	r4, #9
 8009a24:	4680      	mov	r8, r0
 8009a26:	4689      	mov	r9, r1
 8009a28:	dd13      	ble.n	8009a52 <_strtod_l+0x3d2>
 8009a2a:	4b79      	ldr	r3, [pc, #484]	; (8009c10 <_strtod_l+0x590>)
 8009a2c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a30:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009a34:	f7f6 fd50 	bl	80004d8 <__aeabi_dmul>
 8009a38:	4680      	mov	r8, r0
 8009a3a:	9805      	ldr	r0, [sp, #20]
 8009a3c:	4689      	mov	r9, r1
 8009a3e:	f7f6 fcd1 	bl	80003e4 <__aeabi_ui2d>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4640      	mov	r0, r8
 8009a48:	4649      	mov	r1, r9
 8009a4a:	f7f6 fb8f 	bl	800016c <__adddf3>
 8009a4e:	4680      	mov	r8, r0
 8009a50:	4689      	mov	r9, r1
 8009a52:	2c0f      	cmp	r4, #15
 8009a54:	dc36      	bgt.n	8009ac4 <_strtod_l+0x444>
 8009a56:	9b07      	ldr	r3, [sp, #28]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f43f ae52 	beq.w	8009702 <_strtod_l+0x82>
 8009a5e:	dd22      	ble.n	8009aa6 <_strtod_l+0x426>
 8009a60:	2b16      	cmp	r3, #22
 8009a62:	dc09      	bgt.n	8009a78 <_strtod_l+0x3f8>
 8009a64:	4c6a      	ldr	r4, [pc, #424]	; (8009c10 <_strtod_l+0x590>)
 8009a66:	4642      	mov	r2, r8
 8009a68:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8009a6c:	464b      	mov	r3, r9
 8009a6e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009a72:	f7f6 fd31 	bl	80004d8 <__aeabi_dmul>
 8009a76:	e7c3      	b.n	8009a00 <_strtod_l+0x380>
 8009a78:	9a07      	ldr	r2, [sp, #28]
 8009a7a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	db20      	blt.n	8009ac4 <_strtod_l+0x444>
 8009a82:	4d63      	ldr	r5, [pc, #396]	; (8009c10 <_strtod_l+0x590>)
 8009a84:	f1c4 040f 	rsb	r4, r4, #15
 8009a88:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009a8c:	4642      	mov	r2, r8
 8009a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a92:	464b      	mov	r3, r9
 8009a94:	f7f6 fd20 	bl	80004d8 <__aeabi_dmul>
 8009a98:	9b07      	ldr	r3, [sp, #28]
 8009a9a:	1b1c      	subs	r4, r3, r4
 8009a9c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009aa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009aa4:	e7e5      	b.n	8009a72 <_strtod_l+0x3f2>
 8009aa6:	9b07      	ldr	r3, [sp, #28]
 8009aa8:	3316      	adds	r3, #22
 8009aaa:	db0b      	blt.n	8009ac4 <_strtod_l+0x444>
 8009aac:	9b04      	ldr	r3, [sp, #16]
 8009aae:	4a58      	ldr	r2, [pc, #352]	; (8009c10 <_strtod_l+0x590>)
 8009ab0:	1b5d      	subs	r5, r3, r5
 8009ab2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009abc:	4649      	mov	r1, r9
 8009abe:	f7f6 fe35 	bl	800072c <__aeabi_ddiv>
 8009ac2:	e79d      	b.n	8009a00 <_strtod_l+0x380>
 8009ac4:	9b07      	ldr	r3, [sp, #28]
 8009ac6:	1ba6      	subs	r6, r4, r6
 8009ac8:	441e      	add	r6, r3
 8009aca:	2e00      	cmp	r6, #0
 8009acc:	dd71      	ble.n	8009bb2 <_strtod_l+0x532>
 8009ace:	f016 030f 	ands.w	r3, r6, #15
 8009ad2:	d00a      	beq.n	8009aea <_strtod_l+0x46a>
 8009ad4:	494e      	ldr	r1, [pc, #312]	; (8009c10 <_strtod_l+0x590>)
 8009ad6:	4642      	mov	r2, r8
 8009ad8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009adc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ae0:	464b      	mov	r3, r9
 8009ae2:	f7f6 fcf9 	bl	80004d8 <__aeabi_dmul>
 8009ae6:	4680      	mov	r8, r0
 8009ae8:	4689      	mov	r9, r1
 8009aea:	f036 060f 	bics.w	r6, r6, #15
 8009aee:	d050      	beq.n	8009b92 <_strtod_l+0x512>
 8009af0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009af4:	dd27      	ble.n	8009b46 <_strtod_l+0x4c6>
 8009af6:	f04f 0b00 	mov.w	fp, #0
 8009afa:	f8cd b010 	str.w	fp, [sp, #16]
 8009afe:	f8cd b020 	str.w	fp, [sp, #32]
 8009b02:	f8cd b018 	str.w	fp, [sp, #24]
 8009b06:	2322      	movs	r3, #34	; 0x22
 8009b08:	f04f 0800 	mov.w	r8, #0
 8009b0c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009c18 <_strtod_l+0x598>
 8009b10:	f8ca 3000 	str.w	r3, [sl]
 8009b14:	9b08      	ldr	r3, [sp, #32]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f43f adf3 	beq.w	8009702 <_strtod_l+0x82>
 8009b1c:	4650      	mov	r0, sl
 8009b1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b20:	f001 fef6 	bl	800b910 <_Bfree>
 8009b24:	4650      	mov	r0, sl
 8009b26:	9906      	ldr	r1, [sp, #24]
 8009b28:	f001 fef2 	bl	800b910 <_Bfree>
 8009b2c:	4650      	mov	r0, sl
 8009b2e:	9904      	ldr	r1, [sp, #16]
 8009b30:	f001 feee 	bl	800b910 <_Bfree>
 8009b34:	4650      	mov	r0, sl
 8009b36:	9908      	ldr	r1, [sp, #32]
 8009b38:	f001 feea 	bl	800b910 <_Bfree>
 8009b3c:	4659      	mov	r1, fp
 8009b3e:	4650      	mov	r0, sl
 8009b40:	f001 fee6 	bl	800b910 <_Bfree>
 8009b44:	e5dd      	b.n	8009702 <_strtod_l+0x82>
 8009b46:	2300      	movs	r3, #0
 8009b48:	4640      	mov	r0, r8
 8009b4a:	4649      	mov	r1, r9
 8009b4c:	461f      	mov	r7, r3
 8009b4e:	1136      	asrs	r6, r6, #4
 8009b50:	2e01      	cmp	r6, #1
 8009b52:	dc21      	bgt.n	8009b98 <_strtod_l+0x518>
 8009b54:	b10b      	cbz	r3, 8009b5a <_strtod_l+0x4da>
 8009b56:	4680      	mov	r8, r0
 8009b58:	4689      	mov	r9, r1
 8009b5a:	4b2e      	ldr	r3, [pc, #184]	; (8009c14 <_strtod_l+0x594>)
 8009b5c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009b60:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009b64:	4642      	mov	r2, r8
 8009b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b6a:	464b      	mov	r3, r9
 8009b6c:	f7f6 fcb4 	bl	80004d8 <__aeabi_dmul>
 8009b70:	4b29      	ldr	r3, [pc, #164]	; (8009c18 <_strtod_l+0x598>)
 8009b72:	460a      	mov	r2, r1
 8009b74:	400b      	ands	r3, r1
 8009b76:	4929      	ldr	r1, [pc, #164]	; (8009c1c <_strtod_l+0x59c>)
 8009b78:	4680      	mov	r8, r0
 8009b7a:	428b      	cmp	r3, r1
 8009b7c:	d8bb      	bhi.n	8009af6 <_strtod_l+0x476>
 8009b7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009b82:	428b      	cmp	r3, r1
 8009b84:	bf86      	itte	hi
 8009b86:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8009b8a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009c20 <_strtod_l+0x5a0>
 8009b8e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009b92:	2300      	movs	r3, #0
 8009b94:	9305      	str	r3, [sp, #20]
 8009b96:	e07e      	b.n	8009c96 <_strtod_l+0x616>
 8009b98:	07f2      	lsls	r2, r6, #31
 8009b9a:	d507      	bpl.n	8009bac <_strtod_l+0x52c>
 8009b9c:	4b1d      	ldr	r3, [pc, #116]	; (8009c14 <_strtod_l+0x594>)
 8009b9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	f7f6 fc97 	bl	80004d8 <__aeabi_dmul>
 8009baa:	2301      	movs	r3, #1
 8009bac:	3701      	adds	r7, #1
 8009bae:	1076      	asrs	r6, r6, #1
 8009bb0:	e7ce      	b.n	8009b50 <_strtod_l+0x4d0>
 8009bb2:	d0ee      	beq.n	8009b92 <_strtod_l+0x512>
 8009bb4:	4276      	negs	r6, r6
 8009bb6:	f016 020f 	ands.w	r2, r6, #15
 8009bba:	d00a      	beq.n	8009bd2 <_strtod_l+0x552>
 8009bbc:	4b14      	ldr	r3, [pc, #80]	; (8009c10 <_strtod_l+0x590>)
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	f7f6 fdaf 	bl	800072c <__aeabi_ddiv>
 8009bce:	4680      	mov	r8, r0
 8009bd0:	4689      	mov	r9, r1
 8009bd2:	1136      	asrs	r6, r6, #4
 8009bd4:	d0dd      	beq.n	8009b92 <_strtod_l+0x512>
 8009bd6:	2e1f      	cmp	r6, #31
 8009bd8:	dd24      	ble.n	8009c24 <_strtod_l+0x5a4>
 8009bda:	f04f 0b00 	mov.w	fp, #0
 8009bde:	f8cd b010 	str.w	fp, [sp, #16]
 8009be2:	f8cd b020 	str.w	fp, [sp, #32]
 8009be6:	f8cd b018 	str.w	fp, [sp, #24]
 8009bea:	2322      	movs	r3, #34	; 0x22
 8009bec:	f04f 0800 	mov.w	r8, #0
 8009bf0:	f04f 0900 	mov.w	r9, #0
 8009bf4:	f8ca 3000 	str.w	r3, [sl]
 8009bf8:	e78c      	b.n	8009b14 <_strtod_l+0x494>
 8009bfa:	bf00      	nop
 8009bfc:	0800d3f1 	.word	0x0800d3f1
 8009c00:	0800d434 	.word	0x0800d434
 8009c04:	0800d3e9 	.word	0x0800d3e9
 8009c08:	0800d574 	.word	0x0800d574
 8009c0c:	0800d830 	.word	0x0800d830
 8009c10:	0800d710 	.word	0x0800d710
 8009c14:	0800d6e8 	.word	0x0800d6e8
 8009c18:	7ff00000 	.word	0x7ff00000
 8009c1c:	7ca00000 	.word	0x7ca00000
 8009c20:	7fefffff 	.word	0x7fefffff
 8009c24:	f016 0310 	ands.w	r3, r6, #16
 8009c28:	bf18      	it	ne
 8009c2a:	236a      	movne	r3, #106	; 0x6a
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	9305      	str	r3, [sp, #20]
 8009c30:	4649      	mov	r1, r9
 8009c32:	2300      	movs	r3, #0
 8009c34:	4fb2      	ldr	r7, [pc, #712]	; (8009f00 <_strtod_l+0x880>)
 8009c36:	07f2      	lsls	r2, r6, #31
 8009c38:	d504      	bpl.n	8009c44 <_strtod_l+0x5c4>
 8009c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c3e:	f7f6 fc4b 	bl	80004d8 <__aeabi_dmul>
 8009c42:	2301      	movs	r3, #1
 8009c44:	1076      	asrs	r6, r6, #1
 8009c46:	f107 0708 	add.w	r7, r7, #8
 8009c4a:	d1f4      	bne.n	8009c36 <_strtod_l+0x5b6>
 8009c4c:	b10b      	cbz	r3, 8009c52 <_strtod_l+0x5d2>
 8009c4e:	4680      	mov	r8, r0
 8009c50:	4689      	mov	r9, r1
 8009c52:	9b05      	ldr	r3, [sp, #20]
 8009c54:	b1bb      	cbz	r3, 8009c86 <_strtod_l+0x606>
 8009c56:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8009c5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	4649      	mov	r1, r9
 8009c62:	dd10      	ble.n	8009c86 <_strtod_l+0x606>
 8009c64:	2b1f      	cmp	r3, #31
 8009c66:	f340 812b 	ble.w	8009ec0 <_strtod_l+0x840>
 8009c6a:	2b34      	cmp	r3, #52	; 0x34
 8009c6c:	bfd8      	it	le
 8009c6e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8009c72:	f04f 0800 	mov.w	r8, #0
 8009c76:	bfcf      	iteee	gt
 8009c78:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009c7c:	3b20      	suble	r3, #32
 8009c7e:	fa02 f303 	lslle.w	r3, r2, r3
 8009c82:	ea03 0901 	andle.w	r9, r3, r1
 8009c86:	2200      	movs	r2, #0
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 fe8b 	bl	80009a8 <__aeabi_dcmpeq>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d1a1      	bne.n	8009bda <_strtod_l+0x55a>
 8009c96:	9b06      	ldr	r3, [sp, #24]
 8009c98:	465a      	mov	r2, fp
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	4650      	mov	r0, sl
 8009c9e:	4623      	mov	r3, r4
 8009ca0:	9908      	ldr	r1, [sp, #32]
 8009ca2:	f001 fea1 	bl	800b9e8 <__s2b>
 8009ca6:	9008      	str	r0, [sp, #32]
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	f43f af24 	beq.w	8009af6 <_strtod_l+0x476>
 8009cae:	9b04      	ldr	r3, [sp, #16]
 8009cb0:	f04f 0b00 	mov.w	fp, #0
 8009cb4:	1b5d      	subs	r5, r3, r5
 8009cb6:	9b07      	ldr	r3, [sp, #28]
 8009cb8:	f8cd b010 	str.w	fp, [sp, #16]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bfb4      	ite	lt
 8009cc0:	462b      	movlt	r3, r5
 8009cc2:	2300      	movge	r3, #0
 8009cc4:	930e      	str	r3, [sp, #56]	; 0x38
 8009cc6:	9b07      	ldr	r3, [sp, #28]
 8009cc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ccc:	9316      	str	r3, [sp, #88]	; 0x58
 8009cce:	9b08      	ldr	r3, [sp, #32]
 8009cd0:	4650      	mov	r0, sl
 8009cd2:	6859      	ldr	r1, [r3, #4]
 8009cd4:	f001 fddc 	bl	800b890 <_Balloc>
 8009cd8:	9006      	str	r0, [sp, #24]
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	f43f af13 	beq.w	8009b06 <_strtod_l+0x486>
 8009ce0:	9b08      	ldr	r3, [sp, #32]
 8009ce2:	300c      	adds	r0, #12
 8009ce4:	691a      	ldr	r2, [r3, #16]
 8009ce6:	f103 010c 	add.w	r1, r3, #12
 8009cea:	3202      	adds	r2, #2
 8009cec:	0092      	lsls	r2, r2, #2
 8009cee:	f7fe fd03 	bl	80086f8 <memcpy>
 8009cf2:	ab1e      	add	r3, sp, #120	; 0x78
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	ab1d      	add	r3, sp, #116	; 0x74
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	4642      	mov	r2, r8
 8009cfc:	464b      	mov	r3, r9
 8009cfe:	4650      	mov	r0, sl
 8009d00:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8009d04:	f002 f9ae 	bl	800c064 <__d2b>
 8009d08:	901c      	str	r0, [sp, #112]	; 0x70
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	f43f aefb 	beq.w	8009b06 <_strtod_l+0x486>
 8009d10:	2101      	movs	r1, #1
 8009d12:	4650      	mov	r0, sl
 8009d14:	f001 ff00 	bl	800bb18 <__i2b>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	9004      	str	r0, [sp, #16]
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	f43f aef2 	beq.w	8009b06 <_strtod_l+0x486>
 8009d22:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009d24:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	bfab      	itete	ge
 8009d2a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009d2c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009d2e:	18ee      	addge	r6, r5, r3
 8009d30:	1b5c      	sublt	r4, r3, r5
 8009d32:	9b05      	ldr	r3, [sp, #20]
 8009d34:	bfa8      	it	ge
 8009d36:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009d38:	eba5 0503 	sub.w	r5, r5, r3
 8009d3c:	4415      	add	r5, r2
 8009d3e:	4b71      	ldr	r3, [pc, #452]	; (8009f04 <_strtod_l+0x884>)
 8009d40:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8009d44:	bfb8      	it	lt
 8009d46:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009d48:	429d      	cmp	r5, r3
 8009d4a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d4e:	f280 80c9 	bge.w	8009ee4 <_strtod_l+0x864>
 8009d52:	1b5b      	subs	r3, r3, r5
 8009d54:	2b1f      	cmp	r3, #31
 8009d56:	f04f 0701 	mov.w	r7, #1
 8009d5a:	eba2 0203 	sub.w	r2, r2, r3
 8009d5e:	f300 80b6 	bgt.w	8009ece <_strtod_l+0x84e>
 8009d62:	2500      	movs	r5, #0
 8009d64:	fa07 f303 	lsl.w	r3, r7, r3
 8009d68:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d6a:	18b7      	adds	r7, r6, r2
 8009d6c:	9b05      	ldr	r3, [sp, #20]
 8009d6e:	42be      	cmp	r6, r7
 8009d70:	4414      	add	r4, r2
 8009d72:	441c      	add	r4, r3
 8009d74:	4633      	mov	r3, r6
 8009d76:	bfa8      	it	ge
 8009d78:	463b      	movge	r3, r7
 8009d7a:	42a3      	cmp	r3, r4
 8009d7c:	bfa8      	it	ge
 8009d7e:	4623      	movge	r3, r4
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bfc2      	ittt	gt
 8009d84:	1aff      	subgt	r7, r7, r3
 8009d86:	1ae4      	subgt	r4, r4, r3
 8009d88:	1af6      	subgt	r6, r6, r3
 8009d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dd17      	ble.n	8009dc0 <_strtod_l+0x740>
 8009d90:	461a      	mov	r2, r3
 8009d92:	4650      	mov	r0, sl
 8009d94:	9904      	ldr	r1, [sp, #16]
 8009d96:	f001 ff79 	bl	800bc8c <__pow5mult>
 8009d9a:	9004      	str	r0, [sp, #16]
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	f43f aeb2 	beq.w	8009b06 <_strtod_l+0x486>
 8009da2:	4601      	mov	r1, r0
 8009da4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009da6:	4650      	mov	r0, sl
 8009da8:	f001 fecc 	bl	800bb44 <__multiply>
 8009dac:	9009      	str	r0, [sp, #36]	; 0x24
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f43f aea9 	beq.w	8009b06 <_strtod_l+0x486>
 8009db4:	4650      	mov	r0, sl
 8009db6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009db8:	f001 fdaa 	bl	800b910 <_Bfree>
 8009dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dbe:	931c      	str	r3, [sp, #112]	; 0x70
 8009dc0:	2f00      	cmp	r7, #0
 8009dc2:	f300 8093 	bgt.w	8009eec <_strtod_l+0x86c>
 8009dc6:	9b07      	ldr	r3, [sp, #28]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	dd08      	ble.n	8009dde <_strtod_l+0x75e>
 8009dcc:	4650      	mov	r0, sl
 8009dce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009dd0:	9906      	ldr	r1, [sp, #24]
 8009dd2:	f001 ff5b 	bl	800bc8c <__pow5mult>
 8009dd6:	9006      	str	r0, [sp, #24]
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	f43f ae94 	beq.w	8009b06 <_strtod_l+0x486>
 8009dde:	2c00      	cmp	r4, #0
 8009de0:	dd08      	ble.n	8009df4 <_strtod_l+0x774>
 8009de2:	4622      	mov	r2, r4
 8009de4:	4650      	mov	r0, sl
 8009de6:	9906      	ldr	r1, [sp, #24]
 8009de8:	f001 ffaa 	bl	800bd40 <__lshift>
 8009dec:	9006      	str	r0, [sp, #24]
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f43f ae89 	beq.w	8009b06 <_strtod_l+0x486>
 8009df4:	2e00      	cmp	r6, #0
 8009df6:	dd08      	ble.n	8009e0a <_strtod_l+0x78a>
 8009df8:	4632      	mov	r2, r6
 8009dfa:	4650      	mov	r0, sl
 8009dfc:	9904      	ldr	r1, [sp, #16]
 8009dfe:	f001 ff9f 	bl	800bd40 <__lshift>
 8009e02:	9004      	str	r0, [sp, #16]
 8009e04:	2800      	cmp	r0, #0
 8009e06:	f43f ae7e 	beq.w	8009b06 <_strtod_l+0x486>
 8009e0a:	4650      	mov	r0, sl
 8009e0c:	9a06      	ldr	r2, [sp, #24]
 8009e0e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e10:	f002 f81e 	bl	800be50 <__mdiff>
 8009e14:	4683      	mov	fp, r0
 8009e16:	2800      	cmp	r0, #0
 8009e18:	f43f ae75 	beq.w	8009b06 <_strtod_l+0x486>
 8009e1c:	2400      	movs	r4, #0
 8009e1e:	68c3      	ldr	r3, [r0, #12]
 8009e20:	9904      	ldr	r1, [sp, #16]
 8009e22:	60c4      	str	r4, [r0, #12]
 8009e24:	930d      	str	r3, [sp, #52]	; 0x34
 8009e26:	f001 fff7 	bl	800be18 <__mcmp>
 8009e2a:	42a0      	cmp	r0, r4
 8009e2c:	da70      	bge.n	8009f10 <_strtod_l+0x890>
 8009e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e30:	ea53 0308 	orrs.w	r3, r3, r8
 8009e34:	f040 8096 	bne.w	8009f64 <_strtod_l+0x8e4>
 8009e38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f040 8091 	bne.w	8009f64 <_strtod_l+0x8e4>
 8009e42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e46:	0d1b      	lsrs	r3, r3, #20
 8009e48:	051b      	lsls	r3, r3, #20
 8009e4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e4e:	f240 8089 	bls.w	8009f64 <_strtod_l+0x8e4>
 8009e52:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009e56:	b923      	cbnz	r3, 8009e62 <_strtod_l+0x7e2>
 8009e58:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	f340 8081 	ble.w	8009f64 <_strtod_l+0x8e4>
 8009e62:	4659      	mov	r1, fp
 8009e64:	2201      	movs	r2, #1
 8009e66:	4650      	mov	r0, sl
 8009e68:	f001 ff6a 	bl	800bd40 <__lshift>
 8009e6c:	9904      	ldr	r1, [sp, #16]
 8009e6e:	4683      	mov	fp, r0
 8009e70:	f001 ffd2 	bl	800be18 <__mcmp>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	dd75      	ble.n	8009f64 <_strtod_l+0x8e4>
 8009e78:	9905      	ldr	r1, [sp, #20]
 8009e7a:	464b      	mov	r3, r9
 8009e7c:	4a22      	ldr	r2, [pc, #136]	; (8009f08 <_strtod_l+0x888>)
 8009e7e:	2900      	cmp	r1, #0
 8009e80:	f000 8091 	beq.w	8009fa6 <_strtod_l+0x926>
 8009e84:	ea02 0109 	and.w	r1, r2, r9
 8009e88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e8c:	f300 808b 	bgt.w	8009fa6 <_strtod_l+0x926>
 8009e90:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e94:	f77f aea9 	ble.w	8009bea <_strtod_l+0x56a>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	4a1c      	ldr	r2, [pc, #112]	; (8009f0c <_strtod_l+0x88c>)
 8009e9c:	4640      	mov	r0, r8
 8009e9e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009ea8:	f7f6 fb16 	bl	80004d8 <__aeabi_dmul>
 8009eac:	460b      	mov	r3, r1
 8009eae:	4303      	orrs	r3, r0
 8009eb0:	bf08      	it	eq
 8009eb2:	2322      	moveq	r3, #34	; 0x22
 8009eb4:	4680      	mov	r8, r0
 8009eb6:	4689      	mov	r9, r1
 8009eb8:	bf08      	it	eq
 8009eba:	f8ca 3000 	streq.w	r3, [sl]
 8009ebe:	e62d      	b.n	8009b1c <_strtod_l+0x49c>
 8009ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec8:	ea03 0808 	and.w	r8, r3, r8
 8009ecc:	e6db      	b.n	8009c86 <_strtod_l+0x606>
 8009ece:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009ed2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009ed6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009eda:	35e2      	adds	r5, #226	; 0xe2
 8009edc:	fa07 f505 	lsl.w	r5, r7, r5
 8009ee0:	970f      	str	r7, [sp, #60]	; 0x3c
 8009ee2:	e742      	b.n	8009d6a <_strtod_l+0x6ea>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	2500      	movs	r5, #0
 8009ee8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009eea:	e73e      	b.n	8009d6a <_strtod_l+0x6ea>
 8009eec:	463a      	mov	r2, r7
 8009eee:	4650      	mov	r0, sl
 8009ef0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ef2:	f001 ff25 	bl	800bd40 <__lshift>
 8009ef6:	901c      	str	r0, [sp, #112]	; 0x70
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	f47f af64 	bne.w	8009dc6 <_strtod_l+0x746>
 8009efe:	e602      	b.n	8009b06 <_strtod_l+0x486>
 8009f00:	0800d448 	.word	0x0800d448
 8009f04:	fffffc02 	.word	0xfffffc02
 8009f08:	7ff00000 	.word	0x7ff00000
 8009f0c:	39500000 	.word	0x39500000
 8009f10:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009f14:	d166      	bne.n	8009fe4 <_strtod_l+0x964>
 8009f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f1c:	b35a      	cbz	r2, 8009f76 <_strtod_l+0x8f6>
 8009f1e:	4a9c      	ldr	r2, [pc, #624]	; (800a190 <_strtod_l+0xb10>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d12c      	bne.n	8009f7e <_strtod_l+0x8fe>
 8009f24:	9b05      	ldr	r3, [sp, #20]
 8009f26:	4640      	mov	r0, r8
 8009f28:	b303      	cbz	r3, 8009f6c <_strtod_l+0x8ec>
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	4a99      	ldr	r2, [pc, #612]	; (800a194 <_strtod_l+0xb14>)
 8009f2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009f32:	401a      	ands	r2, r3
 8009f34:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009f38:	d81b      	bhi.n	8009f72 <_strtod_l+0x8f2>
 8009f3a:	0d12      	lsrs	r2, r2, #20
 8009f3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f40:	fa01 f303 	lsl.w	r3, r1, r3
 8009f44:	4298      	cmp	r0, r3
 8009f46:	d11a      	bne.n	8009f7e <_strtod_l+0x8fe>
 8009f48:	4b93      	ldr	r3, [pc, #588]	; (800a198 <_strtod_l+0xb18>)
 8009f4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d102      	bne.n	8009f56 <_strtod_l+0x8d6>
 8009f50:	3001      	adds	r0, #1
 8009f52:	f43f add8 	beq.w	8009b06 <_strtod_l+0x486>
 8009f56:	f04f 0800 	mov.w	r8, #0
 8009f5a:	4b8e      	ldr	r3, [pc, #568]	; (800a194 <_strtod_l+0xb14>)
 8009f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f5e:	401a      	ands	r2, r3
 8009f60:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009f64:	9b05      	ldr	r3, [sp, #20]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d196      	bne.n	8009e98 <_strtod_l+0x818>
 8009f6a:	e5d7      	b.n	8009b1c <_strtod_l+0x49c>
 8009f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f70:	e7e8      	b.n	8009f44 <_strtod_l+0x8c4>
 8009f72:	460b      	mov	r3, r1
 8009f74:	e7e6      	b.n	8009f44 <_strtod_l+0x8c4>
 8009f76:	ea53 0308 	orrs.w	r3, r3, r8
 8009f7a:	f43f af7d 	beq.w	8009e78 <_strtod_l+0x7f8>
 8009f7e:	b1e5      	cbz	r5, 8009fba <_strtod_l+0x93a>
 8009f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f82:	421d      	tst	r5, r3
 8009f84:	d0ee      	beq.n	8009f64 <_strtod_l+0x8e4>
 8009f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f88:	4640      	mov	r0, r8
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	9a05      	ldr	r2, [sp, #20]
 8009f8e:	b1c3      	cbz	r3, 8009fc2 <_strtod_l+0x942>
 8009f90:	f7ff fb54 	bl	800963c <sulp>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f9c:	f7f6 f8e6 	bl	800016c <__adddf3>
 8009fa0:	4680      	mov	r8, r0
 8009fa2:	4689      	mov	r9, r1
 8009fa4:	e7de      	b.n	8009f64 <_strtod_l+0x8e4>
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009fac:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009fb0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009fb4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009fb8:	e7d4      	b.n	8009f64 <_strtod_l+0x8e4>
 8009fba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fbc:	ea13 0f08 	tst.w	r3, r8
 8009fc0:	e7e0      	b.n	8009f84 <_strtod_l+0x904>
 8009fc2:	f7ff fb3b 	bl	800963c <sulp>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009fce:	f7f6 f8cb 	bl	8000168 <__aeabi_dsub>
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4680      	mov	r8, r0
 8009fd8:	4689      	mov	r9, r1
 8009fda:	f7f6 fce5 	bl	80009a8 <__aeabi_dcmpeq>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d0c0      	beq.n	8009f64 <_strtod_l+0x8e4>
 8009fe2:	e602      	b.n	8009bea <_strtod_l+0x56a>
 8009fe4:	4658      	mov	r0, fp
 8009fe6:	9904      	ldr	r1, [sp, #16]
 8009fe8:	f002 f898 	bl	800c11c <__ratio>
 8009fec:	2200      	movs	r2, #0
 8009fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	460f      	mov	r7, r1
 8009ff6:	f7f6 fceb 	bl	80009d0 <__aeabi_dcmple>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d075      	beq.n	800a0ea <_strtod_l+0xa6a>
 8009ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a000:	2b00      	cmp	r3, #0
 800a002:	d047      	beq.n	800a094 <_strtod_l+0xa14>
 800a004:	2600      	movs	r6, #0
 800a006:	4f65      	ldr	r7, [pc, #404]	; (800a19c <_strtod_l+0xb1c>)
 800a008:	4d64      	ldr	r5, [pc, #400]	; (800a19c <_strtod_l+0xb1c>)
 800a00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a010:	0d1b      	lsrs	r3, r3, #20
 800a012:	051b      	lsls	r3, r3, #20
 800a014:	930f      	str	r3, [sp, #60]	; 0x3c
 800a016:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a018:	4b61      	ldr	r3, [pc, #388]	; (800a1a0 <_strtod_l+0xb20>)
 800a01a:	429a      	cmp	r2, r3
 800a01c:	f040 80c8 	bne.w	800a1b0 <_strtod_l+0xb30>
 800a020:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a024:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02a:	4640      	mov	r0, r8
 800a02c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a030:	4649      	mov	r1, r9
 800a032:	f001 ff9d 	bl	800bf70 <__ulp>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4630      	mov	r0, r6
 800a03c:	4639      	mov	r1, r7
 800a03e:	f7f6 fa4b 	bl	80004d8 <__aeabi_dmul>
 800a042:	4642      	mov	r2, r8
 800a044:	464b      	mov	r3, r9
 800a046:	f7f6 f891 	bl	800016c <__adddf3>
 800a04a:	460b      	mov	r3, r1
 800a04c:	4951      	ldr	r1, [pc, #324]	; (800a194 <_strtod_l+0xb14>)
 800a04e:	4a55      	ldr	r2, [pc, #340]	; (800a1a4 <_strtod_l+0xb24>)
 800a050:	4019      	ands	r1, r3
 800a052:	4291      	cmp	r1, r2
 800a054:	4680      	mov	r8, r0
 800a056:	d95e      	bls.n	800a116 <_strtod_l+0xa96>
 800a058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a05a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a05e:	4293      	cmp	r3, r2
 800a060:	d103      	bne.n	800a06a <_strtod_l+0x9ea>
 800a062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a064:	3301      	adds	r3, #1
 800a066:	f43f ad4e 	beq.w	8009b06 <_strtod_l+0x486>
 800a06a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a06e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a198 <_strtod_l+0xb18>
 800a072:	4650      	mov	r0, sl
 800a074:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a076:	f001 fc4b 	bl	800b910 <_Bfree>
 800a07a:	4650      	mov	r0, sl
 800a07c:	9906      	ldr	r1, [sp, #24]
 800a07e:	f001 fc47 	bl	800b910 <_Bfree>
 800a082:	4650      	mov	r0, sl
 800a084:	9904      	ldr	r1, [sp, #16]
 800a086:	f001 fc43 	bl	800b910 <_Bfree>
 800a08a:	4659      	mov	r1, fp
 800a08c:	4650      	mov	r0, sl
 800a08e:	f001 fc3f 	bl	800b910 <_Bfree>
 800a092:	e61c      	b.n	8009cce <_strtod_l+0x64e>
 800a094:	f1b8 0f00 	cmp.w	r8, #0
 800a098:	d119      	bne.n	800a0ce <_strtod_l+0xa4e>
 800a09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0a0:	b9e3      	cbnz	r3, 800a0dc <_strtod_l+0xa5c>
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	4b3c      	ldr	r3, [pc, #240]	; (800a19c <_strtod_l+0xb1c>)
 800a0aa:	f7f6 fc87 	bl	80009bc <__aeabi_dcmplt>
 800a0ae:	b9c8      	cbnz	r0, 800a0e4 <_strtod_l+0xa64>
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	4b3c      	ldr	r3, [pc, #240]	; (800a1a8 <_strtod_l+0xb28>)
 800a0b8:	f7f6 fa0e 	bl	80004d8 <__aeabi_dmul>
 800a0bc:	4604      	mov	r4, r0
 800a0be:	460d      	mov	r5, r1
 800a0c0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a0c4:	9418      	str	r4, [sp, #96]	; 0x60
 800a0c6:	9319      	str	r3, [sp, #100]	; 0x64
 800a0c8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a0cc:	e79d      	b.n	800a00a <_strtod_l+0x98a>
 800a0ce:	f1b8 0f01 	cmp.w	r8, #1
 800a0d2:	d103      	bne.n	800a0dc <_strtod_l+0xa5c>
 800a0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f43f ad87 	beq.w	8009bea <_strtod_l+0x56a>
 800a0dc:	2600      	movs	r6, #0
 800a0de:	2400      	movs	r4, #0
 800a0e0:	4f32      	ldr	r7, [pc, #200]	; (800a1ac <_strtod_l+0xb2c>)
 800a0e2:	e791      	b.n	800a008 <_strtod_l+0x988>
 800a0e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a0e6:	4d30      	ldr	r5, [pc, #192]	; (800a1a8 <_strtod_l+0xb28>)
 800a0e8:	e7ea      	b.n	800a0c0 <_strtod_l+0xa40>
 800a0ea:	4b2f      	ldr	r3, [pc, #188]	; (800a1a8 <_strtod_l+0xb28>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	f7f6 f9f1 	bl	80004d8 <__aeabi_dmul>
 800a0f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	460d      	mov	r5, r1
 800a0fc:	b933      	cbnz	r3, 800a10c <_strtod_l+0xa8c>
 800a0fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a102:	9010      	str	r0, [sp, #64]	; 0x40
 800a104:	9311      	str	r3, [sp, #68]	; 0x44
 800a106:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a10a:	e77e      	b.n	800a00a <_strtod_l+0x98a>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a114:	e7f7      	b.n	800a106 <_strtod_l+0xa86>
 800a116:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a11a:	9b05      	ldr	r3, [sp, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1a8      	bne.n	800a072 <_strtod_l+0x9f2>
 800a120:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a124:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a126:	0d1b      	lsrs	r3, r3, #20
 800a128:	051b      	lsls	r3, r3, #20
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d1a1      	bne.n	800a072 <_strtod_l+0x9f2>
 800a12e:	4620      	mov	r0, r4
 800a130:	4629      	mov	r1, r5
 800a132:	f7f7 f849 	bl	80011c8 <__aeabi_d2lz>
 800a136:	f7f6 f9a1 	bl	800047c <__aeabi_l2d>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4620      	mov	r0, r4
 800a140:	4629      	mov	r1, r5
 800a142:	f7f6 f811 	bl	8000168 <__aeabi_dsub>
 800a146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a14c:	ea43 0308 	orr.w	r3, r3, r8
 800a150:	4313      	orrs	r3, r2
 800a152:	4604      	mov	r4, r0
 800a154:	460d      	mov	r5, r1
 800a156:	d066      	beq.n	800a226 <_strtod_l+0xba6>
 800a158:	a309      	add	r3, pc, #36	; (adr r3, 800a180 <_strtod_l+0xb00>)
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	f7f6 fc2d 	bl	80009bc <__aeabi_dcmplt>
 800a162:	2800      	cmp	r0, #0
 800a164:	f47f acda 	bne.w	8009b1c <_strtod_l+0x49c>
 800a168:	a307      	add	r3, pc, #28	; (adr r3, 800a188 <_strtod_l+0xb08>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	4620      	mov	r0, r4
 800a170:	4629      	mov	r1, r5
 800a172:	f7f6 fc41 	bl	80009f8 <__aeabi_dcmpgt>
 800a176:	2800      	cmp	r0, #0
 800a178:	f43f af7b 	beq.w	800a072 <_strtod_l+0x9f2>
 800a17c:	e4ce      	b.n	8009b1c <_strtod_l+0x49c>
 800a17e:	bf00      	nop
 800a180:	94a03595 	.word	0x94a03595
 800a184:	3fdfffff 	.word	0x3fdfffff
 800a188:	35afe535 	.word	0x35afe535
 800a18c:	3fe00000 	.word	0x3fe00000
 800a190:	000fffff 	.word	0x000fffff
 800a194:	7ff00000 	.word	0x7ff00000
 800a198:	7fefffff 	.word	0x7fefffff
 800a19c:	3ff00000 	.word	0x3ff00000
 800a1a0:	7fe00000 	.word	0x7fe00000
 800a1a4:	7c9fffff 	.word	0x7c9fffff
 800a1a8:	3fe00000 	.word	0x3fe00000
 800a1ac:	bff00000 	.word	0xbff00000
 800a1b0:	9b05      	ldr	r3, [sp, #20]
 800a1b2:	b313      	cbz	r3, 800a1fa <_strtod_l+0xb7a>
 800a1b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a1ba:	d81e      	bhi.n	800a1fa <_strtod_l+0xb7a>
 800a1bc:	a326      	add	r3, pc, #152	; (adr r3, 800a258 <_strtod_l+0xbd8>)
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	f7f6 fc03 	bl	80009d0 <__aeabi_dcmple>
 800a1ca:	b190      	cbz	r0, 800a1f2 <_strtod_l+0xb72>
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f7f6 fc5a 	bl	8000a88 <__aeabi_d2uiz>
 800a1d4:	2801      	cmp	r0, #1
 800a1d6:	bf38      	it	cc
 800a1d8:	2001      	movcc	r0, #1
 800a1da:	f7f6 f903 	bl	80003e4 <__aeabi_ui2d>
 800a1de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	460d      	mov	r5, r1
 800a1e4:	b9d3      	cbnz	r3, 800a21c <_strtod_l+0xb9c>
 800a1e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1ea:	9012      	str	r0, [sp, #72]	; 0x48
 800a1ec:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1ee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a1f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1f4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a1f8:	1a9f      	subs	r7, r3, r2
 800a1fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1fe:	f001 feb7 	bl	800bf70 <__ulp>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4630      	mov	r0, r6
 800a208:	4639      	mov	r1, r7
 800a20a:	f7f6 f965 	bl	80004d8 <__aeabi_dmul>
 800a20e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a212:	f7f5 ffab 	bl	800016c <__adddf3>
 800a216:	4680      	mov	r8, r0
 800a218:	4689      	mov	r9, r1
 800a21a:	e77e      	b.n	800a11a <_strtod_l+0xa9a>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a224:	e7e3      	b.n	800a1ee <_strtod_l+0xb6e>
 800a226:	a30e      	add	r3, pc, #56	; (adr r3, 800a260 <_strtod_l+0xbe0>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	f7f6 fbc6 	bl	80009bc <__aeabi_dcmplt>
 800a230:	e7a1      	b.n	800a176 <_strtod_l+0xaf6>
 800a232:	2300      	movs	r3, #0
 800a234:	930c      	str	r3, [sp, #48]	; 0x30
 800a236:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a238:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	f7ff ba65 	b.w	800970a <_strtod_l+0x8a>
 800a240:	2b65      	cmp	r3, #101	; 0x65
 800a242:	f43f ab5c 	beq.w	80098fe <_strtod_l+0x27e>
 800a246:	2b45      	cmp	r3, #69	; 0x45
 800a248:	f43f ab59 	beq.w	80098fe <_strtod_l+0x27e>
 800a24c:	2201      	movs	r2, #1
 800a24e:	f7ff bb8d 	b.w	800996c <_strtod_l+0x2ec>
 800a252:	bf00      	nop
 800a254:	f3af 8000 	nop.w
 800a258:	ffc00000 	.word	0xffc00000
 800a25c:	41dfffff 	.word	0x41dfffff
 800a260:	94a03595 	.word	0x94a03595
 800a264:	3fcfffff 	.word	0x3fcfffff

0800a268 <_strtod_r>:
 800a268:	4b01      	ldr	r3, [pc, #4]	; (800a270 <_strtod_r+0x8>)
 800a26a:	f7ff ba09 	b.w	8009680 <_strtod_l>
 800a26e:	bf00      	nop
 800a270:	20000084 	.word	0x20000084

0800a274 <_strtol_l.isra.0>:
 800a274:	2b01      	cmp	r3, #1
 800a276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a27a:	4686      	mov	lr, r0
 800a27c:	d001      	beq.n	800a282 <_strtol_l.isra.0+0xe>
 800a27e:	2b24      	cmp	r3, #36	; 0x24
 800a280:	d906      	bls.n	800a290 <_strtol_l.isra.0+0x1c>
 800a282:	f7fe f9ff 	bl	8008684 <__errno>
 800a286:	2316      	movs	r3, #22
 800a288:	6003      	str	r3, [r0, #0]
 800a28a:	2000      	movs	r0, #0
 800a28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a290:	468c      	mov	ip, r1
 800a292:	4e3a      	ldr	r6, [pc, #232]	; (800a37c <_strtol_l.isra.0+0x108>)
 800a294:	4660      	mov	r0, ip
 800a296:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a29a:	5da5      	ldrb	r5, [r4, r6]
 800a29c:	f015 0508 	ands.w	r5, r5, #8
 800a2a0:	d1f8      	bne.n	800a294 <_strtol_l.isra.0+0x20>
 800a2a2:	2c2d      	cmp	r4, #45	; 0x2d
 800a2a4:	d133      	bne.n	800a30e <_strtol_l.isra.0+0x9a>
 800a2a6:	f04f 0801 	mov.w	r8, #1
 800a2aa:	f89c 4000 	ldrb.w	r4, [ip]
 800a2ae:	f100 0c02 	add.w	ip, r0, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d05d      	beq.n	800a372 <_strtol_l.isra.0+0xfe>
 800a2b6:	2b10      	cmp	r3, #16
 800a2b8:	d10c      	bne.n	800a2d4 <_strtol_l.isra.0+0x60>
 800a2ba:	2c30      	cmp	r4, #48	; 0x30
 800a2bc:	d10a      	bne.n	800a2d4 <_strtol_l.isra.0+0x60>
 800a2be:	f89c 0000 	ldrb.w	r0, [ip]
 800a2c2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a2c6:	2858      	cmp	r0, #88	; 0x58
 800a2c8:	d14e      	bne.n	800a368 <_strtol_l.isra.0+0xf4>
 800a2ca:	2310      	movs	r3, #16
 800a2cc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a2d0:	f10c 0c02 	add.w	ip, ip, #2
 800a2d4:	2500      	movs	r5, #0
 800a2d6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a2da:	3f01      	subs	r7, #1
 800a2dc:	fbb7 f9f3 	udiv	r9, r7, r3
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	fb03 7a19 	mls	sl, r3, r9, r7
 800a2e6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a2ea:	2e09      	cmp	r6, #9
 800a2ec:	d818      	bhi.n	800a320 <_strtol_l.isra.0+0xac>
 800a2ee:	4634      	mov	r4, r6
 800a2f0:	42a3      	cmp	r3, r4
 800a2f2:	dd24      	ble.n	800a33e <_strtol_l.isra.0+0xca>
 800a2f4:	2d00      	cmp	r5, #0
 800a2f6:	db1f      	blt.n	800a338 <_strtol_l.isra.0+0xc4>
 800a2f8:	4581      	cmp	r9, r0
 800a2fa:	d31d      	bcc.n	800a338 <_strtol_l.isra.0+0xc4>
 800a2fc:	d101      	bne.n	800a302 <_strtol_l.isra.0+0x8e>
 800a2fe:	45a2      	cmp	sl, r4
 800a300:	db1a      	blt.n	800a338 <_strtol_l.isra.0+0xc4>
 800a302:	2501      	movs	r5, #1
 800a304:	fb00 4003 	mla	r0, r0, r3, r4
 800a308:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a30c:	e7eb      	b.n	800a2e6 <_strtol_l.isra.0+0x72>
 800a30e:	2c2b      	cmp	r4, #43	; 0x2b
 800a310:	bf08      	it	eq
 800a312:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a316:	46a8      	mov	r8, r5
 800a318:	bf08      	it	eq
 800a31a:	f100 0c02 	addeq.w	ip, r0, #2
 800a31e:	e7c8      	b.n	800a2b2 <_strtol_l.isra.0+0x3e>
 800a320:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a324:	2e19      	cmp	r6, #25
 800a326:	d801      	bhi.n	800a32c <_strtol_l.isra.0+0xb8>
 800a328:	3c37      	subs	r4, #55	; 0x37
 800a32a:	e7e1      	b.n	800a2f0 <_strtol_l.isra.0+0x7c>
 800a32c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a330:	2e19      	cmp	r6, #25
 800a332:	d804      	bhi.n	800a33e <_strtol_l.isra.0+0xca>
 800a334:	3c57      	subs	r4, #87	; 0x57
 800a336:	e7db      	b.n	800a2f0 <_strtol_l.isra.0+0x7c>
 800a338:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a33c:	e7e4      	b.n	800a308 <_strtol_l.isra.0+0x94>
 800a33e:	2d00      	cmp	r5, #0
 800a340:	da08      	bge.n	800a354 <_strtol_l.isra.0+0xe0>
 800a342:	2322      	movs	r3, #34	; 0x22
 800a344:	4638      	mov	r0, r7
 800a346:	f8ce 3000 	str.w	r3, [lr]
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	d09e      	beq.n	800a28c <_strtol_l.isra.0+0x18>
 800a34e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800a352:	e007      	b.n	800a364 <_strtol_l.isra.0+0xf0>
 800a354:	f1b8 0f00 	cmp.w	r8, #0
 800a358:	d000      	beq.n	800a35c <_strtol_l.isra.0+0xe8>
 800a35a:	4240      	negs	r0, r0
 800a35c:	2a00      	cmp	r2, #0
 800a35e:	d095      	beq.n	800a28c <_strtol_l.isra.0+0x18>
 800a360:	2d00      	cmp	r5, #0
 800a362:	d1f4      	bne.n	800a34e <_strtol_l.isra.0+0xda>
 800a364:	6011      	str	r1, [r2, #0]
 800a366:	e791      	b.n	800a28c <_strtol_l.isra.0+0x18>
 800a368:	2430      	movs	r4, #48	; 0x30
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1b2      	bne.n	800a2d4 <_strtol_l.isra.0+0x60>
 800a36e:	2308      	movs	r3, #8
 800a370:	e7b0      	b.n	800a2d4 <_strtol_l.isra.0+0x60>
 800a372:	2c30      	cmp	r4, #48	; 0x30
 800a374:	d0a3      	beq.n	800a2be <_strtol_l.isra.0+0x4a>
 800a376:	230a      	movs	r3, #10
 800a378:	e7ac      	b.n	800a2d4 <_strtol_l.isra.0+0x60>
 800a37a:	bf00      	nop
 800a37c:	0800d471 	.word	0x0800d471

0800a380 <_strtol_r>:
 800a380:	f7ff bf78 	b.w	800a274 <_strtol_l.isra.0>

0800a384 <strtol>:
 800a384:	4613      	mov	r3, r2
 800a386:	460a      	mov	r2, r1
 800a388:	4601      	mov	r1, r0
 800a38a:	4802      	ldr	r0, [pc, #8]	; (800a394 <strtol+0x10>)
 800a38c:	6800      	ldr	r0, [r0, #0]
 800a38e:	f7ff bf71 	b.w	800a274 <_strtol_l.isra.0>
 800a392:	bf00      	nop
 800a394:	20000018 	.word	0x20000018

0800a398 <__register_exitproc>:
 800a398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a39c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800a45c <__register_exitproc+0xc4>
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	f8d8 0000 	ldr.w	r0, [r8]
 800a3a6:	461f      	mov	r7, r3
 800a3a8:	460d      	mov	r5, r1
 800a3aa:	4691      	mov	r9, r2
 800a3ac:	f001 fa41 	bl	800b832 <__retarget_lock_acquire_recursive>
 800a3b0:	4b26      	ldr	r3, [pc, #152]	; (800a44c <__register_exitproc+0xb4>)
 800a3b2:	681c      	ldr	r4, [r3, #0]
 800a3b4:	b934      	cbnz	r4, 800a3c4 <__register_exitproc+0x2c>
 800a3b6:	4c26      	ldr	r4, [pc, #152]	; (800a450 <__register_exitproc+0xb8>)
 800a3b8:	601c      	str	r4, [r3, #0]
 800a3ba:	4b26      	ldr	r3, [pc, #152]	; (800a454 <__register_exitproc+0xbc>)
 800a3bc:	b113      	cbz	r3, 800a3c4 <__register_exitproc+0x2c>
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800a3c4:	6863      	ldr	r3, [r4, #4]
 800a3c6:	2b1f      	cmp	r3, #31
 800a3c8:	dd07      	ble.n	800a3da <__register_exitproc+0x42>
 800a3ca:	f8d8 0000 	ldr.w	r0, [r8]
 800a3ce:	f001 fa32 	bl	800b836 <__retarget_lock_release_recursive>
 800a3d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3da:	b35e      	cbz	r6, 800a434 <__register_exitproc+0x9c>
 800a3dc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800a3e0:	b988      	cbnz	r0, 800a406 <__register_exitproc+0x6e>
 800a3e2:	4b1d      	ldr	r3, [pc, #116]	; (800a458 <__register_exitproc+0xc0>)
 800a3e4:	b923      	cbnz	r3, 800a3f0 <__register_exitproc+0x58>
 800a3e6:	f8d8 0000 	ldr.w	r0, [r8]
 800a3ea:	f001 fa23 	bl	800b834 <__retarget_lock_release>
 800a3ee:	e7f0      	b.n	800a3d2 <__register_exitproc+0x3a>
 800a3f0:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a3f4:	f7fe f970 	bl	80086d8 <malloc>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d0f4      	beq.n	800a3e6 <__register_exitproc+0x4e>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800a402:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800a406:	2201      	movs	r2, #1
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	2e02      	cmp	r6, #2
 800a40c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800a410:	fa02 f203 	lsl.w	r2, r2, r3
 800a414:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800a418:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800a41c:	ea43 0302 	orr.w	r3, r3, r2
 800a420:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800a424:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800a428:	bf02      	ittt	eq
 800a42a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800a42e:	431a      	orreq	r2, r3
 800a430:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 800a434:	6863      	ldr	r3, [r4, #4]
 800a436:	f8d8 0000 	ldr.w	r0, [r8]
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	3302      	adds	r3, #2
 800a43e:	6062      	str	r2, [r4, #4]
 800a440:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800a444:	f001 f9f7 	bl	800b836 <__retarget_lock_release_recursive>
 800a448:	2000      	movs	r0, #0
 800a44a:	e7c4      	b.n	800a3d6 <__register_exitproc+0x3e>
 800a44c:	2000058c 	.word	0x2000058c
 800a450:	20000500 	.word	0x20000500
 800a454:	00000000 	.word	0x00000000
 800a458:	080086d9 	.word	0x080086d9
 800a45c:	2000007c 	.word	0x2000007c

0800a460 <quorem>:
 800a460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	6903      	ldr	r3, [r0, #16]
 800a466:	690c      	ldr	r4, [r1, #16]
 800a468:	4607      	mov	r7, r0
 800a46a:	42a3      	cmp	r3, r4
 800a46c:	f2c0 8083 	blt.w	800a576 <quorem+0x116>
 800a470:	3c01      	subs	r4, #1
 800a472:	f100 0514 	add.w	r5, r0, #20
 800a476:	f101 0814 	add.w	r8, r1, #20
 800a47a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a488:	3301      	adds	r3, #1
 800a48a:	429a      	cmp	r2, r3
 800a48c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a490:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a494:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a498:	d332      	bcc.n	800a500 <quorem+0xa0>
 800a49a:	f04f 0e00 	mov.w	lr, #0
 800a49e:	4640      	mov	r0, r8
 800a4a0:	46ac      	mov	ip, r5
 800a4a2:	46f2      	mov	sl, lr
 800a4a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4a8:	b293      	uxth	r3, r2
 800a4aa:	fb06 e303 	mla	r3, r6, r3, lr
 800a4ae:	0c12      	lsrs	r2, r2, #16
 800a4b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4b4:	fb06 e202 	mla	r2, r6, r2, lr
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	ebaa 0303 	sub.w	r3, sl, r3
 800a4be:	f8dc a000 	ldr.w	sl, [ip]
 800a4c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4c6:	fa1f fa8a 	uxth.w	sl, sl
 800a4ca:	4453      	add	r3, sl
 800a4cc:	fa1f fa82 	uxth.w	sl, r2
 800a4d0:	f8dc 2000 	ldr.w	r2, [ip]
 800a4d4:	4581      	cmp	r9, r0
 800a4d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a4da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4e8:	f84c 3b04 	str.w	r3, [ip], #4
 800a4ec:	d2da      	bcs.n	800a4a4 <quorem+0x44>
 800a4ee:	f855 300b 	ldr.w	r3, [r5, fp]
 800a4f2:	b92b      	cbnz	r3, 800a500 <quorem+0xa0>
 800a4f4:	9b01      	ldr	r3, [sp, #4]
 800a4f6:	3b04      	subs	r3, #4
 800a4f8:	429d      	cmp	r5, r3
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	d32f      	bcc.n	800a55e <quorem+0xfe>
 800a4fe:	613c      	str	r4, [r7, #16]
 800a500:	4638      	mov	r0, r7
 800a502:	f001 fc89 	bl	800be18 <__mcmp>
 800a506:	2800      	cmp	r0, #0
 800a508:	db25      	blt.n	800a556 <quorem+0xf6>
 800a50a:	4628      	mov	r0, r5
 800a50c:	f04f 0c00 	mov.w	ip, #0
 800a510:	3601      	adds	r6, #1
 800a512:	f858 1b04 	ldr.w	r1, [r8], #4
 800a516:	f8d0 e000 	ldr.w	lr, [r0]
 800a51a:	b28b      	uxth	r3, r1
 800a51c:	ebac 0303 	sub.w	r3, ip, r3
 800a520:	fa1f f28e 	uxth.w	r2, lr
 800a524:	4413      	add	r3, r2
 800a526:	0c0a      	lsrs	r2, r1, #16
 800a528:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a52c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a530:	b29b      	uxth	r3, r3
 800a532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a536:	45c1      	cmp	r9, r8
 800a538:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a53c:	f840 3b04 	str.w	r3, [r0], #4
 800a540:	d2e7      	bcs.n	800a512 <quorem+0xb2>
 800a542:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a54a:	b922      	cbnz	r2, 800a556 <quorem+0xf6>
 800a54c:	3b04      	subs	r3, #4
 800a54e:	429d      	cmp	r5, r3
 800a550:	461a      	mov	r2, r3
 800a552:	d30a      	bcc.n	800a56a <quorem+0x10a>
 800a554:	613c      	str	r4, [r7, #16]
 800a556:	4630      	mov	r0, r6
 800a558:	b003      	add	sp, #12
 800a55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55e:	6812      	ldr	r2, [r2, #0]
 800a560:	3b04      	subs	r3, #4
 800a562:	2a00      	cmp	r2, #0
 800a564:	d1cb      	bne.n	800a4fe <quorem+0x9e>
 800a566:	3c01      	subs	r4, #1
 800a568:	e7c6      	b.n	800a4f8 <quorem+0x98>
 800a56a:	6812      	ldr	r2, [r2, #0]
 800a56c:	3b04      	subs	r3, #4
 800a56e:	2a00      	cmp	r2, #0
 800a570:	d1f0      	bne.n	800a554 <quorem+0xf4>
 800a572:	3c01      	subs	r4, #1
 800a574:	e7eb      	b.n	800a54e <quorem+0xee>
 800a576:	2000      	movs	r0, #0
 800a578:	e7ee      	b.n	800a558 <quorem+0xf8>
 800a57a:	0000      	movs	r0, r0
 800a57c:	0000      	movs	r0, r0
	...

0800a580 <_dtoa_r>:
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	4616      	mov	r6, r2
 800a586:	461f      	mov	r7, r3
 800a588:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a58a:	b099      	sub	sp, #100	; 0x64
 800a58c:	4605      	mov	r5, r0
 800a58e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a592:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a596:	b974      	cbnz	r4, 800a5b6 <_dtoa_r+0x36>
 800a598:	2010      	movs	r0, #16
 800a59a:	f7fe f89d 	bl	80086d8 <malloc>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	6268      	str	r0, [r5, #36]	; 0x24
 800a5a2:	b920      	cbnz	r0, 800a5ae <_dtoa_r+0x2e>
 800a5a4:	21ea      	movs	r1, #234	; 0xea
 800a5a6:	4bae      	ldr	r3, [pc, #696]	; (800a860 <_dtoa_r+0x2e0>)
 800a5a8:	48ae      	ldr	r0, [pc, #696]	; (800a864 <_dtoa_r+0x2e4>)
 800a5aa:	f001 ffb9 	bl	800c520 <__assert_func>
 800a5ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5b2:	6004      	str	r4, [r0, #0]
 800a5b4:	60c4      	str	r4, [r0, #12]
 800a5b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5b8:	6819      	ldr	r1, [r3, #0]
 800a5ba:	b151      	cbz	r1, 800a5d2 <_dtoa_r+0x52>
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	2301      	movs	r3, #1
 800a5c0:	4093      	lsls	r3, r2
 800a5c2:	604a      	str	r2, [r1, #4]
 800a5c4:	608b      	str	r3, [r1, #8]
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f001 f9a2 	bl	800b910 <_Bfree>
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	1e3b      	subs	r3, r7, #0
 800a5d4:	bfaf      	iteee	ge
 800a5d6:	2300      	movge	r3, #0
 800a5d8:	2201      	movlt	r2, #1
 800a5da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a5de:	9305      	strlt	r3, [sp, #20]
 800a5e0:	bfa8      	it	ge
 800a5e2:	f8c8 3000 	strge.w	r3, [r8]
 800a5e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a5ea:	4b9f      	ldr	r3, [pc, #636]	; (800a868 <_dtoa_r+0x2e8>)
 800a5ec:	bfb8      	it	lt
 800a5ee:	f8c8 2000 	strlt.w	r2, [r8]
 800a5f2:	ea33 0309 	bics.w	r3, r3, r9
 800a5f6:	d119      	bne.n	800a62c <_dtoa_r+0xac>
 800a5f8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a604:	4333      	orrs	r3, r6
 800a606:	f000 8580 	beq.w	800b10a <_dtoa_r+0xb8a>
 800a60a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a60c:	b953      	cbnz	r3, 800a624 <_dtoa_r+0xa4>
 800a60e:	4b97      	ldr	r3, [pc, #604]	; (800a86c <_dtoa_r+0x2ec>)
 800a610:	e022      	b.n	800a658 <_dtoa_r+0xd8>
 800a612:	4b97      	ldr	r3, [pc, #604]	; (800a870 <_dtoa_r+0x2f0>)
 800a614:	9308      	str	r3, [sp, #32]
 800a616:	3308      	adds	r3, #8
 800a618:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	9808      	ldr	r0, [sp, #32]
 800a61e:	b019      	add	sp, #100	; 0x64
 800a620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a624:	4b91      	ldr	r3, [pc, #580]	; (800a86c <_dtoa_r+0x2ec>)
 800a626:	9308      	str	r3, [sp, #32]
 800a628:	3303      	adds	r3, #3
 800a62a:	e7f5      	b.n	800a618 <_dtoa_r+0x98>
 800a62c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a630:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a638:	2200      	movs	r2, #0
 800a63a:	2300      	movs	r3, #0
 800a63c:	f7f6 f9b4 	bl	80009a8 <__aeabi_dcmpeq>
 800a640:	4680      	mov	r8, r0
 800a642:	b158      	cbz	r0, 800a65c <_dtoa_r+0xdc>
 800a644:	2301      	movs	r3, #1
 800a646:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a648:	6013      	str	r3, [r2, #0]
 800a64a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 8559 	beq.w	800b104 <_dtoa_r+0xb84>
 800a652:	4888      	ldr	r0, [pc, #544]	; (800a874 <_dtoa_r+0x2f4>)
 800a654:	6018      	str	r0, [r3, #0]
 800a656:	1e43      	subs	r3, r0, #1
 800a658:	9308      	str	r3, [sp, #32]
 800a65a:	e7df      	b.n	800a61c <_dtoa_r+0x9c>
 800a65c:	ab16      	add	r3, sp, #88	; 0x58
 800a65e:	9301      	str	r3, [sp, #4]
 800a660:	ab17      	add	r3, sp, #92	; 0x5c
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	4628      	mov	r0, r5
 800a666:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a66a:	f001 fcfb 	bl	800c064 <__d2b>
 800a66e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a672:	4682      	mov	sl, r0
 800a674:	2c00      	cmp	r4, #0
 800a676:	d07e      	beq.n	800a776 <_dtoa_r+0x1f6>
 800a678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a67c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a67e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a686:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a68a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a68e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a692:	2200      	movs	r2, #0
 800a694:	4b78      	ldr	r3, [pc, #480]	; (800a878 <_dtoa_r+0x2f8>)
 800a696:	f7f5 fd67 	bl	8000168 <__aeabi_dsub>
 800a69a:	a36b      	add	r3, pc, #428	; (adr r3, 800a848 <_dtoa_r+0x2c8>)
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	f7f5 ff1a 	bl	80004d8 <__aeabi_dmul>
 800a6a4:	a36a      	add	r3, pc, #424	; (adr r3, 800a850 <_dtoa_r+0x2d0>)
 800a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6aa:	f7f5 fd5f 	bl	800016c <__adddf3>
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	460f      	mov	r7, r1
 800a6b4:	f7f5 fea6 	bl	8000404 <__aeabi_i2d>
 800a6b8:	a367      	add	r3, pc, #412	; (adr r3, 800a858 <_dtoa_r+0x2d8>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 ff0b 	bl	80004d8 <__aeabi_dmul>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	4639      	mov	r1, r7
 800a6ca:	f7f5 fd4f 	bl	800016c <__adddf3>
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	460f      	mov	r7, r1
 800a6d2:	f7f6 f9b1 	bl	8000a38 <__aeabi_d2iz>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	4681      	mov	r9, r0
 800a6da:	2300      	movs	r3, #0
 800a6dc:	4630      	mov	r0, r6
 800a6de:	4639      	mov	r1, r7
 800a6e0:	f7f6 f96c 	bl	80009bc <__aeabi_dcmplt>
 800a6e4:	b148      	cbz	r0, 800a6fa <_dtoa_r+0x17a>
 800a6e6:	4648      	mov	r0, r9
 800a6e8:	f7f5 fe8c 	bl	8000404 <__aeabi_i2d>
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	463b      	mov	r3, r7
 800a6f0:	f7f6 f95a 	bl	80009a8 <__aeabi_dcmpeq>
 800a6f4:	b908      	cbnz	r0, 800a6fa <_dtoa_r+0x17a>
 800a6f6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a6fa:	f1b9 0f16 	cmp.w	r9, #22
 800a6fe:	d857      	bhi.n	800a7b0 <_dtoa_r+0x230>
 800a700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a704:	4b5d      	ldr	r3, [pc, #372]	; (800a87c <_dtoa_r+0x2fc>)
 800a706:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70e:	f7f6 f955 	bl	80009bc <__aeabi_dcmplt>
 800a712:	2800      	cmp	r0, #0
 800a714:	d04e      	beq.n	800a7b4 <_dtoa_r+0x234>
 800a716:	2300      	movs	r3, #0
 800a718:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a71c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a71e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a720:	1b1c      	subs	r4, r3, r4
 800a722:	1e63      	subs	r3, r4, #1
 800a724:	9309      	str	r3, [sp, #36]	; 0x24
 800a726:	bf49      	itett	mi
 800a728:	f1c4 0301 	rsbmi	r3, r4, #1
 800a72c:	2300      	movpl	r3, #0
 800a72e:	9306      	strmi	r3, [sp, #24]
 800a730:	2300      	movmi	r3, #0
 800a732:	bf54      	ite	pl
 800a734:	9306      	strpl	r3, [sp, #24]
 800a736:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a738:	f1b9 0f00 	cmp.w	r9, #0
 800a73c:	db3c      	blt.n	800a7b8 <_dtoa_r+0x238>
 800a73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a740:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a744:	444b      	add	r3, r9
 800a746:	9309      	str	r3, [sp, #36]	; 0x24
 800a748:	2300      	movs	r3, #0
 800a74a:	930a      	str	r3, [sp, #40]	; 0x28
 800a74c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a74e:	2b09      	cmp	r3, #9
 800a750:	d86c      	bhi.n	800a82c <_dtoa_r+0x2ac>
 800a752:	2b05      	cmp	r3, #5
 800a754:	bfc4      	itt	gt
 800a756:	3b04      	subgt	r3, #4
 800a758:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a75a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a75c:	bfc8      	it	gt
 800a75e:	2400      	movgt	r4, #0
 800a760:	f1a3 0302 	sub.w	r3, r3, #2
 800a764:	bfd8      	it	le
 800a766:	2401      	movle	r4, #1
 800a768:	2b03      	cmp	r3, #3
 800a76a:	f200 808b 	bhi.w	800a884 <_dtoa_r+0x304>
 800a76e:	e8df f003 	tbb	[pc, r3]
 800a772:	4f2d      	.short	0x4f2d
 800a774:	5b4d      	.short	0x5b4d
 800a776:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a77a:	441c      	add	r4, r3
 800a77c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a780:	2b20      	cmp	r3, #32
 800a782:	bfc3      	ittte	gt
 800a784:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a788:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a78c:	fa09 f303 	lslgt.w	r3, r9, r3
 800a790:	f1c3 0320 	rsble	r3, r3, #32
 800a794:	bfc6      	itte	gt
 800a796:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a79a:	4318      	orrgt	r0, r3
 800a79c:	fa06 f003 	lslle.w	r0, r6, r3
 800a7a0:	f7f5 fe20 	bl	80003e4 <__aeabi_ui2d>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a7aa:	3c01      	subs	r4, #1
 800a7ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7ae:	e770      	b.n	800a692 <_dtoa_r+0x112>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e7b3      	b.n	800a71c <_dtoa_r+0x19c>
 800a7b4:	900f      	str	r0, [sp, #60]	; 0x3c
 800a7b6:	e7b2      	b.n	800a71e <_dtoa_r+0x19e>
 800a7b8:	9b06      	ldr	r3, [sp, #24]
 800a7ba:	eba3 0309 	sub.w	r3, r3, r9
 800a7be:	9306      	str	r3, [sp, #24]
 800a7c0:	f1c9 0300 	rsb	r3, r9, #0
 800a7c4:	930a      	str	r3, [sp, #40]	; 0x28
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	930e      	str	r3, [sp, #56]	; 0x38
 800a7ca:	e7bf      	b.n	800a74c <_dtoa_r+0x1cc>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	dc59      	bgt.n	800a88a <_dtoa_r+0x30a>
 800a7d6:	f04f 0b01 	mov.w	fp, #1
 800a7da:	465b      	mov	r3, fp
 800a7dc:	f8cd b008 	str.w	fp, [sp, #8]
 800a7e0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a7e8:	6042      	str	r2, [r0, #4]
 800a7ea:	2204      	movs	r2, #4
 800a7ec:	f102 0614 	add.w	r6, r2, #20
 800a7f0:	429e      	cmp	r6, r3
 800a7f2:	6841      	ldr	r1, [r0, #4]
 800a7f4:	d94f      	bls.n	800a896 <_dtoa_r+0x316>
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f001 f84a 	bl	800b890 <_Balloc>
 800a7fc:	9008      	str	r0, [sp, #32]
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d14d      	bne.n	800a89e <_dtoa_r+0x31e>
 800a802:	4602      	mov	r2, r0
 800a804:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a808:	4b1d      	ldr	r3, [pc, #116]	; (800a880 <_dtoa_r+0x300>)
 800a80a:	e6cd      	b.n	800a5a8 <_dtoa_r+0x28>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e7de      	b.n	800a7ce <_dtoa_r+0x24e>
 800a810:	2300      	movs	r3, #0
 800a812:	930b      	str	r3, [sp, #44]	; 0x2c
 800a814:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a816:	eb09 0b03 	add.w	fp, r9, r3
 800a81a:	f10b 0301 	add.w	r3, fp, #1
 800a81e:	2b01      	cmp	r3, #1
 800a820:	9302      	str	r3, [sp, #8]
 800a822:	bfb8      	it	lt
 800a824:	2301      	movlt	r3, #1
 800a826:	e7dd      	b.n	800a7e4 <_dtoa_r+0x264>
 800a828:	2301      	movs	r3, #1
 800a82a:	e7f2      	b.n	800a812 <_dtoa_r+0x292>
 800a82c:	2401      	movs	r4, #1
 800a82e:	2300      	movs	r3, #0
 800a830:	940b      	str	r4, [sp, #44]	; 0x2c
 800a832:	9322      	str	r3, [sp, #136]	; 0x88
 800a834:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a838:	2200      	movs	r2, #0
 800a83a:	2312      	movs	r3, #18
 800a83c:	f8cd b008 	str.w	fp, [sp, #8]
 800a840:	9223      	str	r2, [sp, #140]	; 0x8c
 800a842:	e7cf      	b.n	800a7e4 <_dtoa_r+0x264>
 800a844:	f3af 8000 	nop.w
 800a848:	636f4361 	.word	0x636f4361
 800a84c:	3fd287a7 	.word	0x3fd287a7
 800a850:	8b60c8b3 	.word	0x8b60c8b3
 800a854:	3fc68a28 	.word	0x3fc68a28
 800a858:	509f79fb 	.word	0x509f79fb
 800a85c:	3fd34413 	.word	0x3fd34413
 800a860:	0800d57e 	.word	0x0800d57e
 800a864:	0800d595 	.word	0x0800d595
 800a868:	7ff00000 	.word	0x7ff00000
 800a86c:	0800d57a 	.word	0x0800d57a
 800a870:	0800d571 	.word	0x0800d571
 800a874:	0800d3f5 	.word	0x0800d3f5
 800a878:	3ff80000 	.word	0x3ff80000
 800a87c:	0800d710 	.word	0x0800d710
 800a880:	0800d5f4 	.word	0x0800d5f4
 800a884:	2301      	movs	r3, #1
 800a886:	930b      	str	r3, [sp, #44]	; 0x2c
 800a888:	e7d4      	b.n	800a834 <_dtoa_r+0x2b4>
 800a88a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a88e:	465b      	mov	r3, fp
 800a890:	f8cd b008 	str.w	fp, [sp, #8]
 800a894:	e7a6      	b.n	800a7e4 <_dtoa_r+0x264>
 800a896:	3101      	adds	r1, #1
 800a898:	6041      	str	r1, [r0, #4]
 800a89a:	0052      	lsls	r2, r2, #1
 800a89c:	e7a6      	b.n	800a7ec <_dtoa_r+0x26c>
 800a89e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8a0:	9a08      	ldr	r2, [sp, #32]
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	9b02      	ldr	r3, [sp, #8]
 800a8a6:	2b0e      	cmp	r3, #14
 800a8a8:	f200 80a8 	bhi.w	800a9fc <_dtoa_r+0x47c>
 800a8ac:	2c00      	cmp	r4, #0
 800a8ae:	f000 80a5 	beq.w	800a9fc <_dtoa_r+0x47c>
 800a8b2:	f1b9 0f00 	cmp.w	r9, #0
 800a8b6:	dd34      	ble.n	800a922 <_dtoa_r+0x3a2>
 800a8b8:	4a9a      	ldr	r2, [pc, #616]	; (800ab24 <_dtoa_r+0x5a4>)
 800a8ba:	f009 030f 	and.w	r3, r9, #15
 800a8be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8c2:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a8c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a8ce:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a8d2:	d016      	beq.n	800a902 <_dtoa_r+0x382>
 800a8d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8d8:	4b93      	ldr	r3, [pc, #588]	; (800ab28 <_dtoa_r+0x5a8>)
 800a8da:	2703      	movs	r7, #3
 800a8dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8e0:	f7f5 ff24 	bl	800072c <__aeabi_ddiv>
 800a8e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8e8:	f004 040f 	and.w	r4, r4, #15
 800a8ec:	4e8e      	ldr	r6, [pc, #568]	; (800ab28 <_dtoa_r+0x5a8>)
 800a8ee:	b954      	cbnz	r4, 800a906 <_dtoa_r+0x386>
 800a8f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8f8:	f7f5 ff18 	bl	800072c <__aeabi_ddiv>
 800a8fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a900:	e029      	b.n	800a956 <_dtoa_r+0x3d6>
 800a902:	2702      	movs	r7, #2
 800a904:	e7f2      	b.n	800a8ec <_dtoa_r+0x36c>
 800a906:	07e1      	lsls	r1, r4, #31
 800a908:	d508      	bpl.n	800a91c <_dtoa_r+0x39c>
 800a90a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a90e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a912:	f7f5 fde1 	bl	80004d8 <__aeabi_dmul>
 800a916:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a91a:	3701      	adds	r7, #1
 800a91c:	1064      	asrs	r4, r4, #1
 800a91e:	3608      	adds	r6, #8
 800a920:	e7e5      	b.n	800a8ee <_dtoa_r+0x36e>
 800a922:	f000 80a5 	beq.w	800aa70 <_dtoa_r+0x4f0>
 800a926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a92a:	f1c9 0400 	rsb	r4, r9, #0
 800a92e:	4b7d      	ldr	r3, [pc, #500]	; (800ab24 <_dtoa_r+0x5a4>)
 800a930:	f004 020f 	and.w	r2, r4, #15
 800a934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	f7f5 fdcc 	bl	80004d8 <__aeabi_dmul>
 800a940:	2702      	movs	r7, #2
 800a942:	2300      	movs	r3, #0
 800a944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a948:	4e77      	ldr	r6, [pc, #476]	; (800ab28 <_dtoa_r+0x5a8>)
 800a94a:	1124      	asrs	r4, r4, #4
 800a94c:	2c00      	cmp	r4, #0
 800a94e:	f040 8084 	bne.w	800aa5a <_dtoa_r+0x4da>
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1d2      	bne.n	800a8fc <_dtoa_r+0x37c>
 800a956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 808b 	beq.w	800aa74 <_dtoa_r+0x4f4>
 800a95e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a962:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a966:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a96a:	2200      	movs	r2, #0
 800a96c:	4b6f      	ldr	r3, [pc, #444]	; (800ab2c <_dtoa_r+0x5ac>)
 800a96e:	f7f6 f825 	bl	80009bc <__aeabi_dcmplt>
 800a972:	2800      	cmp	r0, #0
 800a974:	d07e      	beq.n	800aa74 <_dtoa_r+0x4f4>
 800a976:	9b02      	ldr	r3, [sp, #8]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d07b      	beq.n	800aa74 <_dtoa_r+0x4f4>
 800a97c:	f1bb 0f00 	cmp.w	fp, #0
 800a980:	dd38      	ble.n	800a9f4 <_dtoa_r+0x474>
 800a982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a986:	2200      	movs	r2, #0
 800a988:	4b69      	ldr	r3, [pc, #420]	; (800ab30 <_dtoa_r+0x5b0>)
 800a98a:	f7f5 fda5 	bl	80004d8 <__aeabi_dmul>
 800a98e:	465c      	mov	r4, fp
 800a990:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a994:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 800a998:	3701      	adds	r7, #1
 800a99a:	4638      	mov	r0, r7
 800a99c:	f7f5 fd32 	bl	8000404 <__aeabi_i2d>
 800a9a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9a4:	f7f5 fd98 	bl	80004d8 <__aeabi_dmul>
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	4b62      	ldr	r3, [pc, #392]	; (800ab34 <_dtoa_r+0x5b4>)
 800a9ac:	f7f5 fbde 	bl	800016c <__adddf3>
 800a9b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a9b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9b8:	9611      	str	r6, [sp, #68]	; 0x44
 800a9ba:	2c00      	cmp	r4, #0
 800a9bc:	d15d      	bne.n	800aa7a <_dtoa_r+0x4fa>
 800a9be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	4b5c      	ldr	r3, [pc, #368]	; (800ab38 <_dtoa_r+0x5b8>)
 800a9c6:	f7f5 fbcf 	bl	8000168 <__aeabi_dsub>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9d2:	4633      	mov	r3, r6
 800a9d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9d6:	f7f6 f80f 	bl	80009f8 <__aeabi_dcmpgt>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	f040 829e 	bne.w	800af1c <_dtoa_r+0x99c>
 800a9e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a9ea:	f7f5 ffe7 	bl	80009bc <__aeabi_dcmplt>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	f040 8292 	bne.w	800af18 <_dtoa_r+0x998>
 800a9f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a9f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a9fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f2c0 8153 	blt.w	800acaa <_dtoa_r+0x72a>
 800aa04:	f1b9 0f0e 	cmp.w	r9, #14
 800aa08:	f300 814f 	bgt.w	800acaa <_dtoa_r+0x72a>
 800aa0c:	4b45      	ldr	r3, [pc, #276]	; (800ab24 <_dtoa_r+0x5a4>)
 800aa0e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800aa12:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aa1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f280 80db 	bge.w	800abd8 <_dtoa_r+0x658>
 800aa22:	9b02      	ldr	r3, [sp, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f300 80d7 	bgt.w	800abd8 <_dtoa_r+0x658>
 800aa2a:	f040 8274 	bne.w	800af16 <_dtoa_r+0x996>
 800aa2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa32:	2200      	movs	r2, #0
 800aa34:	4b40      	ldr	r3, [pc, #256]	; (800ab38 <_dtoa_r+0x5b8>)
 800aa36:	f7f5 fd4f 	bl	80004d8 <__aeabi_dmul>
 800aa3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa3e:	f7f5 ffd1 	bl	80009e4 <__aeabi_dcmpge>
 800aa42:	9c02      	ldr	r4, [sp, #8]
 800aa44:	4626      	mov	r6, r4
 800aa46:	2800      	cmp	r0, #0
 800aa48:	f040 824a 	bne.w	800aee0 <_dtoa_r+0x960>
 800aa4c:	2331      	movs	r3, #49	; 0x31
 800aa4e:	9f08      	ldr	r7, [sp, #32]
 800aa50:	f109 0901 	add.w	r9, r9, #1
 800aa54:	f807 3b01 	strb.w	r3, [r7], #1
 800aa58:	e246      	b.n	800aee8 <_dtoa_r+0x968>
 800aa5a:	07e2      	lsls	r2, r4, #31
 800aa5c:	d505      	bpl.n	800aa6a <_dtoa_r+0x4ea>
 800aa5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa62:	f7f5 fd39 	bl	80004d8 <__aeabi_dmul>
 800aa66:	2301      	movs	r3, #1
 800aa68:	3701      	adds	r7, #1
 800aa6a:	1064      	asrs	r4, r4, #1
 800aa6c:	3608      	adds	r6, #8
 800aa6e:	e76d      	b.n	800a94c <_dtoa_r+0x3cc>
 800aa70:	2702      	movs	r7, #2
 800aa72:	e770      	b.n	800a956 <_dtoa_r+0x3d6>
 800aa74:	46c8      	mov	r8, r9
 800aa76:	9c02      	ldr	r4, [sp, #8]
 800aa78:	e78f      	b.n	800a99a <_dtoa_r+0x41a>
 800aa7a:	9908      	ldr	r1, [sp, #32]
 800aa7c:	4b29      	ldr	r3, [pc, #164]	; (800ab24 <_dtoa_r+0x5a4>)
 800aa7e:	4421      	add	r1, r4
 800aa80:	9112      	str	r1, [sp, #72]	; 0x48
 800aa82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aa8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa90:	2900      	cmp	r1, #0
 800aa92:	d055      	beq.n	800ab40 <_dtoa_r+0x5c0>
 800aa94:	2000      	movs	r0, #0
 800aa96:	4929      	ldr	r1, [pc, #164]	; (800ab3c <_dtoa_r+0x5bc>)
 800aa98:	f7f5 fe48 	bl	800072c <__aeabi_ddiv>
 800aa9c:	463b      	mov	r3, r7
 800aa9e:	4632      	mov	r2, r6
 800aaa0:	f7f5 fb62 	bl	8000168 <__aeabi_dsub>
 800aaa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aaa8:	9f08      	ldr	r7, [sp, #32]
 800aaaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaae:	f7f5 ffc3 	bl	8000a38 <__aeabi_d2iz>
 800aab2:	4604      	mov	r4, r0
 800aab4:	f7f5 fca6 	bl	8000404 <__aeabi_i2d>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aac0:	f7f5 fb52 	bl	8000168 <__aeabi_dsub>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	3430      	adds	r4, #48	; 0x30
 800aaca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aace:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aad2:	f807 4b01 	strb.w	r4, [r7], #1
 800aad6:	f7f5 ff71 	bl	80009bc <__aeabi_dcmplt>
 800aada:	2800      	cmp	r0, #0
 800aadc:	d174      	bne.n	800abc8 <_dtoa_r+0x648>
 800aade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aae2:	2000      	movs	r0, #0
 800aae4:	4911      	ldr	r1, [pc, #68]	; (800ab2c <_dtoa_r+0x5ac>)
 800aae6:	f7f5 fb3f 	bl	8000168 <__aeabi_dsub>
 800aaea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aaee:	f7f5 ff65 	bl	80009bc <__aeabi_dcmplt>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	f040 80b6 	bne.w	800ac64 <_dtoa_r+0x6e4>
 800aaf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aafa:	429f      	cmp	r7, r3
 800aafc:	f43f af7a 	beq.w	800a9f4 <_dtoa_r+0x474>
 800ab00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab04:	2200      	movs	r2, #0
 800ab06:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <_dtoa_r+0x5b0>)
 800ab08:	f7f5 fce6 	bl	80004d8 <__aeabi_dmul>
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab16:	4b06      	ldr	r3, [pc, #24]	; (800ab30 <_dtoa_r+0x5b0>)
 800ab18:	f7f5 fcde 	bl	80004d8 <__aeabi_dmul>
 800ab1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab20:	e7c3      	b.n	800aaaa <_dtoa_r+0x52a>
 800ab22:	bf00      	nop
 800ab24:	0800d710 	.word	0x0800d710
 800ab28:	0800d6e8 	.word	0x0800d6e8
 800ab2c:	3ff00000 	.word	0x3ff00000
 800ab30:	40240000 	.word	0x40240000
 800ab34:	401c0000 	.word	0x401c0000
 800ab38:	40140000 	.word	0x40140000
 800ab3c:	3fe00000 	.word	0x3fe00000
 800ab40:	4630      	mov	r0, r6
 800ab42:	4639      	mov	r1, r7
 800ab44:	f7f5 fcc8 	bl	80004d8 <__aeabi_dmul>
 800ab48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab4e:	9c08      	ldr	r4, [sp, #32]
 800ab50:	9314      	str	r3, [sp, #80]	; 0x50
 800ab52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab56:	f7f5 ff6f 	bl	8000a38 <__aeabi_d2iz>
 800ab5a:	9015      	str	r0, [sp, #84]	; 0x54
 800ab5c:	f7f5 fc52 	bl	8000404 <__aeabi_i2d>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab68:	f7f5 fafe 	bl	8000168 <__aeabi_dsub>
 800ab6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab6e:	4606      	mov	r6, r0
 800ab70:	3330      	adds	r3, #48	; 0x30
 800ab72:	f804 3b01 	strb.w	r3, [r4], #1
 800ab76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab78:	460f      	mov	r7, r1
 800ab7a:	429c      	cmp	r4, r3
 800ab7c:	f04f 0200 	mov.w	r2, #0
 800ab80:	d124      	bne.n	800abcc <_dtoa_r+0x64c>
 800ab82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab86:	4bb3      	ldr	r3, [pc, #716]	; (800ae54 <_dtoa_r+0x8d4>)
 800ab88:	f7f5 faf0 	bl	800016c <__adddf3>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4630      	mov	r0, r6
 800ab92:	4639      	mov	r1, r7
 800ab94:	f7f5 ff30 	bl	80009f8 <__aeabi_dcmpgt>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d162      	bne.n	800ac62 <_dtoa_r+0x6e2>
 800ab9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aba0:	2000      	movs	r0, #0
 800aba2:	49ac      	ldr	r1, [pc, #688]	; (800ae54 <_dtoa_r+0x8d4>)
 800aba4:	f7f5 fae0 	bl	8000168 <__aeabi_dsub>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	4630      	mov	r0, r6
 800abae:	4639      	mov	r1, r7
 800abb0:	f7f5 ff04 	bl	80009bc <__aeabi_dcmplt>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	f43f af1d 	beq.w	800a9f4 <_dtoa_r+0x474>
 800abba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800abbc:	1e7b      	subs	r3, r7, #1
 800abbe:	9314      	str	r3, [sp, #80]	; 0x50
 800abc0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800abc4:	2b30      	cmp	r3, #48	; 0x30
 800abc6:	d0f8      	beq.n	800abba <_dtoa_r+0x63a>
 800abc8:	46c1      	mov	r9, r8
 800abca:	e03a      	b.n	800ac42 <_dtoa_r+0x6c2>
 800abcc:	4ba2      	ldr	r3, [pc, #648]	; (800ae58 <_dtoa_r+0x8d8>)
 800abce:	f7f5 fc83 	bl	80004d8 <__aeabi_dmul>
 800abd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abd6:	e7bc      	b.n	800ab52 <_dtoa_r+0x5d2>
 800abd8:	9f08      	ldr	r7, [sp, #32]
 800abda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abe2:	f7f5 fda3 	bl	800072c <__aeabi_ddiv>
 800abe6:	f7f5 ff27 	bl	8000a38 <__aeabi_d2iz>
 800abea:	4604      	mov	r4, r0
 800abec:	f7f5 fc0a 	bl	8000404 <__aeabi_i2d>
 800abf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abf4:	f7f5 fc70 	bl	80004d8 <__aeabi_dmul>
 800abf8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800abfc:	460b      	mov	r3, r1
 800abfe:	4602      	mov	r2, r0
 800ac00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac04:	f7f5 fab0 	bl	8000168 <__aeabi_dsub>
 800ac08:	f807 6b01 	strb.w	r6, [r7], #1
 800ac0c:	9e08      	ldr	r6, [sp, #32]
 800ac0e:	9b02      	ldr	r3, [sp, #8]
 800ac10:	1bbe      	subs	r6, r7, r6
 800ac12:	42b3      	cmp	r3, r6
 800ac14:	d13a      	bne.n	800ac8c <_dtoa_r+0x70c>
 800ac16:	4602      	mov	r2, r0
 800ac18:	460b      	mov	r3, r1
 800ac1a:	f7f5 faa7 	bl	800016c <__adddf3>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	460b      	mov	r3, r1
 800ac22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac2a:	f7f5 fee5 	bl	80009f8 <__aeabi_dcmpgt>
 800ac2e:	bb58      	cbnz	r0, 800ac88 <_dtoa_r+0x708>
 800ac30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac38:	f7f5 feb6 	bl	80009a8 <__aeabi_dcmpeq>
 800ac3c:	b108      	cbz	r0, 800ac42 <_dtoa_r+0x6c2>
 800ac3e:	07e1      	lsls	r1, r4, #31
 800ac40:	d422      	bmi.n	800ac88 <_dtoa_r+0x708>
 800ac42:	4628      	mov	r0, r5
 800ac44:	4651      	mov	r1, sl
 800ac46:	f000 fe63 	bl	800b910 <_Bfree>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	703b      	strb	r3, [r7, #0]
 800ac4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ac50:	f109 0001 	add.w	r0, r9, #1
 800ac54:	6018      	str	r0, [r3, #0]
 800ac56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f43f acdf 	beq.w	800a61c <_dtoa_r+0x9c>
 800ac5e:	601f      	str	r7, [r3, #0]
 800ac60:	e4dc      	b.n	800a61c <_dtoa_r+0x9c>
 800ac62:	4627      	mov	r7, r4
 800ac64:	463b      	mov	r3, r7
 800ac66:	461f      	mov	r7, r3
 800ac68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac6c:	2a39      	cmp	r2, #57	; 0x39
 800ac6e:	d107      	bne.n	800ac80 <_dtoa_r+0x700>
 800ac70:	9a08      	ldr	r2, [sp, #32]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d1f7      	bne.n	800ac66 <_dtoa_r+0x6e6>
 800ac76:	2230      	movs	r2, #48	; 0x30
 800ac78:	9908      	ldr	r1, [sp, #32]
 800ac7a:	f108 0801 	add.w	r8, r8, #1
 800ac7e:	700a      	strb	r2, [r1, #0]
 800ac80:	781a      	ldrb	r2, [r3, #0]
 800ac82:	3201      	adds	r2, #1
 800ac84:	701a      	strb	r2, [r3, #0]
 800ac86:	e79f      	b.n	800abc8 <_dtoa_r+0x648>
 800ac88:	46c8      	mov	r8, r9
 800ac8a:	e7eb      	b.n	800ac64 <_dtoa_r+0x6e4>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4b72      	ldr	r3, [pc, #456]	; (800ae58 <_dtoa_r+0x8d8>)
 800ac90:	f7f5 fc22 	bl	80004d8 <__aeabi_dmul>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f7f5 fe82 	bl	80009a8 <__aeabi_dcmpeq>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d098      	beq.n	800abda <_dtoa_r+0x65a>
 800aca8:	e7cb      	b.n	800ac42 <_dtoa_r+0x6c2>
 800acaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800acac:	2a00      	cmp	r2, #0
 800acae:	f000 80cd 	beq.w	800ae4c <_dtoa_r+0x8cc>
 800acb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800acb4:	2a01      	cmp	r2, #1
 800acb6:	f300 80af 	bgt.w	800ae18 <_dtoa_r+0x898>
 800acba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800acbc:	2a00      	cmp	r2, #0
 800acbe:	f000 80a7 	beq.w	800ae10 <_dtoa_r+0x890>
 800acc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800acc8:	9f06      	ldr	r7, [sp, #24]
 800acca:	9a06      	ldr	r2, [sp, #24]
 800accc:	2101      	movs	r1, #1
 800acce:	441a      	add	r2, r3
 800acd0:	9206      	str	r2, [sp, #24]
 800acd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acd4:	4628      	mov	r0, r5
 800acd6:	441a      	add	r2, r3
 800acd8:	9209      	str	r2, [sp, #36]	; 0x24
 800acda:	f000 ff1d 	bl	800bb18 <__i2b>
 800acde:	4606      	mov	r6, r0
 800ace0:	2f00      	cmp	r7, #0
 800ace2:	dd0c      	ble.n	800acfe <_dtoa_r+0x77e>
 800ace4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	dd09      	ble.n	800acfe <_dtoa_r+0x77e>
 800acea:	42bb      	cmp	r3, r7
 800acec:	bfa8      	it	ge
 800acee:	463b      	movge	r3, r7
 800acf0:	9a06      	ldr	r2, [sp, #24]
 800acf2:	1aff      	subs	r7, r7, r3
 800acf4:	1ad2      	subs	r2, r2, r3
 800acf6:	9206      	str	r2, [sp, #24]
 800acf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	9309      	str	r3, [sp, #36]	; 0x24
 800acfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad00:	b1f3      	cbz	r3, 800ad40 <_dtoa_r+0x7c0>
 800ad02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 80a9 	beq.w	800ae5c <_dtoa_r+0x8dc>
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	dd10      	ble.n	800ad30 <_dtoa_r+0x7b0>
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4622      	mov	r2, r4
 800ad12:	4628      	mov	r0, r5
 800ad14:	f000 ffba 	bl	800bc8c <__pow5mult>
 800ad18:	4652      	mov	r2, sl
 800ad1a:	4601      	mov	r1, r0
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f000 ff10 	bl	800bb44 <__multiply>
 800ad24:	4680      	mov	r8, r0
 800ad26:	4651      	mov	r1, sl
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 fdf1 	bl	800b910 <_Bfree>
 800ad2e:	46c2      	mov	sl, r8
 800ad30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad32:	1b1a      	subs	r2, r3, r4
 800ad34:	d004      	beq.n	800ad40 <_dtoa_r+0x7c0>
 800ad36:	4651      	mov	r1, sl
 800ad38:	4628      	mov	r0, r5
 800ad3a:	f000 ffa7 	bl	800bc8c <__pow5mult>
 800ad3e:	4682      	mov	sl, r0
 800ad40:	2101      	movs	r1, #1
 800ad42:	4628      	mov	r0, r5
 800ad44:	f000 fee8 	bl	800bb18 <__i2b>
 800ad48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f340 8087 	ble.w	800ae60 <_dtoa_r+0x8e0>
 800ad52:	461a      	mov	r2, r3
 800ad54:	4601      	mov	r1, r0
 800ad56:	4628      	mov	r0, r5
 800ad58:	f000 ff98 	bl	800bc8c <__pow5mult>
 800ad5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad5e:	4604      	mov	r4, r0
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	f340 8080 	ble.w	800ae66 <_dtoa_r+0x8e6>
 800ad66:	f04f 0800 	mov.w	r8, #0
 800ad6a:	6923      	ldr	r3, [r4, #16]
 800ad6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad70:	6918      	ldr	r0, [r3, #16]
 800ad72:	f000 fe83 	bl	800ba7c <__hi0bits>
 800ad76:	f1c0 0020 	rsb	r0, r0, #32
 800ad7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7c:	4418      	add	r0, r3
 800ad7e:	f010 001f 	ands.w	r0, r0, #31
 800ad82:	f000 8092 	beq.w	800aeaa <_dtoa_r+0x92a>
 800ad86:	f1c0 0320 	rsb	r3, r0, #32
 800ad8a:	2b04      	cmp	r3, #4
 800ad8c:	f340 808a 	ble.w	800aea4 <_dtoa_r+0x924>
 800ad90:	f1c0 001c 	rsb	r0, r0, #28
 800ad94:	9b06      	ldr	r3, [sp, #24]
 800ad96:	4407      	add	r7, r0
 800ad98:	4403      	add	r3, r0
 800ad9a:	9306      	str	r3, [sp, #24]
 800ad9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9e:	4403      	add	r3, r0
 800ada0:	9309      	str	r3, [sp, #36]	; 0x24
 800ada2:	9b06      	ldr	r3, [sp, #24]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dd05      	ble.n	800adb4 <_dtoa_r+0x834>
 800ada8:	4651      	mov	r1, sl
 800adaa:	461a      	mov	r2, r3
 800adac:	4628      	mov	r0, r5
 800adae:	f000 ffc7 	bl	800bd40 <__lshift>
 800adb2:	4682      	mov	sl, r0
 800adb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	dd05      	ble.n	800adc6 <_dtoa_r+0x846>
 800adba:	4621      	mov	r1, r4
 800adbc:	461a      	mov	r2, r3
 800adbe:	4628      	mov	r0, r5
 800adc0:	f000 ffbe 	bl	800bd40 <__lshift>
 800adc4:	4604      	mov	r4, r0
 800adc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d070      	beq.n	800aeae <_dtoa_r+0x92e>
 800adcc:	4621      	mov	r1, r4
 800adce:	4650      	mov	r0, sl
 800add0:	f001 f822 	bl	800be18 <__mcmp>
 800add4:	2800      	cmp	r0, #0
 800add6:	da6a      	bge.n	800aeae <_dtoa_r+0x92e>
 800add8:	2300      	movs	r3, #0
 800adda:	4651      	mov	r1, sl
 800addc:	220a      	movs	r2, #10
 800adde:	4628      	mov	r0, r5
 800ade0:	f000 fdb8 	bl	800b954 <__multadd>
 800ade4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade6:	4682      	mov	sl, r0
 800ade8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 8193 	beq.w	800b118 <_dtoa_r+0xb98>
 800adf2:	4631      	mov	r1, r6
 800adf4:	2300      	movs	r3, #0
 800adf6:	220a      	movs	r2, #10
 800adf8:	4628      	mov	r0, r5
 800adfa:	f000 fdab 	bl	800b954 <__multadd>
 800adfe:	f1bb 0f00 	cmp.w	fp, #0
 800ae02:	4606      	mov	r6, r0
 800ae04:	f300 8093 	bgt.w	800af2e <_dtoa_r+0x9ae>
 800ae08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	dc57      	bgt.n	800aebe <_dtoa_r+0x93e>
 800ae0e:	e08e      	b.n	800af2e <_dtoa_r+0x9ae>
 800ae10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ae12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae16:	e756      	b.n	800acc6 <_dtoa_r+0x746>
 800ae18:	9b02      	ldr	r3, [sp, #8]
 800ae1a:	1e5c      	subs	r4, r3, #1
 800ae1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae1e:	42a3      	cmp	r3, r4
 800ae20:	bfb7      	itett	lt
 800ae22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae24:	1b1c      	subge	r4, r3, r4
 800ae26:	1ae2      	sublt	r2, r4, r3
 800ae28:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ae2a:	bfbe      	ittt	lt
 800ae2c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ae2e:	189b      	addlt	r3, r3, r2
 800ae30:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ae32:	9b02      	ldr	r3, [sp, #8]
 800ae34:	bfb8      	it	lt
 800ae36:	2400      	movlt	r4, #0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	bfbb      	ittet	lt
 800ae3c:	9b06      	ldrlt	r3, [sp, #24]
 800ae3e:	9a02      	ldrlt	r2, [sp, #8]
 800ae40:	9f06      	ldrge	r7, [sp, #24]
 800ae42:	1a9f      	sublt	r7, r3, r2
 800ae44:	bfac      	ite	ge
 800ae46:	9b02      	ldrge	r3, [sp, #8]
 800ae48:	2300      	movlt	r3, #0
 800ae4a:	e73e      	b.n	800acca <_dtoa_r+0x74a>
 800ae4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae4e:	9f06      	ldr	r7, [sp, #24]
 800ae50:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ae52:	e745      	b.n	800ace0 <_dtoa_r+0x760>
 800ae54:	3fe00000 	.word	0x3fe00000
 800ae58:	40240000 	.word	0x40240000
 800ae5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae5e:	e76a      	b.n	800ad36 <_dtoa_r+0x7b6>
 800ae60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	dc19      	bgt.n	800ae9a <_dtoa_r+0x91a>
 800ae66:	9b04      	ldr	r3, [sp, #16]
 800ae68:	b9bb      	cbnz	r3, 800ae9a <_dtoa_r+0x91a>
 800ae6a:	9b05      	ldr	r3, [sp, #20]
 800ae6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae70:	b99b      	cbnz	r3, 800ae9a <_dtoa_r+0x91a>
 800ae72:	9b05      	ldr	r3, [sp, #20]
 800ae74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae78:	0d1b      	lsrs	r3, r3, #20
 800ae7a:	051b      	lsls	r3, r3, #20
 800ae7c:	b183      	cbz	r3, 800aea0 <_dtoa_r+0x920>
 800ae7e:	f04f 0801 	mov.w	r8, #1
 800ae82:	9b06      	ldr	r3, [sp, #24]
 800ae84:	3301      	adds	r3, #1
 800ae86:	9306      	str	r3, [sp, #24]
 800ae88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f47f af6a 	bne.w	800ad6a <_dtoa_r+0x7ea>
 800ae96:	2001      	movs	r0, #1
 800ae98:	e76f      	b.n	800ad7a <_dtoa_r+0x7fa>
 800ae9a:	f04f 0800 	mov.w	r8, #0
 800ae9e:	e7f6      	b.n	800ae8e <_dtoa_r+0x90e>
 800aea0:	4698      	mov	r8, r3
 800aea2:	e7f4      	b.n	800ae8e <_dtoa_r+0x90e>
 800aea4:	f43f af7d 	beq.w	800ada2 <_dtoa_r+0x822>
 800aea8:	4618      	mov	r0, r3
 800aeaa:	301c      	adds	r0, #28
 800aeac:	e772      	b.n	800ad94 <_dtoa_r+0x814>
 800aeae:	9b02      	ldr	r3, [sp, #8]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dc36      	bgt.n	800af22 <_dtoa_r+0x9a2>
 800aeb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	dd33      	ble.n	800af22 <_dtoa_r+0x9a2>
 800aeba:	f8dd b008 	ldr.w	fp, [sp, #8]
 800aebe:	f1bb 0f00 	cmp.w	fp, #0
 800aec2:	d10d      	bne.n	800aee0 <_dtoa_r+0x960>
 800aec4:	4621      	mov	r1, r4
 800aec6:	465b      	mov	r3, fp
 800aec8:	2205      	movs	r2, #5
 800aeca:	4628      	mov	r0, r5
 800aecc:	f000 fd42 	bl	800b954 <__multadd>
 800aed0:	4601      	mov	r1, r0
 800aed2:	4604      	mov	r4, r0
 800aed4:	4650      	mov	r0, sl
 800aed6:	f000 ff9f 	bl	800be18 <__mcmp>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	f73f adb6 	bgt.w	800aa4c <_dtoa_r+0x4cc>
 800aee0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aee2:	9f08      	ldr	r7, [sp, #32]
 800aee4:	ea6f 0903 	mvn.w	r9, r3
 800aee8:	f04f 0800 	mov.w	r8, #0
 800aeec:	4621      	mov	r1, r4
 800aeee:	4628      	mov	r0, r5
 800aef0:	f000 fd0e 	bl	800b910 <_Bfree>
 800aef4:	2e00      	cmp	r6, #0
 800aef6:	f43f aea4 	beq.w	800ac42 <_dtoa_r+0x6c2>
 800aefa:	f1b8 0f00 	cmp.w	r8, #0
 800aefe:	d005      	beq.n	800af0c <_dtoa_r+0x98c>
 800af00:	45b0      	cmp	r8, r6
 800af02:	d003      	beq.n	800af0c <_dtoa_r+0x98c>
 800af04:	4641      	mov	r1, r8
 800af06:	4628      	mov	r0, r5
 800af08:	f000 fd02 	bl	800b910 <_Bfree>
 800af0c:	4631      	mov	r1, r6
 800af0e:	4628      	mov	r0, r5
 800af10:	f000 fcfe 	bl	800b910 <_Bfree>
 800af14:	e695      	b.n	800ac42 <_dtoa_r+0x6c2>
 800af16:	2400      	movs	r4, #0
 800af18:	4626      	mov	r6, r4
 800af1a:	e7e1      	b.n	800aee0 <_dtoa_r+0x960>
 800af1c:	46c1      	mov	r9, r8
 800af1e:	4626      	mov	r6, r4
 800af20:	e594      	b.n	800aa4c <_dtoa_r+0x4cc>
 800af22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af24:	f8dd b008 	ldr.w	fp, [sp, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 80fc 	beq.w	800b126 <_dtoa_r+0xba6>
 800af2e:	2f00      	cmp	r7, #0
 800af30:	dd05      	ble.n	800af3e <_dtoa_r+0x9be>
 800af32:	4631      	mov	r1, r6
 800af34:	463a      	mov	r2, r7
 800af36:	4628      	mov	r0, r5
 800af38:	f000 ff02 	bl	800bd40 <__lshift>
 800af3c:	4606      	mov	r6, r0
 800af3e:	f1b8 0f00 	cmp.w	r8, #0
 800af42:	d05c      	beq.n	800affe <_dtoa_r+0xa7e>
 800af44:	4628      	mov	r0, r5
 800af46:	6871      	ldr	r1, [r6, #4]
 800af48:	f000 fca2 	bl	800b890 <_Balloc>
 800af4c:	4607      	mov	r7, r0
 800af4e:	b928      	cbnz	r0, 800af5c <_dtoa_r+0x9dc>
 800af50:	4602      	mov	r2, r0
 800af52:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af56:	4b7e      	ldr	r3, [pc, #504]	; (800b150 <_dtoa_r+0xbd0>)
 800af58:	f7ff bb26 	b.w	800a5a8 <_dtoa_r+0x28>
 800af5c:	6932      	ldr	r2, [r6, #16]
 800af5e:	f106 010c 	add.w	r1, r6, #12
 800af62:	3202      	adds	r2, #2
 800af64:	0092      	lsls	r2, r2, #2
 800af66:	300c      	adds	r0, #12
 800af68:	f7fd fbc6 	bl	80086f8 <memcpy>
 800af6c:	2201      	movs	r2, #1
 800af6e:	4639      	mov	r1, r7
 800af70:	4628      	mov	r0, r5
 800af72:	f000 fee5 	bl	800bd40 <__lshift>
 800af76:	46b0      	mov	r8, r6
 800af78:	4606      	mov	r6, r0
 800af7a:	9b08      	ldr	r3, [sp, #32]
 800af7c:	3301      	adds	r3, #1
 800af7e:	9302      	str	r3, [sp, #8]
 800af80:	9b08      	ldr	r3, [sp, #32]
 800af82:	445b      	add	r3, fp
 800af84:	930a      	str	r3, [sp, #40]	; 0x28
 800af86:	9b04      	ldr	r3, [sp, #16]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	9309      	str	r3, [sp, #36]	; 0x24
 800af8e:	9b02      	ldr	r3, [sp, #8]
 800af90:	4621      	mov	r1, r4
 800af92:	4650      	mov	r0, sl
 800af94:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800af98:	f7ff fa62 	bl	800a460 <quorem>
 800af9c:	4603      	mov	r3, r0
 800af9e:	4641      	mov	r1, r8
 800afa0:	3330      	adds	r3, #48	; 0x30
 800afa2:	9004      	str	r0, [sp, #16]
 800afa4:	4650      	mov	r0, sl
 800afa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800afa8:	f000 ff36 	bl	800be18 <__mcmp>
 800afac:	4632      	mov	r2, r6
 800afae:	9006      	str	r0, [sp, #24]
 800afb0:	4621      	mov	r1, r4
 800afb2:	4628      	mov	r0, r5
 800afb4:	f000 ff4c 	bl	800be50 <__mdiff>
 800afb8:	68c2      	ldr	r2, [r0, #12]
 800afba:	4607      	mov	r7, r0
 800afbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afbe:	bb02      	cbnz	r2, 800b002 <_dtoa_r+0xa82>
 800afc0:	4601      	mov	r1, r0
 800afc2:	4650      	mov	r0, sl
 800afc4:	f000 ff28 	bl	800be18 <__mcmp>
 800afc8:	4602      	mov	r2, r0
 800afca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afcc:	4639      	mov	r1, r7
 800afce:	4628      	mov	r0, r5
 800afd0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800afd4:	f000 fc9c 	bl	800b910 <_Bfree>
 800afd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afdc:	9f02      	ldr	r7, [sp, #8]
 800afde:	ea43 0102 	orr.w	r1, r3, r2
 800afe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afe4:	430b      	orrs	r3, r1
 800afe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe8:	d10d      	bne.n	800b006 <_dtoa_r+0xa86>
 800afea:	2b39      	cmp	r3, #57	; 0x39
 800afec:	d027      	beq.n	800b03e <_dtoa_r+0xabe>
 800afee:	9a06      	ldr	r2, [sp, #24]
 800aff0:	2a00      	cmp	r2, #0
 800aff2:	dd01      	ble.n	800aff8 <_dtoa_r+0xa78>
 800aff4:	9b04      	ldr	r3, [sp, #16]
 800aff6:	3331      	adds	r3, #49	; 0x31
 800aff8:	f88b 3000 	strb.w	r3, [fp]
 800affc:	e776      	b.n	800aeec <_dtoa_r+0x96c>
 800affe:	4630      	mov	r0, r6
 800b000:	e7b9      	b.n	800af76 <_dtoa_r+0x9f6>
 800b002:	2201      	movs	r2, #1
 800b004:	e7e2      	b.n	800afcc <_dtoa_r+0xa4c>
 800b006:	9906      	ldr	r1, [sp, #24]
 800b008:	2900      	cmp	r1, #0
 800b00a:	db04      	blt.n	800b016 <_dtoa_r+0xa96>
 800b00c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b00e:	4301      	orrs	r1, r0
 800b010:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b012:	4301      	orrs	r1, r0
 800b014:	d120      	bne.n	800b058 <_dtoa_r+0xad8>
 800b016:	2a00      	cmp	r2, #0
 800b018:	ddee      	ble.n	800aff8 <_dtoa_r+0xa78>
 800b01a:	4651      	mov	r1, sl
 800b01c:	2201      	movs	r2, #1
 800b01e:	4628      	mov	r0, r5
 800b020:	9302      	str	r3, [sp, #8]
 800b022:	f000 fe8d 	bl	800bd40 <__lshift>
 800b026:	4621      	mov	r1, r4
 800b028:	4682      	mov	sl, r0
 800b02a:	f000 fef5 	bl	800be18 <__mcmp>
 800b02e:	2800      	cmp	r0, #0
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	dc02      	bgt.n	800b03a <_dtoa_r+0xaba>
 800b034:	d1e0      	bne.n	800aff8 <_dtoa_r+0xa78>
 800b036:	07da      	lsls	r2, r3, #31
 800b038:	d5de      	bpl.n	800aff8 <_dtoa_r+0xa78>
 800b03a:	2b39      	cmp	r3, #57	; 0x39
 800b03c:	d1da      	bne.n	800aff4 <_dtoa_r+0xa74>
 800b03e:	2339      	movs	r3, #57	; 0x39
 800b040:	f88b 3000 	strb.w	r3, [fp]
 800b044:	463b      	mov	r3, r7
 800b046:	461f      	mov	r7, r3
 800b048:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	2a39      	cmp	r2, #57	; 0x39
 800b050:	d050      	beq.n	800b0f4 <_dtoa_r+0xb74>
 800b052:	3201      	adds	r2, #1
 800b054:	701a      	strb	r2, [r3, #0]
 800b056:	e749      	b.n	800aeec <_dtoa_r+0x96c>
 800b058:	2a00      	cmp	r2, #0
 800b05a:	dd03      	ble.n	800b064 <_dtoa_r+0xae4>
 800b05c:	2b39      	cmp	r3, #57	; 0x39
 800b05e:	d0ee      	beq.n	800b03e <_dtoa_r+0xabe>
 800b060:	3301      	adds	r3, #1
 800b062:	e7c9      	b.n	800aff8 <_dtoa_r+0xa78>
 800b064:	9a02      	ldr	r2, [sp, #8]
 800b066:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b068:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b06c:	428a      	cmp	r2, r1
 800b06e:	d02a      	beq.n	800b0c6 <_dtoa_r+0xb46>
 800b070:	4651      	mov	r1, sl
 800b072:	2300      	movs	r3, #0
 800b074:	220a      	movs	r2, #10
 800b076:	4628      	mov	r0, r5
 800b078:	f000 fc6c 	bl	800b954 <__multadd>
 800b07c:	45b0      	cmp	r8, r6
 800b07e:	4682      	mov	sl, r0
 800b080:	f04f 0300 	mov.w	r3, #0
 800b084:	f04f 020a 	mov.w	r2, #10
 800b088:	4641      	mov	r1, r8
 800b08a:	4628      	mov	r0, r5
 800b08c:	d107      	bne.n	800b09e <_dtoa_r+0xb1e>
 800b08e:	f000 fc61 	bl	800b954 <__multadd>
 800b092:	4680      	mov	r8, r0
 800b094:	4606      	mov	r6, r0
 800b096:	9b02      	ldr	r3, [sp, #8]
 800b098:	3301      	adds	r3, #1
 800b09a:	9302      	str	r3, [sp, #8]
 800b09c:	e777      	b.n	800af8e <_dtoa_r+0xa0e>
 800b09e:	f000 fc59 	bl	800b954 <__multadd>
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4680      	mov	r8, r0
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	220a      	movs	r2, #10
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f000 fc52 	bl	800b954 <__multadd>
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	e7f0      	b.n	800b096 <_dtoa_r+0xb16>
 800b0b4:	f1bb 0f00 	cmp.w	fp, #0
 800b0b8:	bfcc      	ite	gt
 800b0ba:	465f      	movgt	r7, fp
 800b0bc:	2701      	movle	r7, #1
 800b0be:	f04f 0800 	mov.w	r8, #0
 800b0c2:	9a08      	ldr	r2, [sp, #32]
 800b0c4:	4417      	add	r7, r2
 800b0c6:	4651      	mov	r1, sl
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	9302      	str	r3, [sp, #8]
 800b0ce:	f000 fe37 	bl	800bd40 <__lshift>
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	4682      	mov	sl, r0
 800b0d6:	f000 fe9f 	bl	800be18 <__mcmp>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	dcb2      	bgt.n	800b044 <_dtoa_r+0xac4>
 800b0de:	d102      	bne.n	800b0e6 <_dtoa_r+0xb66>
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	07db      	lsls	r3, r3, #31
 800b0e4:	d4ae      	bmi.n	800b044 <_dtoa_r+0xac4>
 800b0e6:	463b      	mov	r3, r7
 800b0e8:	461f      	mov	r7, r3
 800b0ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0ee:	2a30      	cmp	r2, #48	; 0x30
 800b0f0:	d0fa      	beq.n	800b0e8 <_dtoa_r+0xb68>
 800b0f2:	e6fb      	b.n	800aeec <_dtoa_r+0x96c>
 800b0f4:	9a08      	ldr	r2, [sp, #32]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d1a5      	bne.n	800b046 <_dtoa_r+0xac6>
 800b0fa:	2331      	movs	r3, #49	; 0x31
 800b0fc:	f109 0901 	add.w	r9, r9, #1
 800b100:	7013      	strb	r3, [r2, #0]
 800b102:	e6f3      	b.n	800aeec <_dtoa_r+0x96c>
 800b104:	4b13      	ldr	r3, [pc, #76]	; (800b154 <_dtoa_r+0xbd4>)
 800b106:	f7ff baa7 	b.w	800a658 <_dtoa_r+0xd8>
 800b10a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f47f aa80 	bne.w	800a612 <_dtoa_r+0x92>
 800b112:	4b11      	ldr	r3, [pc, #68]	; (800b158 <_dtoa_r+0xbd8>)
 800b114:	f7ff baa0 	b.w	800a658 <_dtoa_r+0xd8>
 800b118:	f1bb 0f00 	cmp.w	fp, #0
 800b11c:	dc03      	bgt.n	800b126 <_dtoa_r+0xba6>
 800b11e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b120:	2b02      	cmp	r3, #2
 800b122:	f73f aecc 	bgt.w	800aebe <_dtoa_r+0x93e>
 800b126:	9f08      	ldr	r7, [sp, #32]
 800b128:	4621      	mov	r1, r4
 800b12a:	4650      	mov	r0, sl
 800b12c:	f7ff f998 	bl	800a460 <quorem>
 800b130:	9a08      	ldr	r2, [sp, #32]
 800b132:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b136:	f807 3b01 	strb.w	r3, [r7], #1
 800b13a:	1aba      	subs	r2, r7, r2
 800b13c:	4593      	cmp	fp, r2
 800b13e:	ddb9      	ble.n	800b0b4 <_dtoa_r+0xb34>
 800b140:	4651      	mov	r1, sl
 800b142:	2300      	movs	r3, #0
 800b144:	220a      	movs	r2, #10
 800b146:	4628      	mov	r0, r5
 800b148:	f000 fc04 	bl	800b954 <__multadd>
 800b14c:	4682      	mov	sl, r0
 800b14e:	e7eb      	b.n	800b128 <_dtoa_r+0xba8>
 800b150:	0800d5f4 	.word	0x0800d5f4
 800b154:	0800d3f4 	.word	0x0800d3f4
 800b158:	0800d571 	.word	0x0800d571

0800b15c <rshift>:
 800b15c:	6903      	ldr	r3, [r0, #16]
 800b15e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b162:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b166:	f100 0414 	add.w	r4, r0, #20
 800b16a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b16e:	dd46      	ble.n	800b1fe <rshift+0xa2>
 800b170:	f011 011f 	ands.w	r1, r1, #31
 800b174:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b178:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b17c:	d10c      	bne.n	800b198 <rshift+0x3c>
 800b17e:	4629      	mov	r1, r5
 800b180:	f100 0710 	add.w	r7, r0, #16
 800b184:	42b1      	cmp	r1, r6
 800b186:	d335      	bcc.n	800b1f4 <rshift+0x98>
 800b188:	1a9b      	subs	r3, r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	1eea      	subs	r2, r5, #3
 800b18e:	4296      	cmp	r6, r2
 800b190:	bf38      	it	cc
 800b192:	2300      	movcc	r3, #0
 800b194:	4423      	add	r3, r4
 800b196:	e015      	b.n	800b1c4 <rshift+0x68>
 800b198:	46a1      	mov	r9, r4
 800b19a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b19e:	f1c1 0820 	rsb	r8, r1, #32
 800b1a2:	40cf      	lsrs	r7, r1
 800b1a4:	f105 0e04 	add.w	lr, r5, #4
 800b1a8:	4576      	cmp	r6, lr
 800b1aa:	46f4      	mov	ip, lr
 800b1ac:	d816      	bhi.n	800b1dc <rshift+0x80>
 800b1ae:	1a9b      	subs	r3, r3, r2
 800b1b0:	009a      	lsls	r2, r3, #2
 800b1b2:	3a04      	subs	r2, #4
 800b1b4:	3501      	adds	r5, #1
 800b1b6:	42ae      	cmp	r6, r5
 800b1b8:	bf38      	it	cc
 800b1ba:	2200      	movcc	r2, #0
 800b1bc:	18a3      	adds	r3, r4, r2
 800b1be:	50a7      	str	r7, [r4, r2]
 800b1c0:	b107      	cbz	r7, 800b1c4 <rshift+0x68>
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	42a3      	cmp	r3, r4
 800b1c6:	eba3 0204 	sub.w	r2, r3, r4
 800b1ca:	bf08      	it	eq
 800b1cc:	2300      	moveq	r3, #0
 800b1ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1d2:	6102      	str	r2, [r0, #16]
 800b1d4:	bf08      	it	eq
 800b1d6:	6143      	streq	r3, [r0, #20]
 800b1d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1dc:	f8dc c000 	ldr.w	ip, [ip]
 800b1e0:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1e4:	ea4c 0707 	orr.w	r7, ip, r7
 800b1e8:	f849 7b04 	str.w	r7, [r9], #4
 800b1ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1f0:	40cf      	lsrs	r7, r1
 800b1f2:	e7d9      	b.n	800b1a8 <rshift+0x4c>
 800b1f4:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1f8:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1fc:	e7c2      	b.n	800b184 <rshift+0x28>
 800b1fe:	4623      	mov	r3, r4
 800b200:	e7e0      	b.n	800b1c4 <rshift+0x68>

0800b202 <__hexdig_fun>:
 800b202:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b206:	2b09      	cmp	r3, #9
 800b208:	d802      	bhi.n	800b210 <__hexdig_fun+0xe>
 800b20a:	3820      	subs	r0, #32
 800b20c:	b2c0      	uxtb	r0, r0
 800b20e:	4770      	bx	lr
 800b210:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b214:	2b05      	cmp	r3, #5
 800b216:	d801      	bhi.n	800b21c <__hexdig_fun+0x1a>
 800b218:	3847      	subs	r0, #71	; 0x47
 800b21a:	e7f7      	b.n	800b20c <__hexdig_fun+0xa>
 800b21c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b220:	2b05      	cmp	r3, #5
 800b222:	d801      	bhi.n	800b228 <__hexdig_fun+0x26>
 800b224:	3827      	subs	r0, #39	; 0x27
 800b226:	e7f1      	b.n	800b20c <__hexdig_fun+0xa>
 800b228:	2000      	movs	r0, #0
 800b22a:	4770      	bx	lr

0800b22c <__gethex>:
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	b08b      	sub	sp, #44	; 0x2c
 800b232:	9306      	str	r3, [sp, #24]
 800b234:	4bb9      	ldr	r3, [pc, #740]	; (800b51c <__gethex+0x2f0>)
 800b236:	9002      	str	r0, [sp, #8]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	468b      	mov	fp, r1
 800b23c:	4618      	mov	r0, r3
 800b23e:	4690      	mov	r8, r2
 800b240:	9303      	str	r3, [sp, #12]
 800b242:	f7f4 ff85 	bl	8000150 <strlen>
 800b246:	4682      	mov	sl, r0
 800b248:	9b03      	ldr	r3, [sp, #12]
 800b24a:	f8db 2000 	ldr.w	r2, [fp]
 800b24e:	4403      	add	r3, r0
 800b250:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b254:	9307      	str	r3, [sp, #28]
 800b256:	1c93      	adds	r3, r2, #2
 800b258:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b25c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b260:	32fe      	adds	r2, #254	; 0xfe
 800b262:	18d1      	adds	r1, r2, r3
 800b264:	461f      	mov	r7, r3
 800b266:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b26a:	9101      	str	r1, [sp, #4]
 800b26c:	2830      	cmp	r0, #48	; 0x30
 800b26e:	d0f8      	beq.n	800b262 <__gethex+0x36>
 800b270:	f7ff ffc7 	bl	800b202 <__hexdig_fun>
 800b274:	4604      	mov	r4, r0
 800b276:	2800      	cmp	r0, #0
 800b278:	d13a      	bne.n	800b2f0 <__gethex+0xc4>
 800b27a:	4652      	mov	r2, sl
 800b27c:	4638      	mov	r0, r7
 800b27e:	9903      	ldr	r1, [sp, #12]
 800b280:	f001 f92e 	bl	800c4e0 <strncmp>
 800b284:	4605      	mov	r5, r0
 800b286:	2800      	cmp	r0, #0
 800b288:	d166      	bne.n	800b358 <__gethex+0x12c>
 800b28a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b28e:	eb07 060a 	add.w	r6, r7, sl
 800b292:	f7ff ffb6 	bl	800b202 <__hexdig_fun>
 800b296:	2800      	cmp	r0, #0
 800b298:	d060      	beq.n	800b35c <__gethex+0x130>
 800b29a:	4633      	mov	r3, r6
 800b29c:	7818      	ldrb	r0, [r3, #0]
 800b29e:	461f      	mov	r7, r3
 800b2a0:	2830      	cmp	r0, #48	; 0x30
 800b2a2:	f103 0301 	add.w	r3, r3, #1
 800b2a6:	d0f9      	beq.n	800b29c <__gethex+0x70>
 800b2a8:	f7ff ffab 	bl	800b202 <__hexdig_fun>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	fab0 f480 	clz	r4, r0
 800b2b2:	4635      	mov	r5, r6
 800b2b4:	0964      	lsrs	r4, r4, #5
 800b2b6:	9301      	str	r3, [sp, #4]
 800b2b8:	463a      	mov	r2, r7
 800b2ba:	4616      	mov	r6, r2
 800b2bc:	7830      	ldrb	r0, [r6, #0]
 800b2be:	3201      	adds	r2, #1
 800b2c0:	f7ff ff9f 	bl	800b202 <__hexdig_fun>
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d1f8      	bne.n	800b2ba <__gethex+0x8e>
 800b2c8:	4652      	mov	r2, sl
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	9903      	ldr	r1, [sp, #12]
 800b2ce:	f001 f907 	bl	800c4e0 <strncmp>
 800b2d2:	b980      	cbnz	r0, 800b2f6 <__gethex+0xca>
 800b2d4:	b94d      	cbnz	r5, 800b2ea <__gethex+0xbe>
 800b2d6:	eb06 050a 	add.w	r5, r6, sl
 800b2da:	462a      	mov	r2, r5
 800b2dc:	4616      	mov	r6, r2
 800b2de:	7830      	ldrb	r0, [r6, #0]
 800b2e0:	3201      	adds	r2, #1
 800b2e2:	f7ff ff8e 	bl	800b202 <__hexdig_fun>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d1f8      	bne.n	800b2dc <__gethex+0xb0>
 800b2ea:	1bad      	subs	r5, r5, r6
 800b2ec:	00ad      	lsls	r5, r5, #2
 800b2ee:	e004      	b.n	800b2fa <__gethex+0xce>
 800b2f0:	2400      	movs	r4, #0
 800b2f2:	4625      	mov	r5, r4
 800b2f4:	e7e0      	b.n	800b2b8 <__gethex+0x8c>
 800b2f6:	2d00      	cmp	r5, #0
 800b2f8:	d1f7      	bne.n	800b2ea <__gethex+0xbe>
 800b2fa:	7833      	ldrb	r3, [r6, #0]
 800b2fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b300:	2b50      	cmp	r3, #80	; 0x50
 800b302:	d139      	bne.n	800b378 <__gethex+0x14c>
 800b304:	7873      	ldrb	r3, [r6, #1]
 800b306:	2b2b      	cmp	r3, #43	; 0x2b
 800b308:	d02a      	beq.n	800b360 <__gethex+0x134>
 800b30a:	2b2d      	cmp	r3, #45	; 0x2d
 800b30c:	d02c      	beq.n	800b368 <__gethex+0x13c>
 800b30e:	f04f 0900 	mov.w	r9, #0
 800b312:	1c71      	adds	r1, r6, #1
 800b314:	7808      	ldrb	r0, [r1, #0]
 800b316:	f7ff ff74 	bl	800b202 <__hexdig_fun>
 800b31a:	1e43      	subs	r3, r0, #1
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b18      	cmp	r3, #24
 800b320:	d82a      	bhi.n	800b378 <__gethex+0x14c>
 800b322:	f1a0 0210 	sub.w	r2, r0, #16
 800b326:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b32a:	f7ff ff6a 	bl	800b202 <__hexdig_fun>
 800b32e:	1e43      	subs	r3, r0, #1
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b18      	cmp	r3, #24
 800b334:	d91b      	bls.n	800b36e <__gethex+0x142>
 800b336:	f1b9 0f00 	cmp.w	r9, #0
 800b33a:	d000      	beq.n	800b33e <__gethex+0x112>
 800b33c:	4252      	negs	r2, r2
 800b33e:	4415      	add	r5, r2
 800b340:	f8cb 1000 	str.w	r1, [fp]
 800b344:	b1d4      	cbz	r4, 800b37c <__gethex+0x150>
 800b346:	9b01      	ldr	r3, [sp, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	bf14      	ite	ne
 800b34c:	2700      	movne	r7, #0
 800b34e:	2706      	moveq	r7, #6
 800b350:	4638      	mov	r0, r7
 800b352:	b00b      	add	sp, #44	; 0x2c
 800b354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b358:	463e      	mov	r6, r7
 800b35a:	4625      	mov	r5, r4
 800b35c:	2401      	movs	r4, #1
 800b35e:	e7cc      	b.n	800b2fa <__gethex+0xce>
 800b360:	f04f 0900 	mov.w	r9, #0
 800b364:	1cb1      	adds	r1, r6, #2
 800b366:	e7d5      	b.n	800b314 <__gethex+0xe8>
 800b368:	f04f 0901 	mov.w	r9, #1
 800b36c:	e7fa      	b.n	800b364 <__gethex+0x138>
 800b36e:	230a      	movs	r3, #10
 800b370:	fb03 0202 	mla	r2, r3, r2, r0
 800b374:	3a10      	subs	r2, #16
 800b376:	e7d6      	b.n	800b326 <__gethex+0xfa>
 800b378:	4631      	mov	r1, r6
 800b37a:	e7e1      	b.n	800b340 <__gethex+0x114>
 800b37c:	4621      	mov	r1, r4
 800b37e:	1bf3      	subs	r3, r6, r7
 800b380:	3b01      	subs	r3, #1
 800b382:	2b07      	cmp	r3, #7
 800b384:	dc0a      	bgt.n	800b39c <__gethex+0x170>
 800b386:	9802      	ldr	r0, [sp, #8]
 800b388:	f000 fa82 	bl	800b890 <_Balloc>
 800b38c:	4604      	mov	r4, r0
 800b38e:	b940      	cbnz	r0, 800b3a2 <__gethex+0x176>
 800b390:	4602      	mov	r2, r0
 800b392:	21de      	movs	r1, #222	; 0xde
 800b394:	4b62      	ldr	r3, [pc, #392]	; (800b520 <__gethex+0x2f4>)
 800b396:	4863      	ldr	r0, [pc, #396]	; (800b524 <__gethex+0x2f8>)
 800b398:	f001 f8c2 	bl	800c520 <__assert_func>
 800b39c:	3101      	adds	r1, #1
 800b39e:	105b      	asrs	r3, r3, #1
 800b3a0:	e7ef      	b.n	800b382 <__gethex+0x156>
 800b3a2:	f04f 0b00 	mov.w	fp, #0
 800b3a6:	f100 0914 	add.w	r9, r0, #20
 800b3aa:	f1ca 0301 	rsb	r3, sl, #1
 800b3ae:	f8cd 9010 	str.w	r9, [sp, #16]
 800b3b2:	f8cd b004 	str.w	fp, [sp, #4]
 800b3b6:	9308      	str	r3, [sp, #32]
 800b3b8:	42b7      	cmp	r7, r6
 800b3ba:	d33f      	bcc.n	800b43c <__gethex+0x210>
 800b3bc:	9f04      	ldr	r7, [sp, #16]
 800b3be:	9b01      	ldr	r3, [sp, #4]
 800b3c0:	f847 3b04 	str.w	r3, [r7], #4
 800b3c4:	eba7 0709 	sub.w	r7, r7, r9
 800b3c8:	10bf      	asrs	r7, r7, #2
 800b3ca:	6127      	str	r7, [r4, #16]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f000 fb55 	bl	800ba7c <__hi0bits>
 800b3d2:	017f      	lsls	r7, r7, #5
 800b3d4:	f8d8 6000 	ldr.w	r6, [r8]
 800b3d8:	1a3f      	subs	r7, r7, r0
 800b3da:	42b7      	cmp	r7, r6
 800b3dc:	dd62      	ble.n	800b4a4 <__gethex+0x278>
 800b3de:	1bbf      	subs	r7, r7, r6
 800b3e0:	4639      	mov	r1, r7
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f000 feeb 	bl	800c1be <__any_on>
 800b3e8:	4682      	mov	sl, r0
 800b3ea:	b1a8      	cbz	r0, 800b418 <__gethex+0x1ec>
 800b3ec:	f04f 0a01 	mov.w	sl, #1
 800b3f0:	1e7b      	subs	r3, r7, #1
 800b3f2:	1159      	asrs	r1, r3, #5
 800b3f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b3f8:	f003 021f 	and.w	r2, r3, #31
 800b3fc:	fa0a f202 	lsl.w	r2, sl, r2
 800b400:	420a      	tst	r2, r1
 800b402:	d009      	beq.n	800b418 <__gethex+0x1ec>
 800b404:	4553      	cmp	r3, sl
 800b406:	dd05      	ble.n	800b414 <__gethex+0x1e8>
 800b408:	4620      	mov	r0, r4
 800b40a:	1eb9      	subs	r1, r7, #2
 800b40c:	f000 fed7 	bl	800c1be <__any_on>
 800b410:	2800      	cmp	r0, #0
 800b412:	d144      	bne.n	800b49e <__gethex+0x272>
 800b414:	f04f 0a02 	mov.w	sl, #2
 800b418:	4639      	mov	r1, r7
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7ff fe9e 	bl	800b15c <rshift>
 800b420:	443d      	add	r5, r7
 800b422:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b426:	42ab      	cmp	r3, r5
 800b428:	da4a      	bge.n	800b4c0 <__gethex+0x294>
 800b42a:	4621      	mov	r1, r4
 800b42c:	9802      	ldr	r0, [sp, #8]
 800b42e:	f000 fa6f 	bl	800b910 <_Bfree>
 800b432:	2300      	movs	r3, #0
 800b434:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b436:	27a3      	movs	r7, #163	; 0xa3
 800b438:	6013      	str	r3, [r2, #0]
 800b43a:	e789      	b.n	800b350 <__gethex+0x124>
 800b43c:	1e73      	subs	r3, r6, #1
 800b43e:	9a07      	ldr	r2, [sp, #28]
 800b440:	9305      	str	r3, [sp, #20]
 800b442:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b446:	4293      	cmp	r3, r2
 800b448:	d019      	beq.n	800b47e <__gethex+0x252>
 800b44a:	f1bb 0f20 	cmp.w	fp, #32
 800b44e:	d107      	bne.n	800b460 <__gethex+0x234>
 800b450:	9b04      	ldr	r3, [sp, #16]
 800b452:	9a01      	ldr	r2, [sp, #4]
 800b454:	f843 2b04 	str.w	r2, [r3], #4
 800b458:	9304      	str	r3, [sp, #16]
 800b45a:	2300      	movs	r3, #0
 800b45c:	469b      	mov	fp, r3
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b464:	f7ff fecd 	bl	800b202 <__hexdig_fun>
 800b468:	9b01      	ldr	r3, [sp, #4]
 800b46a:	f000 000f 	and.w	r0, r0, #15
 800b46e:	fa00 f00b 	lsl.w	r0, r0, fp
 800b472:	4303      	orrs	r3, r0
 800b474:	9301      	str	r3, [sp, #4]
 800b476:	f10b 0b04 	add.w	fp, fp, #4
 800b47a:	9b05      	ldr	r3, [sp, #20]
 800b47c:	e00d      	b.n	800b49a <__gethex+0x26e>
 800b47e:	9b05      	ldr	r3, [sp, #20]
 800b480:	9a08      	ldr	r2, [sp, #32]
 800b482:	4413      	add	r3, r2
 800b484:	42bb      	cmp	r3, r7
 800b486:	d3e0      	bcc.n	800b44a <__gethex+0x21e>
 800b488:	4618      	mov	r0, r3
 800b48a:	4652      	mov	r2, sl
 800b48c:	9903      	ldr	r1, [sp, #12]
 800b48e:	9309      	str	r3, [sp, #36]	; 0x24
 800b490:	f001 f826 	bl	800c4e0 <strncmp>
 800b494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b496:	2800      	cmp	r0, #0
 800b498:	d1d7      	bne.n	800b44a <__gethex+0x21e>
 800b49a:	461e      	mov	r6, r3
 800b49c:	e78c      	b.n	800b3b8 <__gethex+0x18c>
 800b49e:	f04f 0a03 	mov.w	sl, #3
 800b4a2:	e7b9      	b.n	800b418 <__gethex+0x1ec>
 800b4a4:	da09      	bge.n	800b4ba <__gethex+0x28e>
 800b4a6:	1bf7      	subs	r7, r6, r7
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	463a      	mov	r2, r7
 800b4ac:	9802      	ldr	r0, [sp, #8]
 800b4ae:	f000 fc47 	bl	800bd40 <__lshift>
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	1bed      	subs	r5, r5, r7
 800b4b6:	f100 0914 	add.w	r9, r0, #20
 800b4ba:	f04f 0a00 	mov.w	sl, #0
 800b4be:	e7b0      	b.n	800b422 <__gethex+0x1f6>
 800b4c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4c4:	42a8      	cmp	r0, r5
 800b4c6:	dd71      	ble.n	800b5ac <__gethex+0x380>
 800b4c8:	1b45      	subs	r5, r0, r5
 800b4ca:	42ae      	cmp	r6, r5
 800b4cc:	dc34      	bgt.n	800b538 <__gethex+0x30c>
 800b4ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d028      	beq.n	800b528 <__gethex+0x2fc>
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	d02a      	beq.n	800b530 <__gethex+0x304>
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d115      	bne.n	800b50a <__gethex+0x2de>
 800b4de:	42ae      	cmp	r6, r5
 800b4e0:	d113      	bne.n	800b50a <__gethex+0x2de>
 800b4e2:	2e01      	cmp	r6, #1
 800b4e4:	d10b      	bne.n	800b4fe <__gethex+0x2d2>
 800b4e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b4ea:	9a06      	ldr	r2, [sp, #24]
 800b4ec:	2762      	movs	r7, #98	; 0x62
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	6123      	str	r3, [r4, #16]
 800b4f4:	f8c9 3000 	str.w	r3, [r9]
 800b4f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4fa:	601c      	str	r4, [r3, #0]
 800b4fc:	e728      	b.n	800b350 <__gethex+0x124>
 800b4fe:	4620      	mov	r0, r4
 800b500:	1e71      	subs	r1, r6, #1
 800b502:	f000 fe5c 	bl	800c1be <__any_on>
 800b506:	2800      	cmp	r0, #0
 800b508:	d1ed      	bne.n	800b4e6 <__gethex+0x2ba>
 800b50a:	4621      	mov	r1, r4
 800b50c:	9802      	ldr	r0, [sp, #8]
 800b50e:	f000 f9ff 	bl	800b910 <_Bfree>
 800b512:	2300      	movs	r3, #0
 800b514:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b516:	2750      	movs	r7, #80	; 0x50
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	e719      	b.n	800b350 <__gethex+0x124>
 800b51c:	0800d670 	.word	0x0800d670
 800b520:	0800d5f4 	.word	0x0800d5f4
 800b524:	0800d605 	.word	0x0800d605
 800b528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1ed      	bne.n	800b50a <__gethex+0x2de>
 800b52e:	e7da      	b.n	800b4e6 <__gethex+0x2ba>
 800b530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1d7      	bne.n	800b4e6 <__gethex+0x2ba>
 800b536:	e7e8      	b.n	800b50a <__gethex+0x2de>
 800b538:	1e6f      	subs	r7, r5, #1
 800b53a:	f1ba 0f00 	cmp.w	sl, #0
 800b53e:	d132      	bne.n	800b5a6 <__gethex+0x37a>
 800b540:	b127      	cbz	r7, 800b54c <__gethex+0x320>
 800b542:	4639      	mov	r1, r7
 800b544:	4620      	mov	r0, r4
 800b546:	f000 fe3a 	bl	800c1be <__any_on>
 800b54a:	4682      	mov	sl, r0
 800b54c:	2101      	movs	r1, #1
 800b54e:	117b      	asrs	r3, r7, #5
 800b550:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b554:	f007 071f 	and.w	r7, r7, #31
 800b558:	fa01 f707 	lsl.w	r7, r1, r7
 800b55c:	421f      	tst	r7, r3
 800b55e:	f04f 0702 	mov.w	r7, #2
 800b562:	4629      	mov	r1, r5
 800b564:	4620      	mov	r0, r4
 800b566:	bf18      	it	ne
 800b568:	f04a 0a02 	orrne.w	sl, sl, #2
 800b56c:	1b76      	subs	r6, r6, r5
 800b56e:	f7ff fdf5 	bl	800b15c <rshift>
 800b572:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b576:	f1ba 0f00 	cmp.w	sl, #0
 800b57a:	d048      	beq.n	800b60e <__gethex+0x3e2>
 800b57c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b580:	2b02      	cmp	r3, #2
 800b582:	d015      	beq.n	800b5b0 <__gethex+0x384>
 800b584:	2b03      	cmp	r3, #3
 800b586:	d017      	beq.n	800b5b8 <__gethex+0x38c>
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d109      	bne.n	800b5a0 <__gethex+0x374>
 800b58c:	f01a 0f02 	tst.w	sl, #2
 800b590:	d006      	beq.n	800b5a0 <__gethex+0x374>
 800b592:	f8d9 0000 	ldr.w	r0, [r9]
 800b596:	ea4a 0a00 	orr.w	sl, sl, r0
 800b59a:	f01a 0f01 	tst.w	sl, #1
 800b59e:	d10e      	bne.n	800b5be <__gethex+0x392>
 800b5a0:	f047 0710 	orr.w	r7, r7, #16
 800b5a4:	e033      	b.n	800b60e <__gethex+0x3e2>
 800b5a6:	f04f 0a01 	mov.w	sl, #1
 800b5aa:	e7cf      	b.n	800b54c <__gethex+0x320>
 800b5ac:	2701      	movs	r7, #1
 800b5ae:	e7e2      	b.n	800b576 <__gethex+0x34a>
 800b5b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5b2:	f1c3 0301 	rsb	r3, r3, #1
 800b5b6:	9315      	str	r3, [sp, #84]	; 0x54
 800b5b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0f0      	beq.n	800b5a0 <__gethex+0x374>
 800b5be:	f04f 0c00 	mov.w	ip, #0
 800b5c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5c6:	f104 0314 	add.w	r3, r4, #20
 800b5ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b5ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5d8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b5dc:	d01c      	beq.n	800b618 <__gethex+0x3ec>
 800b5de:	3201      	adds	r2, #1
 800b5e0:	6002      	str	r2, [r0, #0]
 800b5e2:	2f02      	cmp	r7, #2
 800b5e4:	f104 0314 	add.w	r3, r4, #20
 800b5e8:	d13d      	bne.n	800b666 <__gethex+0x43a>
 800b5ea:	f8d8 2000 	ldr.w	r2, [r8]
 800b5ee:	3a01      	subs	r2, #1
 800b5f0:	42b2      	cmp	r2, r6
 800b5f2:	d10a      	bne.n	800b60a <__gethex+0x3de>
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	1171      	asrs	r1, r6, #5
 800b5f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5fc:	f006 061f 	and.w	r6, r6, #31
 800b600:	fa02 f606 	lsl.w	r6, r2, r6
 800b604:	421e      	tst	r6, r3
 800b606:	bf18      	it	ne
 800b608:	4617      	movne	r7, r2
 800b60a:	f047 0720 	orr.w	r7, r7, #32
 800b60e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b610:	601c      	str	r4, [r3, #0]
 800b612:	9b06      	ldr	r3, [sp, #24]
 800b614:	601d      	str	r5, [r3, #0]
 800b616:	e69b      	b.n	800b350 <__gethex+0x124>
 800b618:	4299      	cmp	r1, r3
 800b61a:	f843 cc04 	str.w	ip, [r3, #-4]
 800b61e:	d8d8      	bhi.n	800b5d2 <__gethex+0x3a6>
 800b620:	68a3      	ldr	r3, [r4, #8]
 800b622:	459b      	cmp	fp, r3
 800b624:	db17      	blt.n	800b656 <__gethex+0x42a>
 800b626:	6861      	ldr	r1, [r4, #4]
 800b628:	9802      	ldr	r0, [sp, #8]
 800b62a:	3101      	adds	r1, #1
 800b62c:	f000 f930 	bl	800b890 <_Balloc>
 800b630:	4681      	mov	r9, r0
 800b632:	b918      	cbnz	r0, 800b63c <__gethex+0x410>
 800b634:	4602      	mov	r2, r0
 800b636:	2184      	movs	r1, #132	; 0x84
 800b638:	4b19      	ldr	r3, [pc, #100]	; (800b6a0 <__gethex+0x474>)
 800b63a:	e6ac      	b.n	800b396 <__gethex+0x16a>
 800b63c:	6922      	ldr	r2, [r4, #16]
 800b63e:	f104 010c 	add.w	r1, r4, #12
 800b642:	3202      	adds	r2, #2
 800b644:	0092      	lsls	r2, r2, #2
 800b646:	300c      	adds	r0, #12
 800b648:	f7fd f856 	bl	80086f8 <memcpy>
 800b64c:	4621      	mov	r1, r4
 800b64e:	9802      	ldr	r0, [sp, #8]
 800b650:	f000 f95e 	bl	800b910 <_Bfree>
 800b654:	464c      	mov	r4, r9
 800b656:	6923      	ldr	r3, [r4, #16]
 800b658:	1c5a      	adds	r2, r3, #1
 800b65a:	6122      	str	r2, [r4, #16]
 800b65c:	2201      	movs	r2, #1
 800b65e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b662:	615a      	str	r2, [r3, #20]
 800b664:	e7bd      	b.n	800b5e2 <__gethex+0x3b6>
 800b666:	6922      	ldr	r2, [r4, #16]
 800b668:	455a      	cmp	r2, fp
 800b66a:	dd0b      	ble.n	800b684 <__gethex+0x458>
 800b66c:	2101      	movs	r1, #1
 800b66e:	4620      	mov	r0, r4
 800b670:	f7ff fd74 	bl	800b15c <rshift>
 800b674:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b678:	3501      	adds	r5, #1
 800b67a:	42ab      	cmp	r3, r5
 800b67c:	f6ff aed5 	blt.w	800b42a <__gethex+0x1fe>
 800b680:	2701      	movs	r7, #1
 800b682:	e7c2      	b.n	800b60a <__gethex+0x3de>
 800b684:	f016 061f 	ands.w	r6, r6, #31
 800b688:	d0fa      	beq.n	800b680 <__gethex+0x454>
 800b68a:	449a      	add	sl, r3
 800b68c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b690:	f000 f9f4 	bl	800ba7c <__hi0bits>
 800b694:	f1c6 0620 	rsb	r6, r6, #32
 800b698:	42b0      	cmp	r0, r6
 800b69a:	dbe7      	blt.n	800b66c <__gethex+0x440>
 800b69c:	e7f0      	b.n	800b680 <__gethex+0x454>
 800b69e:	bf00      	nop
 800b6a0:	0800d5f4 	.word	0x0800d5f4

0800b6a4 <L_shift>:
 800b6a4:	f1c2 0208 	rsb	r2, r2, #8
 800b6a8:	0092      	lsls	r2, r2, #2
 800b6aa:	b570      	push	{r4, r5, r6, lr}
 800b6ac:	f1c2 0620 	rsb	r6, r2, #32
 800b6b0:	6843      	ldr	r3, [r0, #4]
 800b6b2:	6804      	ldr	r4, [r0, #0]
 800b6b4:	fa03 f506 	lsl.w	r5, r3, r6
 800b6b8:	432c      	orrs	r4, r5
 800b6ba:	40d3      	lsrs	r3, r2
 800b6bc:	6004      	str	r4, [r0, #0]
 800b6be:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6c2:	4288      	cmp	r0, r1
 800b6c4:	d3f4      	bcc.n	800b6b0 <L_shift+0xc>
 800b6c6:	bd70      	pop	{r4, r5, r6, pc}

0800b6c8 <__match>:
 800b6c8:	b530      	push	{r4, r5, lr}
 800b6ca:	6803      	ldr	r3, [r0, #0]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6d2:	b914      	cbnz	r4, 800b6da <__match+0x12>
 800b6d4:	6003      	str	r3, [r0, #0]
 800b6d6:	2001      	movs	r0, #1
 800b6d8:	bd30      	pop	{r4, r5, pc}
 800b6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6e2:	2d19      	cmp	r5, #25
 800b6e4:	bf98      	it	ls
 800b6e6:	3220      	addls	r2, #32
 800b6e8:	42a2      	cmp	r2, r4
 800b6ea:	d0f0      	beq.n	800b6ce <__match+0x6>
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	e7f3      	b.n	800b6d8 <__match+0x10>

0800b6f0 <__hexnan>:
 800b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f4:	2500      	movs	r5, #0
 800b6f6:	680b      	ldr	r3, [r1, #0]
 800b6f8:	4682      	mov	sl, r0
 800b6fa:	115e      	asrs	r6, r3, #5
 800b6fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b700:	f013 031f 	ands.w	r3, r3, #31
 800b704:	bf18      	it	ne
 800b706:	3604      	addne	r6, #4
 800b708:	1f37      	subs	r7, r6, #4
 800b70a:	4690      	mov	r8, r2
 800b70c:	46b9      	mov	r9, r7
 800b70e:	463c      	mov	r4, r7
 800b710:	46ab      	mov	fp, r5
 800b712:	b087      	sub	sp, #28
 800b714:	6801      	ldr	r1, [r0, #0]
 800b716:	9301      	str	r3, [sp, #4]
 800b718:	f846 5c04 	str.w	r5, [r6, #-4]
 800b71c:	9502      	str	r5, [sp, #8]
 800b71e:	784a      	ldrb	r2, [r1, #1]
 800b720:	1c4b      	adds	r3, r1, #1
 800b722:	9303      	str	r3, [sp, #12]
 800b724:	b342      	cbz	r2, 800b778 <__hexnan+0x88>
 800b726:	4610      	mov	r0, r2
 800b728:	9105      	str	r1, [sp, #20]
 800b72a:	9204      	str	r2, [sp, #16]
 800b72c:	f7ff fd69 	bl	800b202 <__hexdig_fun>
 800b730:	2800      	cmp	r0, #0
 800b732:	d14f      	bne.n	800b7d4 <__hexnan+0xe4>
 800b734:	9a04      	ldr	r2, [sp, #16]
 800b736:	9905      	ldr	r1, [sp, #20]
 800b738:	2a20      	cmp	r2, #32
 800b73a:	d818      	bhi.n	800b76e <__hexnan+0x7e>
 800b73c:	9b02      	ldr	r3, [sp, #8]
 800b73e:	459b      	cmp	fp, r3
 800b740:	dd13      	ble.n	800b76a <__hexnan+0x7a>
 800b742:	454c      	cmp	r4, r9
 800b744:	d206      	bcs.n	800b754 <__hexnan+0x64>
 800b746:	2d07      	cmp	r5, #7
 800b748:	dc04      	bgt.n	800b754 <__hexnan+0x64>
 800b74a:	462a      	mov	r2, r5
 800b74c:	4649      	mov	r1, r9
 800b74e:	4620      	mov	r0, r4
 800b750:	f7ff ffa8 	bl	800b6a4 <L_shift>
 800b754:	4544      	cmp	r4, r8
 800b756:	d950      	bls.n	800b7fa <__hexnan+0x10a>
 800b758:	2300      	movs	r3, #0
 800b75a:	f1a4 0904 	sub.w	r9, r4, #4
 800b75e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b762:	461d      	mov	r5, r3
 800b764:	464c      	mov	r4, r9
 800b766:	f8cd b008 	str.w	fp, [sp, #8]
 800b76a:	9903      	ldr	r1, [sp, #12]
 800b76c:	e7d7      	b.n	800b71e <__hexnan+0x2e>
 800b76e:	2a29      	cmp	r2, #41	; 0x29
 800b770:	d156      	bne.n	800b820 <__hexnan+0x130>
 800b772:	3102      	adds	r1, #2
 800b774:	f8ca 1000 	str.w	r1, [sl]
 800b778:	f1bb 0f00 	cmp.w	fp, #0
 800b77c:	d050      	beq.n	800b820 <__hexnan+0x130>
 800b77e:	454c      	cmp	r4, r9
 800b780:	d206      	bcs.n	800b790 <__hexnan+0xa0>
 800b782:	2d07      	cmp	r5, #7
 800b784:	dc04      	bgt.n	800b790 <__hexnan+0xa0>
 800b786:	462a      	mov	r2, r5
 800b788:	4649      	mov	r1, r9
 800b78a:	4620      	mov	r0, r4
 800b78c:	f7ff ff8a 	bl	800b6a4 <L_shift>
 800b790:	4544      	cmp	r4, r8
 800b792:	d934      	bls.n	800b7fe <__hexnan+0x10e>
 800b794:	4623      	mov	r3, r4
 800b796:	f1a8 0204 	sub.w	r2, r8, #4
 800b79a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b79e:	429f      	cmp	r7, r3
 800b7a0:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7a4:	d2f9      	bcs.n	800b79a <__hexnan+0xaa>
 800b7a6:	1b3b      	subs	r3, r7, r4
 800b7a8:	f023 0303 	bic.w	r3, r3, #3
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	3401      	adds	r4, #1
 800b7b0:	3e03      	subs	r6, #3
 800b7b2:	42b4      	cmp	r4, r6
 800b7b4:	bf88      	it	hi
 800b7b6:	2304      	movhi	r3, #4
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	4443      	add	r3, r8
 800b7bc:	f843 2b04 	str.w	r2, [r3], #4
 800b7c0:	429f      	cmp	r7, r3
 800b7c2:	d2fb      	bcs.n	800b7bc <__hexnan+0xcc>
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	b91b      	cbnz	r3, 800b7d0 <__hexnan+0xe0>
 800b7c8:	4547      	cmp	r7, r8
 800b7ca:	d127      	bne.n	800b81c <__hexnan+0x12c>
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	603b      	str	r3, [r7, #0]
 800b7d0:	2005      	movs	r0, #5
 800b7d2:	e026      	b.n	800b822 <__hexnan+0x132>
 800b7d4:	3501      	adds	r5, #1
 800b7d6:	2d08      	cmp	r5, #8
 800b7d8:	f10b 0b01 	add.w	fp, fp, #1
 800b7dc:	dd06      	ble.n	800b7ec <__hexnan+0xfc>
 800b7de:	4544      	cmp	r4, r8
 800b7e0:	d9c3      	bls.n	800b76a <__hexnan+0x7a>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	2501      	movs	r5, #1
 800b7e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7ea:	3c04      	subs	r4, #4
 800b7ec:	6822      	ldr	r2, [r4, #0]
 800b7ee:	f000 000f 	and.w	r0, r0, #15
 800b7f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b7f6:	6022      	str	r2, [r4, #0]
 800b7f8:	e7b7      	b.n	800b76a <__hexnan+0x7a>
 800b7fa:	2508      	movs	r5, #8
 800b7fc:	e7b5      	b.n	800b76a <__hexnan+0x7a>
 800b7fe:	9b01      	ldr	r3, [sp, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d0df      	beq.n	800b7c4 <__hexnan+0xd4>
 800b804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b808:	f1c3 0320 	rsb	r3, r3, #32
 800b80c:	fa22 f303 	lsr.w	r3, r2, r3
 800b810:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b814:	401a      	ands	r2, r3
 800b816:	f846 2c04 	str.w	r2, [r6, #-4]
 800b81a:	e7d3      	b.n	800b7c4 <__hexnan+0xd4>
 800b81c:	3f04      	subs	r7, #4
 800b81e:	e7d1      	b.n	800b7c4 <__hexnan+0xd4>
 800b820:	2004      	movs	r0, #4
 800b822:	b007      	add	sp, #28
 800b824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b828 <_localeconv_r>:
 800b828:	4800      	ldr	r0, [pc, #0]	; (800b82c <_localeconv_r+0x4>)
 800b82a:	4770      	bx	lr
 800b82c:	20000174 	.word	0x20000174

0800b830 <__retarget_lock_init_recursive>:
 800b830:	4770      	bx	lr

0800b832 <__retarget_lock_acquire_recursive>:
 800b832:	4770      	bx	lr

0800b834 <__retarget_lock_release>:
 800b834:	4770      	bx	lr

0800b836 <__retarget_lock_release_recursive>:
 800b836:	4770      	bx	lr

0800b838 <__ascii_mbtowc>:
 800b838:	b082      	sub	sp, #8
 800b83a:	b901      	cbnz	r1, 800b83e <__ascii_mbtowc+0x6>
 800b83c:	a901      	add	r1, sp, #4
 800b83e:	b142      	cbz	r2, 800b852 <__ascii_mbtowc+0x1a>
 800b840:	b14b      	cbz	r3, 800b856 <__ascii_mbtowc+0x1e>
 800b842:	7813      	ldrb	r3, [r2, #0]
 800b844:	600b      	str	r3, [r1, #0]
 800b846:	7812      	ldrb	r2, [r2, #0]
 800b848:	1e10      	subs	r0, r2, #0
 800b84a:	bf18      	it	ne
 800b84c:	2001      	movne	r0, #1
 800b84e:	b002      	add	sp, #8
 800b850:	4770      	bx	lr
 800b852:	4610      	mov	r0, r2
 800b854:	e7fb      	b.n	800b84e <__ascii_mbtowc+0x16>
 800b856:	f06f 0001 	mvn.w	r0, #1
 800b85a:	e7f8      	b.n	800b84e <__ascii_mbtowc+0x16>

0800b85c <memchr>:
 800b85c:	4603      	mov	r3, r0
 800b85e:	b510      	push	{r4, lr}
 800b860:	b2c9      	uxtb	r1, r1
 800b862:	4402      	add	r2, r0
 800b864:	4293      	cmp	r3, r2
 800b866:	4618      	mov	r0, r3
 800b868:	d101      	bne.n	800b86e <memchr+0x12>
 800b86a:	2000      	movs	r0, #0
 800b86c:	e003      	b.n	800b876 <memchr+0x1a>
 800b86e:	7804      	ldrb	r4, [r0, #0]
 800b870:	3301      	adds	r3, #1
 800b872:	428c      	cmp	r4, r1
 800b874:	d1f6      	bne.n	800b864 <memchr+0x8>
 800b876:	bd10      	pop	{r4, pc}

0800b878 <__malloc_lock>:
 800b878:	4801      	ldr	r0, [pc, #4]	; (800b880 <__malloc_lock+0x8>)
 800b87a:	f7ff bfda 	b.w	800b832 <__retarget_lock_acquire_recursive>
 800b87e:	bf00      	nop
 800b880:	20000598 	.word	0x20000598

0800b884 <__malloc_unlock>:
 800b884:	4801      	ldr	r0, [pc, #4]	; (800b88c <__malloc_unlock+0x8>)
 800b886:	f7ff bfd6 	b.w	800b836 <__retarget_lock_release_recursive>
 800b88a:	bf00      	nop
 800b88c:	20000598 	.word	0x20000598

0800b890 <_Balloc>:
 800b890:	b570      	push	{r4, r5, r6, lr}
 800b892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b894:	4604      	mov	r4, r0
 800b896:	460d      	mov	r5, r1
 800b898:	b976      	cbnz	r6, 800b8b8 <_Balloc+0x28>
 800b89a:	2010      	movs	r0, #16
 800b89c:	f7fc ff1c 	bl	80086d8 <malloc>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	6260      	str	r0, [r4, #36]	; 0x24
 800b8a4:	b920      	cbnz	r0, 800b8b0 <_Balloc+0x20>
 800b8a6:	2166      	movs	r1, #102	; 0x66
 800b8a8:	4b17      	ldr	r3, [pc, #92]	; (800b908 <_Balloc+0x78>)
 800b8aa:	4818      	ldr	r0, [pc, #96]	; (800b90c <_Balloc+0x7c>)
 800b8ac:	f000 fe38 	bl	800c520 <__assert_func>
 800b8b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8b4:	6006      	str	r6, [r0, #0]
 800b8b6:	60c6      	str	r6, [r0, #12]
 800b8b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8ba:	68f3      	ldr	r3, [r6, #12]
 800b8bc:	b183      	cbz	r3, 800b8e0 <_Balloc+0x50>
 800b8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8c6:	b9b8      	cbnz	r0, 800b8f8 <_Balloc+0x68>
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b8ce:	1d72      	adds	r2, r6, #5
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	0092      	lsls	r2, r2, #2
 800b8d4:	f000 fc94 	bl	800c200 <_calloc_r>
 800b8d8:	b160      	cbz	r0, 800b8f4 <_Balloc+0x64>
 800b8da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8de:	e00e      	b.n	800b8fe <_Balloc+0x6e>
 800b8e0:	2221      	movs	r2, #33	; 0x21
 800b8e2:	2104      	movs	r1, #4
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f000 fc8b 	bl	800c200 <_calloc_r>
 800b8ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8ec:	60f0      	str	r0, [r6, #12]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1e4      	bne.n	800b8be <_Balloc+0x2e>
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
 800b8f8:	6802      	ldr	r2, [r0, #0]
 800b8fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8fe:	2300      	movs	r3, #0
 800b900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b904:	e7f7      	b.n	800b8f6 <_Balloc+0x66>
 800b906:	bf00      	nop
 800b908:	0800d57e 	.word	0x0800d57e
 800b90c:	0800d684 	.word	0x0800d684

0800b910 <_Bfree>:
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b914:	4605      	mov	r5, r0
 800b916:	460c      	mov	r4, r1
 800b918:	b976      	cbnz	r6, 800b938 <_Bfree+0x28>
 800b91a:	2010      	movs	r0, #16
 800b91c:	f7fc fedc 	bl	80086d8 <malloc>
 800b920:	4602      	mov	r2, r0
 800b922:	6268      	str	r0, [r5, #36]	; 0x24
 800b924:	b920      	cbnz	r0, 800b930 <_Bfree+0x20>
 800b926:	218a      	movs	r1, #138	; 0x8a
 800b928:	4b08      	ldr	r3, [pc, #32]	; (800b94c <_Bfree+0x3c>)
 800b92a:	4809      	ldr	r0, [pc, #36]	; (800b950 <_Bfree+0x40>)
 800b92c:	f000 fdf8 	bl	800c520 <__assert_func>
 800b930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b934:	6006      	str	r6, [r0, #0]
 800b936:	60c6      	str	r6, [r0, #12]
 800b938:	b13c      	cbz	r4, 800b94a <_Bfree+0x3a>
 800b93a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b93c:	6862      	ldr	r2, [r4, #4]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b944:	6021      	str	r1, [r4, #0]
 800b946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b94a:	bd70      	pop	{r4, r5, r6, pc}
 800b94c:	0800d57e 	.word	0x0800d57e
 800b950:	0800d684 	.word	0x0800d684

0800b954 <__multadd>:
 800b954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b958:	4698      	mov	r8, r3
 800b95a:	460c      	mov	r4, r1
 800b95c:	2300      	movs	r3, #0
 800b95e:	690e      	ldr	r6, [r1, #16]
 800b960:	4607      	mov	r7, r0
 800b962:	f101 0014 	add.w	r0, r1, #20
 800b966:	6805      	ldr	r5, [r0, #0]
 800b968:	3301      	adds	r3, #1
 800b96a:	b2a9      	uxth	r1, r5
 800b96c:	fb02 8101 	mla	r1, r2, r1, r8
 800b970:	0c2d      	lsrs	r5, r5, #16
 800b972:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b976:	fb02 c505 	mla	r5, r2, r5, ip
 800b97a:	b289      	uxth	r1, r1
 800b97c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b980:	429e      	cmp	r6, r3
 800b982:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b986:	f840 1b04 	str.w	r1, [r0], #4
 800b98a:	dcec      	bgt.n	800b966 <__multadd+0x12>
 800b98c:	f1b8 0f00 	cmp.w	r8, #0
 800b990:	d022      	beq.n	800b9d8 <__multadd+0x84>
 800b992:	68a3      	ldr	r3, [r4, #8]
 800b994:	42b3      	cmp	r3, r6
 800b996:	dc19      	bgt.n	800b9cc <__multadd+0x78>
 800b998:	6861      	ldr	r1, [r4, #4]
 800b99a:	4638      	mov	r0, r7
 800b99c:	3101      	adds	r1, #1
 800b99e:	f7ff ff77 	bl	800b890 <_Balloc>
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	b928      	cbnz	r0, 800b9b2 <__multadd+0x5e>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	21b5      	movs	r1, #181	; 0xb5
 800b9aa:	4b0d      	ldr	r3, [pc, #52]	; (800b9e0 <__multadd+0x8c>)
 800b9ac:	480d      	ldr	r0, [pc, #52]	; (800b9e4 <__multadd+0x90>)
 800b9ae:	f000 fdb7 	bl	800c520 <__assert_func>
 800b9b2:	6922      	ldr	r2, [r4, #16]
 800b9b4:	f104 010c 	add.w	r1, r4, #12
 800b9b8:	3202      	adds	r2, #2
 800b9ba:	0092      	lsls	r2, r2, #2
 800b9bc:	300c      	adds	r0, #12
 800b9be:	f7fc fe9b 	bl	80086f8 <memcpy>
 800b9c2:	4621      	mov	r1, r4
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f7ff ffa3 	bl	800b910 <_Bfree>
 800b9ca:	462c      	mov	r4, r5
 800b9cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b9d0:	3601      	adds	r6, #1
 800b9d2:	f8c3 8014 	str.w	r8, [r3, #20]
 800b9d6:	6126      	str	r6, [r4, #16]
 800b9d8:	4620      	mov	r0, r4
 800b9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9de:	bf00      	nop
 800b9e0:	0800d5f4 	.word	0x0800d5f4
 800b9e4:	0800d684 	.word	0x0800d684

0800b9e8 <__s2b>:
 800b9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9ec:	4615      	mov	r5, r2
 800b9ee:	2209      	movs	r2, #9
 800b9f0:	461f      	mov	r7, r3
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	460c      	mov	r4, r1
 800b9f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	2100      	movs	r1, #0
 800ba00:	429a      	cmp	r2, r3
 800ba02:	db09      	blt.n	800ba18 <__s2b+0x30>
 800ba04:	4630      	mov	r0, r6
 800ba06:	f7ff ff43 	bl	800b890 <_Balloc>
 800ba0a:	b940      	cbnz	r0, 800ba1e <__s2b+0x36>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	21ce      	movs	r1, #206	; 0xce
 800ba10:	4b18      	ldr	r3, [pc, #96]	; (800ba74 <__s2b+0x8c>)
 800ba12:	4819      	ldr	r0, [pc, #100]	; (800ba78 <__s2b+0x90>)
 800ba14:	f000 fd84 	bl	800c520 <__assert_func>
 800ba18:	0052      	lsls	r2, r2, #1
 800ba1a:	3101      	adds	r1, #1
 800ba1c:	e7f0      	b.n	800ba00 <__s2b+0x18>
 800ba1e:	9b08      	ldr	r3, [sp, #32]
 800ba20:	2d09      	cmp	r5, #9
 800ba22:	6143      	str	r3, [r0, #20]
 800ba24:	f04f 0301 	mov.w	r3, #1
 800ba28:	6103      	str	r3, [r0, #16]
 800ba2a:	dd16      	ble.n	800ba5a <__s2b+0x72>
 800ba2c:	f104 0909 	add.w	r9, r4, #9
 800ba30:	46c8      	mov	r8, r9
 800ba32:	442c      	add	r4, r5
 800ba34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba38:	4601      	mov	r1, r0
 800ba3a:	220a      	movs	r2, #10
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	3b30      	subs	r3, #48	; 0x30
 800ba40:	f7ff ff88 	bl	800b954 <__multadd>
 800ba44:	45a0      	cmp	r8, r4
 800ba46:	d1f5      	bne.n	800ba34 <__s2b+0x4c>
 800ba48:	f1a5 0408 	sub.w	r4, r5, #8
 800ba4c:	444c      	add	r4, r9
 800ba4e:	1b2d      	subs	r5, r5, r4
 800ba50:	1963      	adds	r3, r4, r5
 800ba52:	42bb      	cmp	r3, r7
 800ba54:	db04      	blt.n	800ba60 <__s2b+0x78>
 800ba56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba5a:	2509      	movs	r5, #9
 800ba5c:	340a      	adds	r4, #10
 800ba5e:	e7f6      	b.n	800ba4e <__s2b+0x66>
 800ba60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba64:	4601      	mov	r1, r0
 800ba66:	220a      	movs	r2, #10
 800ba68:	4630      	mov	r0, r6
 800ba6a:	3b30      	subs	r3, #48	; 0x30
 800ba6c:	f7ff ff72 	bl	800b954 <__multadd>
 800ba70:	e7ee      	b.n	800ba50 <__s2b+0x68>
 800ba72:	bf00      	nop
 800ba74:	0800d5f4 	.word	0x0800d5f4
 800ba78:	0800d684 	.word	0x0800d684

0800ba7c <__hi0bits>:
 800ba7c:	0c02      	lsrs	r2, r0, #16
 800ba7e:	0412      	lsls	r2, r2, #16
 800ba80:	4603      	mov	r3, r0
 800ba82:	b9ca      	cbnz	r2, 800bab8 <__hi0bits+0x3c>
 800ba84:	0403      	lsls	r3, r0, #16
 800ba86:	2010      	movs	r0, #16
 800ba88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ba8c:	bf04      	itt	eq
 800ba8e:	021b      	lsleq	r3, r3, #8
 800ba90:	3008      	addeq	r0, #8
 800ba92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ba96:	bf04      	itt	eq
 800ba98:	011b      	lsleq	r3, r3, #4
 800ba9a:	3004      	addeq	r0, #4
 800ba9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800baa0:	bf04      	itt	eq
 800baa2:	009b      	lsleq	r3, r3, #2
 800baa4:	3002      	addeq	r0, #2
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	db05      	blt.n	800bab6 <__hi0bits+0x3a>
 800baaa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800baae:	f100 0001 	add.w	r0, r0, #1
 800bab2:	bf08      	it	eq
 800bab4:	2020      	moveq	r0, #32
 800bab6:	4770      	bx	lr
 800bab8:	2000      	movs	r0, #0
 800baba:	e7e5      	b.n	800ba88 <__hi0bits+0xc>

0800babc <__lo0bits>:
 800babc:	6803      	ldr	r3, [r0, #0]
 800babe:	4602      	mov	r2, r0
 800bac0:	f013 0007 	ands.w	r0, r3, #7
 800bac4:	d00b      	beq.n	800bade <__lo0bits+0x22>
 800bac6:	07d9      	lsls	r1, r3, #31
 800bac8:	d422      	bmi.n	800bb10 <__lo0bits+0x54>
 800baca:	0798      	lsls	r0, r3, #30
 800bacc:	bf49      	itett	mi
 800bace:	085b      	lsrmi	r3, r3, #1
 800bad0:	089b      	lsrpl	r3, r3, #2
 800bad2:	2001      	movmi	r0, #1
 800bad4:	6013      	strmi	r3, [r2, #0]
 800bad6:	bf5c      	itt	pl
 800bad8:	2002      	movpl	r0, #2
 800bada:	6013      	strpl	r3, [r2, #0]
 800badc:	4770      	bx	lr
 800bade:	b299      	uxth	r1, r3
 800bae0:	b909      	cbnz	r1, 800bae6 <__lo0bits+0x2a>
 800bae2:	2010      	movs	r0, #16
 800bae4:	0c1b      	lsrs	r3, r3, #16
 800bae6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800baea:	bf04      	itt	eq
 800baec:	0a1b      	lsreq	r3, r3, #8
 800baee:	3008      	addeq	r0, #8
 800baf0:	0719      	lsls	r1, r3, #28
 800baf2:	bf04      	itt	eq
 800baf4:	091b      	lsreq	r3, r3, #4
 800baf6:	3004      	addeq	r0, #4
 800baf8:	0799      	lsls	r1, r3, #30
 800bafa:	bf04      	itt	eq
 800bafc:	089b      	lsreq	r3, r3, #2
 800bafe:	3002      	addeq	r0, #2
 800bb00:	07d9      	lsls	r1, r3, #31
 800bb02:	d403      	bmi.n	800bb0c <__lo0bits+0x50>
 800bb04:	085b      	lsrs	r3, r3, #1
 800bb06:	f100 0001 	add.w	r0, r0, #1
 800bb0a:	d003      	beq.n	800bb14 <__lo0bits+0x58>
 800bb0c:	6013      	str	r3, [r2, #0]
 800bb0e:	4770      	bx	lr
 800bb10:	2000      	movs	r0, #0
 800bb12:	4770      	bx	lr
 800bb14:	2020      	movs	r0, #32
 800bb16:	4770      	bx	lr

0800bb18 <__i2b>:
 800bb18:	b510      	push	{r4, lr}
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	f7ff feb7 	bl	800b890 <_Balloc>
 800bb22:	4602      	mov	r2, r0
 800bb24:	b928      	cbnz	r0, 800bb32 <__i2b+0x1a>
 800bb26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb2a:	4b04      	ldr	r3, [pc, #16]	; (800bb3c <__i2b+0x24>)
 800bb2c:	4804      	ldr	r0, [pc, #16]	; (800bb40 <__i2b+0x28>)
 800bb2e:	f000 fcf7 	bl	800c520 <__assert_func>
 800bb32:	2301      	movs	r3, #1
 800bb34:	6144      	str	r4, [r0, #20]
 800bb36:	6103      	str	r3, [r0, #16]
 800bb38:	bd10      	pop	{r4, pc}
 800bb3a:	bf00      	nop
 800bb3c:	0800d5f4 	.word	0x0800d5f4
 800bb40:	0800d684 	.word	0x0800d684

0800bb44 <__multiply>:
 800bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	4614      	mov	r4, r2
 800bb4a:	690a      	ldr	r2, [r1, #16]
 800bb4c:	6923      	ldr	r3, [r4, #16]
 800bb4e:	460d      	mov	r5, r1
 800bb50:	429a      	cmp	r2, r3
 800bb52:	bfbe      	ittt	lt
 800bb54:	460b      	movlt	r3, r1
 800bb56:	4625      	movlt	r5, r4
 800bb58:	461c      	movlt	r4, r3
 800bb5a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bb5e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bb62:	68ab      	ldr	r3, [r5, #8]
 800bb64:	6869      	ldr	r1, [r5, #4]
 800bb66:	eb0a 0709 	add.w	r7, sl, r9
 800bb6a:	42bb      	cmp	r3, r7
 800bb6c:	b085      	sub	sp, #20
 800bb6e:	bfb8      	it	lt
 800bb70:	3101      	addlt	r1, #1
 800bb72:	f7ff fe8d 	bl	800b890 <_Balloc>
 800bb76:	b930      	cbnz	r0, 800bb86 <__multiply+0x42>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	f240 115d 	movw	r1, #349	; 0x15d
 800bb7e:	4b41      	ldr	r3, [pc, #260]	; (800bc84 <__multiply+0x140>)
 800bb80:	4841      	ldr	r0, [pc, #260]	; (800bc88 <__multiply+0x144>)
 800bb82:	f000 fccd 	bl	800c520 <__assert_func>
 800bb86:	f100 0614 	add.w	r6, r0, #20
 800bb8a:	4633      	mov	r3, r6
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bb92:	4543      	cmp	r3, r8
 800bb94:	d31e      	bcc.n	800bbd4 <__multiply+0x90>
 800bb96:	f105 0c14 	add.w	ip, r5, #20
 800bb9a:	f104 0314 	add.w	r3, r4, #20
 800bb9e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bba2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bba6:	9202      	str	r2, [sp, #8]
 800bba8:	ebac 0205 	sub.w	r2, ip, r5
 800bbac:	3a15      	subs	r2, #21
 800bbae:	f022 0203 	bic.w	r2, r2, #3
 800bbb2:	3204      	adds	r2, #4
 800bbb4:	f105 0115 	add.w	r1, r5, #21
 800bbb8:	458c      	cmp	ip, r1
 800bbba:	bf38      	it	cc
 800bbbc:	2204      	movcc	r2, #4
 800bbbe:	9201      	str	r2, [sp, #4]
 800bbc0:	9a02      	ldr	r2, [sp, #8]
 800bbc2:	9303      	str	r3, [sp, #12]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d808      	bhi.n	800bbda <__multiply+0x96>
 800bbc8:	2f00      	cmp	r7, #0
 800bbca:	dc55      	bgt.n	800bc78 <__multiply+0x134>
 800bbcc:	6107      	str	r7, [r0, #16]
 800bbce:	b005      	add	sp, #20
 800bbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd4:	f843 2b04 	str.w	r2, [r3], #4
 800bbd8:	e7db      	b.n	800bb92 <__multiply+0x4e>
 800bbda:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbde:	f1ba 0f00 	cmp.w	sl, #0
 800bbe2:	d020      	beq.n	800bc26 <__multiply+0xe2>
 800bbe4:	46b1      	mov	r9, r6
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f105 0e14 	add.w	lr, r5, #20
 800bbec:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bbf0:	f8d9 b000 	ldr.w	fp, [r9]
 800bbf4:	b2a1      	uxth	r1, r4
 800bbf6:	fa1f fb8b 	uxth.w	fp, fp
 800bbfa:	fb0a b101 	mla	r1, sl, r1, fp
 800bbfe:	4411      	add	r1, r2
 800bc00:	f8d9 2000 	ldr.w	r2, [r9]
 800bc04:	0c24      	lsrs	r4, r4, #16
 800bc06:	0c12      	lsrs	r2, r2, #16
 800bc08:	fb0a 2404 	mla	r4, sl, r4, r2
 800bc0c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bc10:	b289      	uxth	r1, r1
 800bc12:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bc16:	45f4      	cmp	ip, lr
 800bc18:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bc1c:	f849 1b04 	str.w	r1, [r9], #4
 800bc20:	d8e4      	bhi.n	800bbec <__multiply+0xa8>
 800bc22:	9901      	ldr	r1, [sp, #4]
 800bc24:	5072      	str	r2, [r6, r1]
 800bc26:	9a03      	ldr	r2, [sp, #12]
 800bc28:	3304      	adds	r3, #4
 800bc2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc2e:	f1b9 0f00 	cmp.w	r9, #0
 800bc32:	d01f      	beq.n	800bc74 <__multiply+0x130>
 800bc34:	46b6      	mov	lr, r6
 800bc36:	f04f 0a00 	mov.w	sl, #0
 800bc3a:	6834      	ldr	r4, [r6, #0]
 800bc3c:	f105 0114 	add.w	r1, r5, #20
 800bc40:	880a      	ldrh	r2, [r1, #0]
 800bc42:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bc46:	b2a4      	uxth	r4, r4
 800bc48:	fb09 b202 	mla	r2, r9, r2, fp
 800bc4c:	4492      	add	sl, r2
 800bc4e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bc52:	f84e 4b04 	str.w	r4, [lr], #4
 800bc56:	f851 4b04 	ldr.w	r4, [r1], #4
 800bc5a:	f8be 2000 	ldrh.w	r2, [lr]
 800bc5e:	0c24      	lsrs	r4, r4, #16
 800bc60:	fb09 2404 	mla	r4, r9, r4, r2
 800bc64:	458c      	cmp	ip, r1
 800bc66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bc6a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bc6e:	d8e7      	bhi.n	800bc40 <__multiply+0xfc>
 800bc70:	9a01      	ldr	r2, [sp, #4]
 800bc72:	50b4      	str	r4, [r6, r2]
 800bc74:	3604      	adds	r6, #4
 800bc76:	e7a3      	b.n	800bbc0 <__multiply+0x7c>
 800bc78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1a5      	bne.n	800bbcc <__multiply+0x88>
 800bc80:	3f01      	subs	r7, #1
 800bc82:	e7a1      	b.n	800bbc8 <__multiply+0x84>
 800bc84:	0800d5f4 	.word	0x0800d5f4
 800bc88:	0800d684 	.word	0x0800d684

0800bc8c <__pow5mult>:
 800bc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc90:	4615      	mov	r5, r2
 800bc92:	f012 0203 	ands.w	r2, r2, #3
 800bc96:	4606      	mov	r6, r0
 800bc98:	460f      	mov	r7, r1
 800bc9a:	d007      	beq.n	800bcac <__pow5mult+0x20>
 800bc9c:	4c25      	ldr	r4, [pc, #148]	; (800bd34 <__pow5mult+0xa8>)
 800bc9e:	3a01      	subs	r2, #1
 800bca0:	2300      	movs	r3, #0
 800bca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bca6:	f7ff fe55 	bl	800b954 <__multadd>
 800bcaa:	4607      	mov	r7, r0
 800bcac:	10ad      	asrs	r5, r5, #2
 800bcae:	d03d      	beq.n	800bd2c <__pow5mult+0xa0>
 800bcb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bcb2:	b97c      	cbnz	r4, 800bcd4 <__pow5mult+0x48>
 800bcb4:	2010      	movs	r0, #16
 800bcb6:	f7fc fd0f 	bl	80086d8 <malloc>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	6270      	str	r0, [r6, #36]	; 0x24
 800bcbe:	b928      	cbnz	r0, 800bccc <__pow5mult+0x40>
 800bcc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bcc4:	4b1c      	ldr	r3, [pc, #112]	; (800bd38 <__pow5mult+0xac>)
 800bcc6:	481d      	ldr	r0, [pc, #116]	; (800bd3c <__pow5mult+0xb0>)
 800bcc8:	f000 fc2a 	bl	800c520 <__assert_func>
 800bccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcd0:	6004      	str	r4, [r0, #0]
 800bcd2:	60c4      	str	r4, [r0, #12]
 800bcd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bcd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcdc:	b94c      	cbnz	r4, 800bcf2 <__pow5mult+0x66>
 800bcde:	f240 2171 	movw	r1, #625	; 0x271
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7ff ff18 	bl	800bb18 <__i2b>
 800bce8:	2300      	movs	r3, #0
 800bcea:	4604      	mov	r4, r0
 800bcec:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcf0:	6003      	str	r3, [r0, #0]
 800bcf2:	f04f 0900 	mov.w	r9, #0
 800bcf6:	07eb      	lsls	r3, r5, #31
 800bcf8:	d50a      	bpl.n	800bd10 <__pow5mult+0x84>
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f7ff ff20 	bl	800bb44 <__multiply>
 800bd04:	4680      	mov	r8, r0
 800bd06:	4639      	mov	r1, r7
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7ff fe01 	bl	800b910 <_Bfree>
 800bd0e:	4647      	mov	r7, r8
 800bd10:	106d      	asrs	r5, r5, #1
 800bd12:	d00b      	beq.n	800bd2c <__pow5mult+0xa0>
 800bd14:	6820      	ldr	r0, [r4, #0]
 800bd16:	b938      	cbnz	r0, 800bd28 <__pow5mult+0x9c>
 800bd18:	4622      	mov	r2, r4
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7ff ff11 	bl	800bb44 <__multiply>
 800bd22:	6020      	str	r0, [r4, #0]
 800bd24:	f8c0 9000 	str.w	r9, [r0]
 800bd28:	4604      	mov	r4, r0
 800bd2a:	e7e4      	b.n	800bcf6 <__pow5mult+0x6a>
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd32:	bf00      	nop
 800bd34:	0800d7d8 	.word	0x0800d7d8
 800bd38:	0800d57e 	.word	0x0800d57e
 800bd3c:	0800d684 	.word	0x0800d684

0800bd40 <__lshift>:
 800bd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd44:	460c      	mov	r4, r1
 800bd46:	4607      	mov	r7, r0
 800bd48:	4691      	mov	r9, r2
 800bd4a:	6923      	ldr	r3, [r4, #16]
 800bd4c:	6849      	ldr	r1, [r1, #4]
 800bd4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd52:	68a3      	ldr	r3, [r4, #8]
 800bd54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd58:	f108 0601 	add.w	r6, r8, #1
 800bd5c:	42b3      	cmp	r3, r6
 800bd5e:	db0b      	blt.n	800bd78 <__lshift+0x38>
 800bd60:	4638      	mov	r0, r7
 800bd62:	f7ff fd95 	bl	800b890 <_Balloc>
 800bd66:	4605      	mov	r5, r0
 800bd68:	b948      	cbnz	r0, 800bd7e <__lshift+0x3e>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bd70:	4b27      	ldr	r3, [pc, #156]	; (800be10 <__lshift+0xd0>)
 800bd72:	4828      	ldr	r0, [pc, #160]	; (800be14 <__lshift+0xd4>)
 800bd74:	f000 fbd4 	bl	800c520 <__assert_func>
 800bd78:	3101      	adds	r1, #1
 800bd7a:	005b      	lsls	r3, r3, #1
 800bd7c:	e7ee      	b.n	800bd5c <__lshift+0x1c>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f100 0114 	add.w	r1, r0, #20
 800bd84:	f100 0210 	add.w	r2, r0, #16
 800bd88:	4618      	mov	r0, r3
 800bd8a:	4553      	cmp	r3, sl
 800bd8c:	db33      	blt.n	800bdf6 <__lshift+0xb6>
 800bd8e:	6920      	ldr	r0, [r4, #16]
 800bd90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd94:	f104 0314 	add.w	r3, r4, #20
 800bd98:	f019 091f 	ands.w	r9, r9, #31
 800bd9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bda0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bda4:	d02b      	beq.n	800bdfe <__lshift+0xbe>
 800bda6:	468a      	mov	sl, r1
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f1c9 0e20 	rsb	lr, r9, #32
 800bdae:	6818      	ldr	r0, [r3, #0]
 800bdb0:	fa00 f009 	lsl.w	r0, r0, r9
 800bdb4:	4302      	orrs	r2, r0
 800bdb6:	f84a 2b04 	str.w	r2, [sl], #4
 800bdba:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdbe:	459c      	cmp	ip, r3
 800bdc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdc4:	d8f3      	bhi.n	800bdae <__lshift+0x6e>
 800bdc6:	ebac 0304 	sub.w	r3, ip, r4
 800bdca:	3b15      	subs	r3, #21
 800bdcc:	f023 0303 	bic.w	r3, r3, #3
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	f104 0015 	add.w	r0, r4, #21
 800bdd6:	4584      	cmp	ip, r0
 800bdd8:	bf38      	it	cc
 800bdda:	2304      	movcc	r3, #4
 800bddc:	50ca      	str	r2, [r1, r3]
 800bdde:	b10a      	cbz	r2, 800bde4 <__lshift+0xa4>
 800bde0:	f108 0602 	add.w	r6, r8, #2
 800bde4:	3e01      	subs	r6, #1
 800bde6:	4638      	mov	r0, r7
 800bde8:	4621      	mov	r1, r4
 800bdea:	612e      	str	r6, [r5, #16]
 800bdec:	f7ff fd90 	bl	800b910 <_Bfree>
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	e7c5      	b.n	800bd8a <__lshift+0x4a>
 800bdfe:	3904      	subs	r1, #4
 800be00:	f853 2b04 	ldr.w	r2, [r3], #4
 800be04:	459c      	cmp	ip, r3
 800be06:	f841 2f04 	str.w	r2, [r1, #4]!
 800be0a:	d8f9      	bhi.n	800be00 <__lshift+0xc0>
 800be0c:	e7ea      	b.n	800bde4 <__lshift+0xa4>
 800be0e:	bf00      	nop
 800be10:	0800d5f4 	.word	0x0800d5f4
 800be14:	0800d684 	.word	0x0800d684

0800be18 <__mcmp>:
 800be18:	4603      	mov	r3, r0
 800be1a:	690a      	ldr	r2, [r1, #16]
 800be1c:	6900      	ldr	r0, [r0, #16]
 800be1e:	b530      	push	{r4, r5, lr}
 800be20:	1a80      	subs	r0, r0, r2
 800be22:	d10d      	bne.n	800be40 <__mcmp+0x28>
 800be24:	3314      	adds	r3, #20
 800be26:	3114      	adds	r1, #20
 800be28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be38:	4295      	cmp	r5, r2
 800be3a:	d002      	beq.n	800be42 <__mcmp+0x2a>
 800be3c:	d304      	bcc.n	800be48 <__mcmp+0x30>
 800be3e:	2001      	movs	r0, #1
 800be40:	bd30      	pop	{r4, r5, pc}
 800be42:	42a3      	cmp	r3, r4
 800be44:	d3f4      	bcc.n	800be30 <__mcmp+0x18>
 800be46:	e7fb      	b.n	800be40 <__mcmp+0x28>
 800be48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be4c:	e7f8      	b.n	800be40 <__mcmp+0x28>
	...

0800be50 <__mdiff>:
 800be50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be54:	460c      	mov	r4, r1
 800be56:	4606      	mov	r6, r0
 800be58:	4611      	mov	r1, r2
 800be5a:	4620      	mov	r0, r4
 800be5c:	4692      	mov	sl, r2
 800be5e:	f7ff ffdb 	bl	800be18 <__mcmp>
 800be62:	1e05      	subs	r5, r0, #0
 800be64:	d111      	bne.n	800be8a <__mdiff+0x3a>
 800be66:	4629      	mov	r1, r5
 800be68:	4630      	mov	r0, r6
 800be6a:	f7ff fd11 	bl	800b890 <_Balloc>
 800be6e:	4602      	mov	r2, r0
 800be70:	b928      	cbnz	r0, 800be7e <__mdiff+0x2e>
 800be72:	f240 2132 	movw	r1, #562	; 0x232
 800be76:	4b3c      	ldr	r3, [pc, #240]	; (800bf68 <__mdiff+0x118>)
 800be78:	483c      	ldr	r0, [pc, #240]	; (800bf6c <__mdiff+0x11c>)
 800be7a:	f000 fb51 	bl	800c520 <__assert_func>
 800be7e:	2301      	movs	r3, #1
 800be80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be84:	4610      	mov	r0, r2
 800be86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8a:	bfa4      	itt	ge
 800be8c:	4653      	movge	r3, sl
 800be8e:	46a2      	movge	sl, r4
 800be90:	4630      	mov	r0, r6
 800be92:	f8da 1004 	ldr.w	r1, [sl, #4]
 800be96:	bfa6      	itte	ge
 800be98:	461c      	movge	r4, r3
 800be9a:	2500      	movge	r5, #0
 800be9c:	2501      	movlt	r5, #1
 800be9e:	f7ff fcf7 	bl	800b890 <_Balloc>
 800bea2:	4602      	mov	r2, r0
 800bea4:	b918      	cbnz	r0, 800beae <__mdiff+0x5e>
 800bea6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800beaa:	4b2f      	ldr	r3, [pc, #188]	; (800bf68 <__mdiff+0x118>)
 800beac:	e7e4      	b.n	800be78 <__mdiff+0x28>
 800beae:	f100 0814 	add.w	r8, r0, #20
 800beb2:	f8da 7010 	ldr.w	r7, [sl, #16]
 800beb6:	60c5      	str	r5, [r0, #12]
 800beb8:	f04f 0c00 	mov.w	ip, #0
 800bebc:	f10a 0514 	add.w	r5, sl, #20
 800bec0:	f10a 0010 	add.w	r0, sl, #16
 800bec4:	46c2      	mov	sl, r8
 800bec6:	6926      	ldr	r6, [r4, #16]
 800bec8:	f104 0914 	add.w	r9, r4, #20
 800becc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bed0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bed4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bed8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bedc:	fa1f f18b 	uxth.w	r1, fp
 800bee0:	4461      	add	r1, ip
 800bee2:	fa1f fc83 	uxth.w	ip, r3
 800bee6:	0c1b      	lsrs	r3, r3, #16
 800bee8:	eba1 010c 	sub.w	r1, r1, ip
 800beec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bef0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bef4:	b289      	uxth	r1, r1
 800bef6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800befa:	454e      	cmp	r6, r9
 800befc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bf00:	f84a 3b04 	str.w	r3, [sl], #4
 800bf04:	d8e6      	bhi.n	800bed4 <__mdiff+0x84>
 800bf06:	1b33      	subs	r3, r6, r4
 800bf08:	3b15      	subs	r3, #21
 800bf0a:	f023 0303 	bic.w	r3, r3, #3
 800bf0e:	3415      	adds	r4, #21
 800bf10:	3304      	adds	r3, #4
 800bf12:	42a6      	cmp	r6, r4
 800bf14:	bf38      	it	cc
 800bf16:	2304      	movcc	r3, #4
 800bf18:	441d      	add	r5, r3
 800bf1a:	4443      	add	r3, r8
 800bf1c:	461e      	mov	r6, r3
 800bf1e:	462c      	mov	r4, r5
 800bf20:	4574      	cmp	r4, lr
 800bf22:	d30e      	bcc.n	800bf42 <__mdiff+0xf2>
 800bf24:	f10e 0103 	add.w	r1, lr, #3
 800bf28:	1b49      	subs	r1, r1, r5
 800bf2a:	f021 0103 	bic.w	r1, r1, #3
 800bf2e:	3d03      	subs	r5, #3
 800bf30:	45ae      	cmp	lr, r5
 800bf32:	bf38      	it	cc
 800bf34:	2100      	movcc	r1, #0
 800bf36:	4419      	add	r1, r3
 800bf38:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bf3c:	b18b      	cbz	r3, 800bf62 <__mdiff+0x112>
 800bf3e:	6117      	str	r7, [r2, #16]
 800bf40:	e7a0      	b.n	800be84 <__mdiff+0x34>
 800bf42:	f854 8b04 	ldr.w	r8, [r4], #4
 800bf46:	fa1f f188 	uxth.w	r1, r8
 800bf4a:	4461      	add	r1, ip
 800bf4c:	1408      	asrs	r0, r1, #16
 800bf4e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bf52:	b289      	uxth	r1, r1
 800bf54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf5c:	f846 1b04 	str.w	r1, [r6], #4
 800bf60:	e7de      	b.n	800bf20 <__mdiff+0xd0>
 800bf62:	3f01      	subs	r7, #1
 800bf64:	e7e8      	b.n	800bf38 <__mdiff+0xe8>
 800bf66:	bf00      	nop
 800bf68:	0800d5f4 	.word	0x0800d5f4
 800bf6c:	0800d684 	.word	0x0800d684

0800bf70 <__ulp>:
 800bf70:	4b11      	ldr	r3, [pc, #68]	; (800bfb8 <__ulp+0x48>)
 800bf72:	400b      	ands	r3, r1
 800bf74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	dd02      	ble.n	800bf82 <__ulp+0x12>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4770      	bx	lr
 800bf82:	425b      	negs	r3, r3
 800bf84:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bf88:	f04f 0000 	mov.w	r0, #0
 800bf8c:	f04f 0100 	mov.w	r1, #0
 800bf90:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf94:	da04      	bge.n	800bfa0 <__ulp+0x30>
 800bf96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf9a:	fa43 f102 	asr.w	r1, r3, r2
 800bf9e:	4770      	bx	lr
 800bfa0:	f1a2 0314 	sub.w	r3, r2, #20
 800bfa4:	2b1e      	cmp	r3, #30
 800bfa6:	bfd6      	itet	le
 800bfa8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bfac:	2301      	movgt	r3, #1
 800bfae:	fa22 f303 	lsrle.w	r3, r2, r3
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	7ff00000 	.word	0x7ff00000

0800bfbc <__b2d>:
 800bfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc0:	6907      	ldr	r7, [r0, #16]
 800bfc2:	f100 0914 	add.w	r9, r0, #20
 800bfc6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bfca:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bfce:	f1a7 0804 	sub.w	r8, r7, #4
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	f7ff fd52 	bl	800ba7c <__hi0bits>
 800bfd8:	f1c0 0320 	rsb	r3, r0, #32
 800bfdc:	280a      	cmp	r0, #10
 800bfde:	600b      	str	r3, [r1, #0]
 800bfe0:	491f      	ldr	r1, [pc, #124]	; (800c060 <__b2d+0xa4>)
 800bfe2:	dc17      	bgt.n	800c014 <__b2d+0x58>
 800bfe4:	45c1      	cmp	r9, r8
 800bfe6:	bf28      	it	cs
 800bfe8:	2200      	movcs	r2, #0
 800bfea:	f1c0 0c0b 	rsb	ip, r0, #11
 800bfee:	fa26 f30c 	lsr.w	r3, r6, ip
 800bff2:	bf38      	it	cc
 800bff4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bff8:	ea43 0501 	orr.w	r5, r3, r1
 800bffc:	f100 0315 	add.w	r3, r0, #21
 800c000:	fa06 f303 	lsl.w	r3, r6, r3
 800c004:	fa22 f20c 	lsr.w	r2, r2, ip
 800c008:	ea43 0402 	orr.w	r4, r3, r2
 800c00c:	4620      	mov	r0, r4
 800c00e:	4629      	mov	r1, r5
 800c010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c014:	45c1      	cmp	r9, r8
 800c016:	bf2e      	itee	cs
 800c018:	2200      	movcs	r2, #0
 800c01a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c01e:	f1a7 0808 	subcc.w	r8, r7, #8
 800c022:	f1b0 030b 	subs.w	r3, r0, #11
 800c026:	d016      	beq.n	800c056 <__b2d+0x9a>
 800c028:	f1c3 0720 	rsb	r7, r3, #32
 800c02c:	fa22 f107 	lsr.w	r1, r2, r7
 800c030:	45c8      	cmp	r8, r9
 800c032:	fa06 f603 	lsl.w	r6, r6, r3
 800c036:	ea46 0601 	orr.w	r6, r6, r1
 800c03a:	bf94      	ite	ls
 800c03c:	2100      	movls	r1, #0
 800c03e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c042:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c046:	fa02 f003 	lsl.w	r0, r2, r3
 800c04a:	40f9      	lsrs	r1, r7
 800c04c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c050:	ea40 0401 	orr.w	r4, r0, r1
 800c054:	e7da      	b.n	800c00c <__b2d+0x50>
 800c056:	4614      	mov	r4, r2
 800c058:	ea46 0501 	orr.w	r5, r6, r1
 800c05c:	e7d6      	b.n	800c00c <__b2d+0x50>
 800c05e:	bf00      	nop
 800c060:	3ff00000 	.word	0x3ff00000

0800c064 <__d2b>:
 800c064:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c068:	2101      	movs	r1, #1
 800c06a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c06e:	4690      	mov	r8, r2
 800c070:	461d      	mov	r5, r3
 800c072:	f7ff fc0d 	bl	800b890 <_Balloc>
 800c076:	4604      	mov	r4, r0
 800c078:	b930      	cbnz	r0, 800c088 <__d2b+0x24>
 800c07a:	4602      	mov	r2, r0
 800c07c:	f240 310a 	movw	r1, #778	; 0x30a
 800c080:	4b24      	ldr	r3, [pc, #144]	; (800c114 <__d2b+0xb0>)
 800c082:	4825      	ldr	r0, [pc, #148]	; (800c118 <__d2b+0xb4>)
 800c084:	f000 fa4c 	bl	800c520 <__assert_func>
 800c088:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c08c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c090:	bb2d      	cbnz	r5, 800c0de <__d2b+0x7a>
 800c092:	9301      	str	r3, [sp, #4]
 800c094:	f1b8 0300 	subs.w	r3, r8, #0
 800c098:	d026      	beq.n	800c0e8 <__d2b+0x84>
 800c09a:	4668      	mov	r0, sp
 800c09c:	9300      	str	r3, [sp, #0]
 800c09e:	f7ff fd0d 	bl	800babc <__lo0bits>
 800c0a2:	9900      	ldr	r1, [sp, #0]
 800c0a4:	b1f0      	cbz	r0, 800c0e4 <__d2b+0x80>
 800c0a6:	9a01      	ldr	r2, [sp, #4]
 800c0a8:	f1c0 0320 	rsb	r3, r0, #32
 800c0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b0:	430b      	orrs	r3, r1
 800c0b2:	40c2      	lsrs	r2, r0
 800c0b4:	6163      	str	r3, [r4, #20]
 800c0b6:	9201      	str	r2, [sp, #4]
 800c0b8:	9b01      	ldr	r3, [sp, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	bf14      	ite	ne
 800c0be:	2102      	movne	r1, #2
 800c0c0:	2101      	moveq	r1, #1
 800c0c2:	61a3      	str	r3, [r4, #24]
 800c0c4:	6121      	str	r1, [r4, #16]
 800c0c6:	b1c5      	cbz	r5, 800c0fa <__d2b+0x96>
 800c0c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0cc:	4405      	add	r5, r0
 800c0ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0d2:	603d      	str	r5, [r7, #0]
 800c0d4:	6030      	str	r0, [r6, #0]
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	b002      	add	sp, #8
 800c0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0e2:	e7d6      	b.n	800c092 <__d2b+0x2e>
 800c0e4:	6161      	str	r1, [r4, #20]
 800c0e6:	e7e7      	b.n	800c0b8 <__d2b+0x54>
 800c0e8:	a801      	add	r0, sp, #4
 800c0ea:	f7ff fce7 	bl	800babc <__lo0bits>
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	9b01      	ldr	r3, [sp, #4]
 800c0f2:	6121      	str	r1, [r4, #16]
 800c0f4:	6163      	str	r3, [r4, #20]
 800c0f6:	3020      	adds	r0, #32
 800c0f8:	e7e5      	b.n	800c0c6 <__d2b+0x62>
 800c0fa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c0fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c102:	6038      	str	r0, [r7, #0]
 800c104:	6918      	ldr	r0, [r3, #16]
 800c106:	f7ff fcb9 	bl	800ba7c <__hi0bits>
 800c10a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c10e:	6031      	str	r1, [r6, #0]
 800c110:	e7e1      	b.n	800c0d6 <__d2b+0x72>
 800c112:	bf00      	nop
 800c114:	0800d5f4 	.word	0x0800d5f4
 800c118:	0800d684 	.word	0x0800d684

0800c11c <__ratio>:
 800c11c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	4688      	mov	r8, r1
 800c122:	4669      	mov	r1, sp
 800c124:	4681      	mov	r9, r0
 800c126:	f7ff ff49 	bl	800bfbc <__b2d>
 800c12a:	460f      	mov	r7, r1
 800c12c:	4604      	mov	r4, r0
 800c12e:	460d      	mov	r5, r1
 800c130:	4640      	mov	r0, r8
 800c132:	a901      	add	r1, sp, #4
 800c134:	f7ff ff42 	bl	800bfbc <__b2d>
 800c138:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c13c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c140:	468b      	mov	fp, r1
 800c142:	eba3 0c02 	sub.w	ip, r3, r2
 800c146:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c14a:	1a9b      	subs	r3, r3, r2
 800c14c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c150:	2b00      	cmp	r3, #0
 800c152:	bfd5      	itete	le
 800c154:	460a      	movle	r2, r1
 800c156:	462a      	movgt	r2, r5
 800c158:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c15c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c160:	bfd8      	it	le
 800c162:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c166:	465b      	mov	r3, fp
 800c168:	4602      	mov	r2, r0
 800c16a:	4639      	mov	r1, r7
 800c16c:	4620      	mov	r0, r4
 800c16e:	f7f4 fadd 	bl	800072c <__aeabi_ddiv>
 800c172:	b003      	add	sp, #12
 800c174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c178 <__copybits>:
 800c178:	3901      	subs	r1, #1
 800c17a:	b570      	push	{r4, r5, r6, lr}
 800c17c:	1149      	asrs	r1, r1, #5
 800c17e:	6914      	ldr	r4, [r2, #16]
 800c180:	3101      	adds	r1, #1
 800c182:	f102 0314 	add.w	r3, r2, #20
 800c186:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c18a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c18e:	1f05      	subs	r5, r0, #4
 800c190:	42a3      	cmp	r3, r4
 800c192:	d30c      	bcc.n	800c1ae <__copybits+0x36>
 800c194:	1aa3      	subs	r3, r4, r2
 800c196:	3b11      	subs	r3, #17
 800c198:	f023 0303 	bic.w	r3, r3, #3
 800c19c:	3211      	adds	r2, #17
 800c19e:	42a2      	cmp	r2, r4
 800c1a0:	bf88      	it	hi
 800c1a2:	2300      	movhi	r3, #0
 800c1a4:	4418      	add	r0, r3
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	4288      	cmp	r0, r1
 800c1aa:	d305      	bcc.n	800c1b8 <__copybits+0x40>
 800c1ac:	bd70      	pop	{r4, r5, r6, pc}
 800c1ae:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1b2:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1b6:	e7eb      	b.n	800c190 <__copybits+0x18>
 800c1b8:	f840 3b04 	str.w	r3, [r0], #4
 800c1bc:	e7f4      	b.n	800c1a8 <__copybits+0x30>

0800c1be <__any_on>:
 800c1be:	f100 0214 	add.w	r2, r0, #20
 800c1c2:	6900      	ldr	r0, [r0, #16]
 800c1c4:	114b      	asrs	r3, r1, #5
 800c1c6:	4298      	cmp	r0, r3
 800c1c8:	b510      	push	{r4, lr}
 800c1ca:	db11      	blt.n	800c1f0 <__any_on+0x32>
 800c1cc:	dd0a      	ble.n	800c1e4 <__any_on+0x26>
 800c1ce:	f011 011f 	ands.w	r1, r1, #31
 800c1d2:	d007      	beq.n	800c1e4 <__any_on+0x26>
 800c1d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1d8:	fa24 f001 	lsr.w	r0, r4, r1
 800c1dc:	fa00 f101 	lsl.w	r1, r0, r1
 800c1e0:	428c      	cmp	r4, r1
 800c1e2:	d10b      	bne.n	800c1fc <__any_on+0x3e>
 800c1e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d803      	bhi.n	800c1f4 <__any_on+0x36>
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	bd10      	pop	{r4, pc}
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	e7f7      	b.n	800c1e4 <__any_on+0x26>
 800c1f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1f8:	2900      	cmp	r1, #0
 800c1fa:	d0f5      	beq.n	800c1e8 <__any_on+0x2a>
 800c1fc:	2001      	movs	r0, #1
 800c1fe:	e7f6      	b.n	800c1ee <__any_on+0x30>

0800c200 <_calloc_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	fb02 f501 	mul.w	r5, r2, r1
 800c206:	4629      	mov	r1, r5
 800c208:	f7fc fad8 	bl	80087bc <_malloc_r>
 800c20c:	4604      	mov	r4, r0
 800c20e:	b118      	cbz	r0, 800c218 <_calloc_r+0x18>
 800c210:	462a      	mov	r2, r5
 800c212:	2100      	movs	r1, #0
 800c214:	f7fc fa7e 	bl	8008714 <memset>
 800c218:	4620      	mov	r0, r4
 800c21a:	bd38      	pop	{r3, r4, r5, pc}

0800c21c <__ssputs_r>:
 800c21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c220:	688e      	ldr	r6, [r1, #8]
 800c222:	4682      	mov	sl, r0
 800c224:	429e      	cmp	r6, r3
 800c226:	460c      	mov	r4, r1
 800c228:	4690      	mov	r8, r2
 800c22a:	461f      	mov	r7, r3
 800c22c:	d838      	bhi.n	800c2a0 <__ssputs_r+0x84>
 800c22e:	898a      	ldrh	r2, [r1, #12]
 800c230:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c234:	d032      	beq.n	800c29c <__ssputs_r+0x80>
 800c236:	6825      	ldr	r5, [r4, #0]
 800c238:	6909      	ldr	r1, [r1, #16]
 800c23a:	3301      	adds	r3, #1
 800c23c:	eba5 0901 	sub.w	r9, r5, r1
 800c240:	6965      	ldr	r5, [r4, #20]
 800c242:	444b      	add	r3, r9
 800c244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c248:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c24c:	106d      	asrs	r5, r5, #1
 800c24e:	429d      	cmp	r5, r3
 800c250:	bf38      	it	cc
 800c252:	461d      	movcc	r5, r3
 800c254:	0553      	lsls	r3, r2, #21
 800c256:	d531      	bpl.n	800c2bc <__ssputs_r+0xa0>
 800c258:	4629      	mov	r1, r5
 800c25a:	f7fc faaf 	bl	80087bc <_malloc_r>
 800c25e:	4606      	mov	r6, r0
 800c260:	b950      	cbnz	r0, 800c278 <__ssputs_r+0x5c>
 800c262:	230c      	movs	r3, #12
 800c264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c268:	f8ca 3000 	str.w	r3, [sl]
 800c26c:	89a3      	ldrh	r3, [r4, #12]
 800c26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c272:	81a3      	strh	r3, [r4, #12]
 800c274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c278:	464a      	mov	r2, r9
 800c27a:	6921      	ldr	r1, [r4, #16]
 800c27c:	f7fc fa3c 	bl	80086f8 <memcpy>
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c28a:	81a3      	strh	r3, [r4, #12]
 800c28c:	6126      	str	r6, [r4, #16]
 800c28e:	444e      	add	r6, r9
 800c290:	6026      	str	r6, [r4, #0]
 800c292:	463e      	mov	r6, r7
 800c294:	6165      	str	r5, [r4, #20]
 800c296:	eba5 0509 	sub.w	r5, r5, r9
 800c29a:	60a5      	str	r5, [r4, #8]
 800c29c:	42be      	cmp	r6, r7
 800c29e:	d900      	bls.n	800c2a2 <__ssputs_r+0x86>
 800c2a0:	463e      	mov	r6, r7
 800c2a2:	4632      	mov	r2, r6
 800c2a4:	4641      	mov	r1, r8
 800c2a6:	6820      	ldr	r0, [r4, #0]
 800c2a8:	f000 f96a 	bl	800c580 <memmove>
 800c2ac:	68a3      	ldr	r3, [r4, #8]
 800c2ae:	6822      	ldr	r2, [r4, #0]
 800c2b0:	1b9b      	subs	r3, r3, r6
 800c2b2:	4432      	add	r2, r6
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	60a3      	str	r3, [r4, #8]
 800c2b8:	6022      	str	r2, [r4, #0]
 800c2ba:	e7db      	b.n	800c274 <__ssputs_r+0x58>
 800c2bc:	462a      	mov	r2, r5
 800c2be:	f000 f979 	bl	800c5b4 <_realloc_r>
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d1e1      	bne.n	800c28c <__ssputs_r+0x70>
 800c2c8:	4650      	mov	r0, sl
 800c2ca:	6921      	ldr	r1, [r4, #16]
 800c2cc:	f7fc fa2a 	bl	8008724 <_free_r>
 800c2d0:	e7c7      	b.n	800c262 <__ssputs_r+0x46>
	...

0800c2d4 <_svfiprintf_r>:
 800c2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d8:	4698      	mov	r8, r3
 800c2da:	898b      	ldrh	r3, [r1, #12]
 800c2dc:	4607      	mov	r7, r0
 800c2de:	061b      	lsls	r3, r3, #24
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	4614      	mov	r4, r2
 800c2e4:	b09d      	sub	sp, #116	; 0x74
 800c2e6:	d50e      	bpl.n	800c306 <_svfiprintf_r+0x32>
 800c2e8:	690b      	ldr	r3, [r1, #16]
 800c2ea:	b963      	cbnz	r3, 800c306 <_svfiprintf_r+0x32>
 800c2ec:	2140      	movs	r1, #64	; 0x40
 800c2ee:	f7fc fa65 	bl	80087bc <_malloc_r>
 800c2f2:	6028      	str	r0, [r5, #0]
 800c2f4:	6128      	str	r0, [r5, #16]
 800c2f6:	b920      	cbnz	r0, 800c302 <_svfiprintf_r+0x2e>
 800c2f8:	230c      	movs	r3, #12
 800c2fa:	603b      	str	r3, [r7, #0]
 800c2fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c300:	e0d1      	b.n	800c4a6 <_svfiprintf_r+0x1d2>
 800c302:	2340      	movs	r3, #64	; 0x40
 800c304:	616b      	str	r3, [r5, #20]
 800c306:	2300      	movs	r3, #0
 800c308:	9309      	str	r3, [sp, #36]	; 0x24
 800c30a:	2320      	movs	r3, #32
 800c30c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c310:	2330      	movs	r3, #48	; 0x30
 800c312:	f04f 0901 	mov.w	r9, #1
 800c316:	f8cd 800c 	str.w	r8, [sp, #12]
 800c31a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c4c0 <_svfiprintf_r+0x1ec>
 800c31e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c322:	4623      	mov	r3, r4
 800c324:	469a      	mov	sl, r3
 800c326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c32a:	b10a      	cbz	r2, 800c330 <_svfiprintf_r+0x5c>
 800c32c:	2a25      	cmp	r2, #37	; 0x25
 800c32e:	d1f9      	bne.n	800c324 <_svfiprintf_r+0x50>
 800c330:	ebba 0b04 	subs.w	fp, sl, r4
 800c334:	d00b      	beq.n	800c34e <_svfiprintf_r+0x7a>
 800c336:	465b      	mov	r3, fp
 800c338:	4622      	mov	r2, r4
 800c33a:	4629      	mov	r1, r5
 800c33c:	4638      	mov	r0, r7
 800c33e:	f7ff ff6d 	bl	800c21c <__ssputs_r>
 800c342:	3001      	adds	r0, #1
 800c344:	f000 80aa 	beq.w	800c49c <_svfiprintf_r+0x1c8>
 800c348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c34a:	445a      	add	r2, fp
 800c34c:	9209      	str	r2, [sp, #36]	; 0x24
 800c34e:	f89a 3000 	ldrb.w	r3, [sl]
 800c352:	2b00      	cmp	r3, #0
 800c354:	f000 80a2 	beq.w	800c49c <_svfiprintf_r+0x1c8>
 800c358:	2300      	movs	r3, #0
 800c35a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c35e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c362:	f10a 0a01 	add.w	sl, sl, #1
 800c366:	9304      	str	r3, [sp, #16]
 800c368:	9307      	str	r3, [sp, #28]
 800c36a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c36e:	931a      	str	r3, [sp, #104]	; 0x68
 800c370:	4654      	mov	r4, sl
 800c372:	2205      	movs	r2, #5
 800c374:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c378:	4851      	ldr	r0, [pc, #324]	; (800c4c0 <_svfiprintf_r+0x1ec>)
 800c37a:	f7ff fa6f 	bl	800b85c <memchr>
 800c37e:	9a04      	ldr	r2, [sp, #16]
 800c380:	b9d8      	cbnz	r0, 800c3ba <_svfiprintf_r+0xe6>
 800c382:	06d0      	lsls	r0, r2, #27
 800c384:	bf44      	itt	mi
 800c386:	2320      	movmi	r3, #32
 800c388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c38c:	0711      	lsls	r1, r2, #28
 800c38e:	bf44      	itt	mi
 800c390:	232b      	movmi	r3, #43	; 0x2b
 800c392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c396:	f89a 3000 	ldrb.w	r3, [sl]
 800c39a:	2b2a      	cmp	r3, #42	; 0x2a
 800c39c:	d015      	beq.n	800c3ca <_svfiprintf_r+0xf6>
 800c39e:	4654      	mov	r4, sl
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	f04f 0c0a 	mov.w	ip, #10
 800c3a6:	9a07      	ldr	r2, [sp, #28]
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3ae:	3b30      	subs	r3, #48	; 0x30
 800c3b0:	2b09      	cmp	r3, #9
 800c3b2:	d94e      	bls.n	800c452 <_svfiprintf_r+0x17e>
 800c3b4:	b1b0      	cbz	r0, 800c3e4 <_svfiprintf_r+0x110>
 800c3b6:	9207      	str	r2, [sp, #28]
 800c3b8:	e014      	b.n	800c3e4 <_svfiprintf_r+0x110>
 800c3ba:	eba0 0308 	sub.w	r3, r0, r8
 800c3be:	fa09 f303 	lsl.w	r3, r9, r3
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	46a2      	mov	sl, r4
 800c3c6:	9304      	str	r3, [sp, #16]
 800c3c8:	e7d2      	b.n	800c370 <_svfiprintf_r+0x9c>
 800c3ca:	9b03      	ldr	r3, [sp, #12]
 800c3cc:	1d19      	adds	r1, r3, #4
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	9103      	str	r1, [sp, #12]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	bfbb      	ittet	lt
 800c3d6:	425b      	neglt	r3, r3
 800c3d8:	f042 0202 	orrlt.w	r2, r2, #2
 800c3dc:	9307      	strge	r3, [sp, #28]
 800c3de:	9307      	strlt	r3, [sp, #28]
 800c3e0:	bfb8      	it	lt
 800c3e2:	9204      	strlt	r2, [sp, #16]
 800c3e4:	7823      	ldrb	r3, [r4, #0]
 800c3e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c3e8:	d10c      	bne.n	800c404 <_svfiprintf_r+0x130>
 800c3ea:	7863      	ldrb	r3, [r4, #1]
 800c3ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ee:	d135      	bne.n	800c45c <_svfiprintf_r+0x188>
 800c3f0:	9b03      	ldr	r3, [sp, #12]
 800c3f2:	3402      	adds	r4, #2
 800c3f4:	1d1a      	adds	r2, r3, #4
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	9203      	str	r2, [sp, #12]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	bfb8      	it	lt
 800c3fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c402:	9305      	str	r3, [sp, #20]
 800c404:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c4d0 <_svfiprintf_r+0x1fc>
 800c408:	2203      	movs	r2, #3
 800c40a:	4650      	mov	r0, sl
 800c40c:	7821      	ldrb	r1, [r4, #0]
 800c40e:	f7ff fa25 	bl	800b85c <memchr>
 800c412:	b140      	cbz	r0, 800c426 <_svfiprintf_r+0x152>
 800c414:	2340      	movs	r3, #64	; 0x40
 800c416:	eba0 000a 	sub.w	r0, r0, sl
 800c41a:	fa03 f000 	lsl.w	r0, r3, r0
 800c41e:	9b04      	ldr	r3, [sp, #16]
 800c420:	3401      	adds	r4, #1
 800c422:	4303      	orrs	r3, r0
 800c424:	9304      	str	r3, [sp, #16]
 800c426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c42a:	2206      	movs	r2, #6
 800c42c:	4825      	ldr	r0, [pc, #148]	; (800c4c4 <_svfiprintf_r+0x1f0>)
 800c42e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c432:	f7ff fa13 	bl	800b85c <memchr>
 800c436:	2800      	cmp	r0, #0
 800c438:	d038      	beq.n	800c4ac <_svfiprintf_r+0x1d8>
 800c43a:	4b23      	ldr	r3, [pc, #140]	; (800c4c8 <_svfiprintf_r+0x1f4>)
 800c43c:	bb1b      	cbnz	r3, 800c486 <_svfiprintf_r+0x1b2>
 800c43e:	9b03      	ldr	r3, [sp, #12]
 800c440:	3307      	adds	r3, #7
 800c442:	f023 0307 	bic.w	r3, r3, #7
 800c446:	3308      	adds	r3, #8
 800c448:	9303      	str	r3, [sp, #12]
 800c44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c44c:	4433      	add	r3, r6
 800c44e:	9309      	str	r3, [sp, #36]	; 0x24
 800c450:	e767      	b.n	800c322 <_svfiprintf_r+0x4e>
 800c452:	460c      	mov	r4, r1
 800c454:	2001      	movs	r0, #1
 800c456:	fb0c 3202 	mla	r2, ip, r2, r3
 800c45a:	e7a5      	b.n	800c3a8 <_svfiprintf_r+0xd4>
 800c45c:	2300      	movs	r3, #0
 800c45e:	f04f 0c0a 	mov.w	ip, #10
 800c462:	4619      	mov	r1, r3
 800c464:	3401      	adds	r4, #1
 800c466:	9305      	str	r3, [sp, #20]
 800c468:	4620      	mov	r0, r4
 800c46a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c46e:	3a30      	subs	r2, #48	; 0x30
 800c470:	2a09      	cmp	r2, #9
 800c472:	d903      	bls.n	800c47c <_svfiprintf_r+0x1a8>
 800c474:	2b00      	cmp	r3, #0
 800c476:	d0c5      	beq.n	800c404 <_svfiprintf_r+0x130>
 800c478:	9105      	str	r1, [sp, #20]
 800c47a:	e7c3      	b.n	800c404 <_svfiprintf_r+0x130>
 800c47c:	4604      	mov	r4, r0
 800c47e:	2301      	movs	r3, #1
 800c480:	fb0c 2101 	mla	r1, ip, r1, r2
 800c484:	e7f0      	b.n	800c468 <_svfiprintf_r+0x194>
 800c486:	ab03      	add	r3, sp, #12
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	462a      	mov	r2, r5
 800c48c:	4638      	mov	r0, r7
 800c48e:	4b0f      	ldr	r3, [pc, #60]	; (800c4cc <_svfiprintf_r+0x1f8>)
 800c490:	a904      	add	r1, sp, #16
 800c492:	f7fc fa8b 	bl	80089ac <_printf_float>
 800c496:	1c42      	adds	r2, r0, #1
 800c498:	4606      	mov	r6, r0
 800c49a:	d1d6      	bne.n	800c44a <_svfiprintf_r+0x176>
 800c49c:	89ab      	ldrh	r3, [r5, #12]
 800c49e:	065b      	lsls	r3, r3, #25
 800c4a0:	f53f af2c 	bmi.w	800c2fc <_svfiprintf_r+0x28>
 800c4a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4a6:	b01d      	add	sp, #116	; 0x74
 800c4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ac:	ab03      	add	r3, sp, #12
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	462a      	mov	r2, r5
 800c4b2:	4638      	mov	r0, r7
 800c4b4:	4b05      	ldr	r3, [pc, #20]	; (800c4cc <_svfiprintf_r+0x1f8>)
 800c4b6:	a904      	add	r1, sp, #16
 800c4b8:	f7fc fd14 	bl	8008ee4 <_printf_i>
 800c4bc:	e7eb      	b.n	800c496 <_svfiprintf_r+0x1c2>
 800c4be:	bf00      	nop
 800c4c0:	0800d7e4 	.word	0x0800d7e4
 800c4c4:	0800d7ee 	.word	0x0800d7ee
 800c4c8:	080089ad 	.word	0x080089ad
 800c4cc:	0800c21d 	.word	0x0800c21d
 800c4d0:	0800d7ea 	.word	0x0800d7ea

0800c4d4 <nan>:
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	4901      	ldr	r1, [pc, #4]	; (800c4dc <nan+0x8>)
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	7ff80000 	.word	0x7ff80000

0800c4e0 <strncmp>:
 800c4e0:	b510      	push	{r4, lr}
 800c4e2:	b16a      	cbz	r2, 800c500 <strncmp+0x20>
 800c4e4:	3901      	subs	r1, #1
 800c4e6:	1884      	adds	r4, r0, r2
 800c4e8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c4ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d103      	bne.n	800c4fc <strncmp+0x1c>
 800c4f4:	42a0      	cmp	r0, r4
 800c4f6:	d001      	beq.n	800c4fc <strncmp+0x1c>
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1f5      	bne.n	800c4e8 <strncmp+0x8>
 800c4fc:	1a98      	subs	r0, r3, r2
 800c4fe:	bd10      	pop	{r4, pc}
 800c500:	4610      	mov	r0, r2
 800c502:	e7fc      	b.n	800c4fe <strncmp+0x1e>

0800c504 <__ascii_wctomb>:
 800c504:	4603      	mov	r3, r0
 800c506:	4608      	mov	r0, r1
 800c508:	b141      	cbz	r1, 800c51c <__ascii_wctomb+0x18>
 800c50a:	2aff      	cmp	r2, #255	; 0xff
 800c50c:	d904      	bls.n	800c518 <__ascii_wctomb+0x14>
 800c50e:	228a      	movs	r2, #138	; 0x8a
 800c510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	4770      	bx	lr
 800c518:	2001      	movs	r0, #1
 800c51a:	700a      	strb	r2, [r1, #0]
 800c51c:	4770      	bx	lr
	...

0800c520 <__assert_func>:
 800c520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c522:	4614      	mov	r4, r2
 800c524:	461a      	mov	r2, r3
 800c526:	4b09      	ldr	r3, [pc, #36]	; (800c54c <__assert_func+0x2c>)
 800c528:	4605      	mov	r5, r0
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	68d8      	ldr	r0, [r3, #12]
 800c52e:	b14c      	cbz	r4, 800c544 <__assert_func+0x24>
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <__assert_func+0x30>)
 800c532:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c536:	9100      	str	r1, [sp, #0]
 800c538:	462b      	mov	r3, r5
 800c53a:	4906      	ldr	r1, [pc, #24]	; (800c554 <__assert_func+0x34>)
 800c53c:	f000 f80e 	bl	800c55c <fiprintf>
 800c540:	f7fc f88e 	bl	8008660 <abort>
 800c544:	4b04      	ldr	r3, [pc, #16]	; (800c558 <__assert_func+0x38>)
 800c546:	461c      	mov	r4, r3
 800c548:	e7f3      	b.n	800c532 <__assert_func+0x12>
 800c54a:	bf00      	nop
 800c54c:	20000018 	.word	0x20000018
 800c550:	0800d7f5 	.word	0x0800d7f5
 800c554:	0800d802 	.word	0x0800d802
 800c558:	0800d830 	.word	0x0800d830

0800c55c <fiprintf>:
 800c55c:	b40e      	push	{r1, r2, r3}
 800c55e:	b503      	push	{r0, r1, lr}
 800c560:	4601      	mov	r1, r0
 800c562:	ab03      	add	r3, sp, #12
 800c564:	4805      	ldr	r0, [pc, #20]	; (800c57c <fiprintf+0x20>)
 800c566:	f853 2b04 	ldr.w	r2, [r3], #4
 800c56a:	6800      	ldr	r0, [r0, #0]
 800c56c:	9301      	str	r3, [sp, #4]
 800c56e:	f000 f86f 	bl	800c650 <_vfiprintf_r>
 800c572:	b002      	add	sp, #8
 800c574:	f85d eb04 	ldr.w	lr, [sp], #4
 800c578:	b003      	add	sp, #12
 800c57a:	4770      	bx	lr
 800c57c:	20000018 	.word	0x20000018

0800c580 <memmove>:
 800c580:	4288      	cmp	r0, r1
 800c582:	b510      	push	{r4, lr}
 800c584:	eb01 0402 	add.w	r4, r1, r2
 800c588:	d902      	bls.n	800c590 <memmove+0x10>
 800c58a:	4284      	cmp	r4, r0
 800c58c:	4623      	mov	r3, r4
 800c58e:	d807      	bhi.n	800c5a0 <memmove+0x20>
 800c590:	1e43      	subs	r3, r0, #1
 800c592:	42a1      	cmp	r1, r4
 800c594:	d008      	beq.n	800c5a8 <memmove+0x28>
 800c596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c59a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c59e:	e7f8      	b.n	800c592 <memmove+0x12>
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	4402      	add	r2, r0
 800c5a4:	428a      	cmp	r2, r1
 800c5a6:	d100      	bne.n	800c5aa <memmove+0x2a>
 800c5a8:	bd10      	pop	{r4, pc}
 800c5aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5b2:	e7f7      	b.n	800c5a4 <memmove+0x24>

0800c5b4 <_realloc_r>:
 800c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b6:	4607      	mov	r7, r0
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	460e      	mov	r6, r1
 800c5bc:	b921      	cbnz	r1, 800c5c8 <_realloc_r+0x14>
 800c5be:	4611      	mov	r1, r2
 800c5c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c5c4:	f7fc b8fa 	b.w	80087bc <_malloc_r>
 800c5c8:	b922      	cbnz	r2, 800c5d4 <_realloc_r+0x20>
 800c5ca:	f7fc f8ab 	bl	8008724 <_free_r>
 800c5ce:	4625      	mov	r5, r4
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d4:	f000 fc48 	bl	800ce68 <_malloc_usable_size_r>
 800c5d8:	42a0      	cmp	r0, r4
 800c5da:	d20f      	bcs.n	800c5fc <_realloc_r+0x48>
 800c5dc:	4621      	mov	r1, r4
 800c5de:	4638      	mov	r0, r7
 800c5e0:	f7fc f8ec 	bl	80087bc <_malloc_r>
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d0f2      	beq.n	800c5d0 <_realloc_r+0x1c>
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	4622      	mov	r2, r4
 800c5ee:	f7fc f883 	bl	80086f8 <memcpy>
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	f7fc f895 	bl	8008724 <_free_r>
 800c5fa:	e7e9      	b.n	800c5d0 <_realloc_r+0x1c>
 800c5fc:	4635      	mov	r5, r6
 800c5fe:	e7e7      	b.n	800c5d0 <_realloc_r+0x1c>

0800c600 <__sfputc_r>:
 800c600:	6893      	ldr	r3, [r2, #8]
 800c602:	b410      	push	{r4}
 800c604:	3b01      	subs	r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	6093      	str	r3, [r2, #8]
 800c60a:	da07      	bge.n	800c61c <__sfputc_r+0x1c>
 800c60c:	6994      	ldr	r4, [r2, #24]
 800c60e:	42a3      	cmp	r3, r4
 800c610:	db01      	blt.n	800c616 <__sfputc_r+0x16>
 800c612:	290a      	cmp	r1, #10
 800c614:	d102      	bne.n	800c61c <__sfputc_r+0x1c>
 800c616:	bc10      	pop	{r4}
 800c618:	f000 b94a 	b.w	800c8b0 <__swbuf_r>
 800c61c:	6813      	ldr	r3, [r2, #0]
 800c61e:	1c58      	adds	r0, r3, #1
 800c620:	6010      	str	r0, [r2, #0]
 800c622:	7019      	strb	r1, [r3, #0]
 800c624:	4608      	mov	r0, r1
 800c626:	bc10      	pop	{r4}
 800c628:	4770      	bx	lr

0800c62a <__sfputs_r>:
 800c62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62c:	4606      	mov	r6, r0
 800c62e:	460f      	mov	r7, r1
 800c630:	4614      	mov	r4, r2
 800c632:	18d5      	adds	r5, r2, r3
 800c634:	42ac      	cmp	r4, r5
 800c636:	d101      	bne.n	800c63c <__sfputs_r+0x12>
 800c638:	2000      	movs	r0, #0
 800c63a:	e007      	b.n	800c64c <__sfputs_r+0x22>
 800c63c:	463a      	mov	r2, r7
 800c63e:	4630      	mov	r0, r6
 800c640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c644:	f7ff ffdc 	bl	800c600 <__sfputc_r>
 800c648:	1c43      	adds	r3, r0, #1
 800c64a:	d1f3      	bne.n	800c634 <__sfputs_r+0xa>
 800c64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c650 <_vfiprintf_r>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	460d      	mov	r5, r1
 800c656:	4614      	mov	r4, r2
 800c658:	4698      	mov	r8, r3
 800c65a:	4606      	mov	r6, r0
 800c65c:	b09d      	sub	sp, #116	; 0x74
 800c65e:	b118      	cbz	r0, 800c668 <_vfiprintf_r+0x18>
 800c660:	6983      	ldr	r3, [r0, #24]
 800c662:	b90b      	cbnz	r3, 800c668 <_vfiprintf_r+0x18>
 800c664:	f000 fafe 	bl	800cc64 <__sinit>
 800c668:	4b89      	ldr	r3, [pc, #548]	; (800c890 <_vfiprintf_r+0x240>)
 800c66a:	429d      	cmp	r5, r3
 800c66c:	d11b      	bne.n	800c6a6 <_vfiprintf_r+0x56>
 800c66e:	6875      	ldr	r5, [r6, #4]
 800c670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c672:	07d9      	lsls	r1, r3, #31
 800c674:	d405      	bmi.n	800c682 <_vfiprintf_r+0x32>
 800c676:	89ab      	ldrh	r3, [r5, #12]
 800c678:	059a      	lsls	r2, r3, #22
 800c67a:	d402      	bmi.n	800c682 <_vfiprintf_r+0x32>
 800c67c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c67e:	f7ff f8d8 	bl	800b832 <__retarget_lock_acquire_recursive>
 800c682:	89ab      	ldrh	r3, [r5, #12]
 800c684:	071b      	lsls	r3, r3, #28
 800c686:	d501      	bpl.n	800c68c <_vfiprintf_r+0x3c>
 800c688:	692b      	ldr	r3, [r5, #16]
 800c68a:	b9eb      	cbnz	r3, 800c6c8 <_vfiprintf_r+0x78>
 800c68c:	4629      	mov	r1, r5
 800c68e:	4630      	mov	r0, r6
 800c690:	f000 f960 	bl	800c954 <__swsetup_r>
 800c694:	b1c0      	cbz	r0, 800c6c8 <_vfiprintf_r+0x78>
 800c696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c698:	07dc      	lsls	r4, r3, #31
 800c69a:	d50e      	bpl.n	800c6ba <_vfiprintf_r+0x6a>
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6a0:	b01d      	add	sp, #116	; 0x74
 800c6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a6:	4b7b      	ldr	r3, [pc, #492]	; (800c894 <_vfiprintf_r+0x244>)
 800c6a8:	429d      	cmp	r5, r3
 800c6aa:	d101      	bne.n	800c6b0 <_vfiprintf_r+0x60>
 800c6ac:	68b5      	ldr	r5, [r6, #8]
 800c6ae:	e7df      	b.n	800c670 <_vfiprintf_r+0x20>
 800c6b0:	4b79      	ldr	r3, [pc, #484]	; (800c898 <_vfiprintf_r+0x248>)
 800c6b2:	429d      	cmp	r5, r3
 800c6b4:	bf08      	it	eq
 800c6b6:	68f5      	ldreq	r5, [r6, #12]
 800c6b8:	e7da      	b.n	800c670 <_vfiprintf_r+0x20>
 800c6ba:	89ab      	ldrh	r3, [r5, #12]
 800c6bc:	0598      	lsls	r0, r3, #22
 800c6be:	d4ed      	bmi.n	800c69c <_vfiprintf_r+0x4c>
 800c6c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6c2:	f7ff f8b8 	bl	800b836 <__retarget_lock_release_recursive>
 800c6c6:	e7e9      	b.n	800c69c <_vfiprintf_r+0x4c>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c6cc:	2320      	movs	r3, #32
 800c6ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6d2:	2330      	movs	r3, #48	; 0x30
 800c6d4:	f04f 0901 	mov.w	r9, #1
 800c6d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6dc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c89c <_vfiprintf_r+0x24c>
 800c6e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6e4:	4623      	mov	r3, r4
 800c6e6:	469a      	mov	sl, r3
 800c6e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ec:	b10a      	cbz	r2, 800c6f2 <_vfiprintf_r+0xa2>
 800c6ee:	2a25      	cmp	r2, #37	; 0x25
 800c6f0:	d1f9      	bne.n	800c6e6 <_vfiprintf_r+0x96>
 800c6f2:	ebba 0b04 	subs.w	fp, sl, r4
 800c6f6:	d00b      	beq.n	800c710 <_vfiprintf_r+0xc0>
 800c6f8:	465b      	mov	r3, fp
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	4630      	mov	r0, r6
 800c700:	f7ff ff93 	bl	800c62a <__sfputs_r>
 800c704:	3001      	adds	r0, #1
 800c706:	f000 80aa 	beq.w	800c85e <_vfiprintf_r+0x20e>
 800c70a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c70c:	445a      	add	r2, fp
 800c70e:	9209      	str	r2, [sp, #36]	; 0x24
 800c710:	f89a 3000 	ldrb.w	r3, [sl]
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 80a2 	beq.w	800c85e <_vfiprintf_r+0x20e>
 800c71a:	2300      	movs	r3, #0
 800c71c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c724:	f10a 0a01 	add.w	sl, sl, #1
 800c728:	9304      	str	r3, [sp, #16]
 800c72a:	9307      	str	r3, [sp, #28]
 800c72c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c730:	931a      	str	r3, [sp, #104]	; 0x68
 800c732:	4654      	mov	r4, sl
 800c734:	2205      	movs	r2, #5
 800c736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c73a:	4858      	ldr	r0, [pc, #352]	; (800c89c <_vfiprintf_r+0x24c>)
 800c73c:	f7ff f88e 	bl	800b85c <memchr>
 800c740:	9a04      	ldr	r2, [sp, #16]
 800c742:	b9d8      	cbnz	r0, 800c77c <_vfiprintf_r+0x12c>
 800c744:	06d1      	lsls	r1, r2, #27
 800c746:	bf44      	itt	mi
 800c748:	2320      	movmi	r3, #32
 800c74a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c74e:	0713      	lsls	r3, r2, #28
 800c750:	bf44      	itt	mi
 800c752:	232b      	movmi	r3, #43	; 0x2b
 800c754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c758:	f89a 3000 	ldrb.w	r3, [sl]
 800c75c:	2b2a      	cmp	r3, #42	; 0x2a
 800c75e:	d015      	beq.n	800c78c <_vfiprintf_r+0x13c>
 800c760:	4654      	mov	r4, sl
 800c762:	2000      	movs	r0, #0
 800c764:	f04f 0c0a 	mov.w	ip, #10
 800c768:	9a07      	ldr	r2, [sp, #28]
 800c76a:	4621      	mov	r1, r4
 800c76c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c770:	3b30      	subs	r3, #48	; 0x30
 800c772:	2b09      	cmp	r3, #9
 800c774:	d94e      	bls.n	800c814 <_vfiprintf_r+0x1c4>
 800c776:	b1b0      	cbz	r0, 800c7a6 <_vfiprintf_r+0x156>
 800c778:	9207      	str	r2, [sp, #28]
 800c77a:	e014      	b.n	800c7a6 <_vfiprintf_r+0x156>
 800c77c:	eba0 0308 	sub.w	r3, r0, r8
 800c780:	fa09 f303 	lsl.w	r3, r9, r3
 800c784:	4313      	orrs	r3, r2
 800c786:	46a2      	mov	sl, r4
 800c788:	9304      	str	r3, [sp, #16]
 800c78a:	e7d2      	b.n	800c732 <_vfiprintf_r+0xe2>
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	1d19      	adds	r1, r3, #4
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	9103      	str	r1, [sp, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	bfbb      	ittet	lt
 800c798:	425b      	neglt	r3, r3
 800c79a:	f042 0202 	orrlt.w	r2, r2, #2
 800c79e:	9307      	strge	r3, [sp, #28]
 800c7a0:	9307      	strlt	r3, [sp, #28]
 800c7a2:	bfb8      	it	lt
 800c7a4:	9204      	strlt	r2, [sp, #16]
 800c7a6:	7823      	ldrb	r3, [r4, #0]
 800c7a8:	2b2e      	cmp	r3, #46	; 0x2e
 800c7aa:	d10c      	bne.n	800c7c6 <_vfiprintf_r+0x176>
 800c7ac:	7863      	ldrb	r3, [r4, #1]
 800c7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c7b0:	d135      	bne.n	800c81e <_vfiprintf_r+0x1ce>
 800c7b2:	9b03      	ldr	r3, [sp, #12]
 800c7b4:	3402      	adds	r4, #2
 800c7b6:	1d1a      	adds	r2, r3, #4
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	9203      	str	r2, [sp, #12]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	bfb8      	it	lt
 800c7c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c7c4:	9305      	str	r3, [sp, #20]
 800c7c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8ac <_vfiprintf_r+0x25c>
 800c7ca:	2203      	movs	r2, #3
 800c7cc:	4650      	mov	r0, sl
 800c7ce:	7821      	ldrb	r1, [r4, #0]
 800c7d0:	f7ff f844 	bl	800b85c <memchr>
 800c7d4:	b140      	cbz	r0, 800c7e8 <_vfiprintf_r+0x198>
 800c7d6:	2340      	movs	r3, #64	; 0x40
 800c7d8:	eba0 000a 	sub.w	r0, r0, sl
 800c7dc:	fa03 f000 	lsl.w	r0, r3, r0
 800c7e0:	9b04      	ldr	r3, [sp, #16]
 800c7e2:	3401      	adds	r4, #1
 800c7e4:	4303      	orrs	r3, r0
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ec:	2206      	movs	r2, #6
 800c7ee:	482c      	ldr	r0, [pc, #176]	; (800c8a0 <_vfiprintf_r+0x250>)
 800c7f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7f4:	f7ff f832 	bl	800b85c <memchr>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d03f      	beq.n	800c87c <_vfiprintf_r+0x22c>
 800c7fc:	4b29      	ldr	r3, [pc, #164]	; (800c8a4 <_vfiprintf_r+0x254>)
 800c7fe:	bb1b      	cbnz	r3, 800c848 <_vfiprintf_r+0x1f8>
 800c800:	9b03      	ldr	r3, [sp, #12]
 800c802:	3307      	adds	r3, #7
 800c804:	f023 0307 	bic.w	r3, r3, #7
 800c808:	3308      	adds	r3, #8
 800c80a:	9303      	str	r3, [sp, #12]
 800c80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c80e:	443b      	add	r3, r7
 800c810:	9309      	str	r3, [sp, #36]	; 0x24
 800c812:	e767      	b.n	800c6e4 <_vfiprintf_r+0x94>
 800c814:	460c      	mov	r4, r1
 800c816:	2001      	movs	r0, #1
 800c818:	fb0c 3202 	mla	r2, ip, r2, r3
 800c81c:	e7a5      	b.n	800c76a <_vfiprintf_r+0x11a>
 800c81e:	2300      	movs	r3, #0
 800c820:	f04f 0c0a 	mov.w	ip, #10
 800c824:	4619      	mov	r1, r3
 800c826:	3401      	adds	r4, #1
 800c828:	9305      	str	r3, [sp, #20]
 800c82a:	4620      	mov	r0, r4
 800c82c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c830:	3a30      	subs	r2, #48	; 0x30
 800c832:	2a09      	cmp	r2, #9
 800c834:	d903      	bls.n	800c83e <_vfiprintf_r+0x1ee>
 800c836:	2b00      	cmp	r3, #0
 800c838:	d0c5      	beq.n	800c7c6 <_vfiprintf_r+0x176>
 800c83a:	9105      	str	r1, [sp, #20]
 800c83c:	e7c3      	b.n	800c7c6 <_vfiprintf_r+0x176>
 800c83e:	4604      	mov	r4, r0
 800c840:	2301      	movs	r3, #1
 800c842:	fb0c 2101 	mla	r1, ip, r1, r2
 800c846:	e7f0      	b.n	800c82a <_vfiprintf_r+0x1da>
 800c848:	ab03      	add	r3, sp, #12
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	462a      	mov	r2, r5
 800c84e:	4630      	mov	r0, r6
 800c850:	4b15      	ldr	r3, [pc, #84]	; (800c8a8 <_vfiprintf_r+0x258>)
 800c852:	a904      	add	r1, sp, #16
 800c854:	f7fc f8aa 	bl	80089ac <_printf_float>
 800c858:	4607      	mov	r7, r0
 800c85a:	1c78      	adds	r0, r7, #1
 800c85c:	d1d6      	bne.n	800c80c <_vfiprintf_r+0x1bc>
 800c85e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c860:	07d9      	lsls	r1, r3, #31
 800c862:	d405      	bmi.n	800c870 <_vfiprintf_r+0x220>
 800c864:	89ab      	ldrh	r3, [r5, #12]
 800c866:	059a      	lsls	r2, r3, #22
 800c868:	d402      	bmi.n	800c870 <_vfiprintf_r+0x220>
 800c86a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c86c:	f7fe ffe3 	bl	800b836 <__retarget_lock_release_recursive>
 800c870:	89ab      	ldrh	r3, [r5, #12]
 800c872:	065b      	lsls	r3, r3, #25
 800c874:	f53f af12 	bmi.w	800c69c <_vfiprintf_r+0x4c>
 800c878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c87a:	e711      	b.n	800c6a0 <_vfiprintf_r+0x50>
 800c87c:	ab03      	add	r3, sp, #12
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	462a      	mov	r2, r5
 800c882:	4630      	mov	r0, r6
 800c884:	4b08      	ldr	r3, [pc, #32]	; (800c8a8 <_vfiprintf_r+0x258>)
 800c886:	a904      	add	r1, sp, #16
 800c888:	f7fc fb2c 	bl	8008ee4 <_printf_i>
 800c88c:	e7e4      	b.n	800c858 <_vfiprintf_r+0x208>
 800c88e:	bf00      	nop
 800c890:	0800d854 	.word	0x0800d854
 800c894:	0800d874 	.word	0x0800d874
 800c898:	0800d834 	.word	0x0800d834
 800c89c:	0800d7e4 	.word	0x0800d7e4
 800c8a0:	0800d7ee 	.word	0x0800d7ee
 800c8a4:	080089ad 	.word	0x080089ad
 800c8a8:	0800c62b 	.word	0x0800c62b
 800c8ac:	0800d7ea 	.word	0x0800d7ea

0800c8b0 <__swbuf_r>:
 800c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b2:	460e      	mov	r6, r1
 800c8b4:	4614      	mov	r4, r2
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	b118      	cbz	r0, 800c8c2 <__swbuf_r+0x12>
 800c8ba:	6983      	ldr	r3, [r0, #24]
 800c8bc:	b90b      	cbnz	r3, 800c8c2 <__swbuf_r+0x12>
 800c8be:	f000 f9d1 	bl	800cc64 <__sinit>
 800c8c2:	4b21      	ldr	r3, [pc, #132]	; (800c948 <__swbuf_r+0x98>)
 800c8c4:	429c      	cmp	r4, r3
 800c8c6:	d12b      	bne.n	800c920 <__swbuf_r+0x70>
 800c8c8:	686c      	ldr	r4, [r5, #4]
 800c8ca:	69a3      	ldr	r3, [r4, #24]
 800c8cc:	60a3      	str	r3, [r4, #8]
 800c8ce:	89a3      	ldrh	r3, [r4, #12]
 800c8d0:	071a      	lsls	r2, r3, #28
 800c8d2:	d52f      	bpl.n	800c934 <__swbuf_r+0x84>
 800c8d4:	6923      	ldr	r3, [r4, #16]
 800c8d6:	b36b      	cbz	r3, 800c934 <__swbuf_r+0x84>
 800c8d8:	6923      	ldr	r3, [r4, #16]
 800c8da:	6820      	ldr	r0, [r4, #0]
 800c8dc:	b2f6      	uxtb	r6, r6
 800c8de:	1ac0      	subs	r0, r0, r3
 800c8e0:	6963      	ldr	r3, [r4, #20]
 800c8e2:	4637      	mov	r7, r6
 800c8e4:	4283      	cmp	r3, r0
 800c8e6:	dc04      	bgt.n	800c8f2 <__swbuf_r+0x42>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f000 f926 	bl	800cb3c <_fflush_r>
 800c8f0:	bb30      	cbnz	r0, 800c940 <__swbuf_r+0x90>
 800c8f2:	68a3      	ldr	r3, [r4, #8]
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	60a3      	str	r3, [r4, #8]
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	1c5a      	adds	r2, r3, #1
 800c8fe:	6022      	str	r2, [r4, #0]
 800c900:	701e      	strb	r6, [r3, #0]
 800c902:	6963      	ldr	r3, [r4, #20]
 800c904:	4283      	cmp	r3, r0
 800c906:	d004      	beq.n	800c912 <__swbuf_r+0x62>
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	07db      	lsls	r3, r3, #31
 800c90c:	d506      	bpl.n	800c91c <__swbuf_r+0x6c>
 800c90e:	2e0a      	cmp	r6, #10
 800c910:	d104      	bne.n	800c91c <__swbuf_r+0x6c>
 800c912:	4621      	mov	r1, r4
 800c914:	4628      	mov	r0, r5
 800c916:	f000 f911 	bl	800cb3c <_fflush_r>
 800c91a:	b988      	cbnz	r0, 800c940 <__swbuf_r+0x90>
 800c91c:	4638      	mov	r0, r7
 800c91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c920:	4b0a      	ldr	r3, [pc, #40]	; (800c94c <__swbuf_r+0x9c>)
 800c922:	429c      	cmp	r4, r3
 800c924:	d101      	bne.n	800c92a <__swbuf_r+0x7a>
 800c926:	68ac      	ldr	r4, [r5, #8]
 800c928:	e7cf      	b.n	800c8ca <__swbuf_r+0x1a>
 800c92a:	4b09      	ldr	r3, [pc, #36]	; (800c950 <__swbuf_r+0xa0>)
 800c92c:	429c      	cmp	r4, r3
 800c92e:	bf08      	it	eq
 800c930:	68ec      	ldreq	r4, [r5, #12]
 800c932:	e7ca      	b.n	800c8ca <__swbuf_r+0x1a>
 800c934:	4621      	mov	r1, r4
 800c936:	4628      	mov	r0, r5
 800c938:	f000 f80c 	bl	800c954 <__swsetup_r>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d0cb      	beq.n	800c8d8 <__swbuf_r+0x28>
 800c940:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c944:	e7ea      	b.n	800c91c <__swbuf_r+0x6c>
 800c946:	bf00      	nop
 800c948:	0800d854 	.word	0x0800d854
 800c94c:	0800d874 	.word	0x0800d874
 800c950:	0800d834 	.word	0x0800d834

0800c954 <__swsetup_r>:
 800c954:	4b32      	ldr	r3, [pc, #200]	; (800ca20 <__swsetup_r+0xcc>)
 800c956:	b570      	push	{r4, r5, r6, lr}
 800c958:	681d      	ldr	r5, [r3, #0]
 800c95a:	4606      	mov	r6, r0
 800c95c:	460c      	mov	r4, r1
 800c95e:	b125      	cbz	r5, 800c96a <__swsetup_r+0x16>
 800c960:	69ab      	ldr	r3, [r5, #24]
 800c962:	b913      	cbnz	r3, 800c96a <__swsetup_r+0x16>
 800c964:	4628      	mov	r0, r5
 800c966:	f000 f97d 	bl	800cc64 <__sinit>
 800c96a:	4b2e      	ldr	r3, [pc, #184]	; (800ca24 <__swsetup_r+0xd0>)
 800c96c:	429c      	cmp	r4, r3
 800c96e:	d10f      	bne.n	800c990 <__swsetup_r+0x3c>
 800c970:	686c      	ldr	r4, [r5, #4]
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c978:	0719      	lsls	r1, r3, #28
 800c97a:	d42c      	bmi.n	800c9d6 <__swsetup_r+0x82>
 800c97c:	06dd      	lsls	r5, r3, #27
 800c97e:	d411      	bmi.n	800c9a4 <__swsetup_r+0x50>
 800c980:	2309      	movs	r3, #9
 800c982:	6033      	str	r3, [r6, #0]
 800c984:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c98c:	81a3      	strh	r3, [r4, #12]
 800c98e:	e03e      	b.n	800ca0e <__swsetup_r+0xba>
 800c990:	4b25      	ldr	r3, [pc, #148]	; (800ca28 <__swsetup_r+0xd4>)
 800c992:	429c      	cmp	r4, r3
 800c994:	d101      	bne.n	800c99a <__swsetup_r+0x46>
 800c996:	68ac      	ldr	r4, [r5, #8]
 800c998:	e7eb      	b.n	800c972 <__swsetup_r+0x1e>
 800c99a:	4b24      	ldr	r3, [pc, #144]	; (800ca2c <__swsetup_r+0xd8>)
 800c99c:	429c      	cmp	r4, r3
 800c99e:	bf08      	it	eq
 800c9a0:	68ec      	ldreq	r4, [r5, #12]
 800c9a2:	e7e6      	b.n	800c972 <__swsetup_r+0x1e>
 800c9a4:	0758      	lsls	r0, r3, #29
 800c9a6:	d512      	bpl.n	800c9ce <__swsetup_r+0x7a>
 800c9a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9aa:	b141      	cbz	r1, 800c9be <__swsetup_r+0x6a>
 800c9ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9b0:	4299      	cmp	r1, r3
 800c9b2:	d002      	beq.n	800c9ba <__swsetup_r+0x66>
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	f7fb feb5 	bl	8008724 <_free_r>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	6363      	str	r3, [r4, #52]	; 0x34
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9c4:	81a3      	strh	r3, [r4, #12]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	6063      	str	r3, [r4, #4]
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	89a3      	ldrh	r3, [r4, #12]
 800c9d0:	f043 0308 	orr.w	r3, r3, #8
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	6923      	ldr	r3, [r4, #16]
 800c9d8:	b94b      	cbnz	r3, 800c9ee <__swsetup_r+0x9a>
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c9e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9e4:	d003      	beq.n	800c9ee <__swsetup_r+0x9a>
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	f000 f9fd 	bl	800cde8 <__smakebuf_r>
 800c9ee:	89a0      	ldrh	r0, [r4, #12]
 800c9f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9f4:	f010 0301 	ands.w	r3, r0, #1
 800c9f8:	d00a      	beq.n	800ca10 <__swsetup_r+0xbc>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60a3      	str	r3, [r4, #8]
 800c9fe:	6963      	ldr	r3, [r4, #20]
 800ca00:	425b      	negs	r3, r3
 800ca02:	61a3      	str	r3, [r4, #24]
 800ca04:	6923      	ldr	r3, [r4, #16]
 800ca06:	b943      	cbnz	r3, 800ca1a <__swsetup_r+0xc6>
 800ca08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca0c:	d1ba      	bne.n	800c984 <__swsetup_r+0x30>
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	0781      	lsls	r1, r0, #30
 800ca12:	bf58      	it	pl
 800ca14:	6963      	ldrpl	r3, [r4, #20]
 800ca16:	60a3      	str	r3, [r4, #8]
 800ca18:	e7f4      	b.n	800ca04 <__swsetup_r+0xb0>
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	e7f7      	b.n	800ca0e <__swsetup_r+0xba>
 800ca1e:	bf00      	nop
 800ca20:	20000018 	.word	0x20000018
 800ca24:	0800d854 	.word	0x0800d854
 800ca28:	0800d874 	.word	0x0800d874
 800ca2c:	0800d834 	.word	0x0800d834

0800ca30 <__sflush_r>:
 800ca30:	898a      	ldrh	r2, [r1, #12]
 800ca32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca36:	4605      	mov	r5, r0
 800ca38:	0710      	lsls	r0, r2, #28
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	d458      	bmi.n	800caf0 <__sflush_r+0xc0>
 800ca3e:	684b      	ldr	r3, [r1, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	dc05      	bgt.n	800ca50 <__sflush_r+0x20>
 800ca44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	dc02      	bgt.n	800ca50 <__sflush_r+0x20>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca52:	2e00      	cmp	r6, #0
 800ca54:	d0f9      	beq.n	800ca4a <__sflush_r+0x1a>
 800ca56:	2300      	movs	r3, #0
 800ca58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca5c:	682f      	ldr	r7, [r5, #0]
 800ca5e:	602b      	str	r3, [r5, #0]
 800ca60:	d032      	beq.n	800cac8 <__sflush_r+0x98>
 800ca62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca64:	89a3      	ldrh	r3, [r4, #12]
 800ca66:	075a      	lsls	r2, r3, #29
 800ca68:	d505      	bpl.n	800ca76 <__sflush_r+0x46>
 800ca6a:	6863      	ldr	r3, [r4, #4]
 800ca6c:	1ac0      	subs	r0, r0, r3
 800ca6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca70:	b10b      	cbz	r3, 800ca76 <__sflush_r+0x46>
 800ca72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca74:	1ac0      	subs	r0, r0, r3
 800ca76:	2300      	movs	r3, #0
 800ca78:	4602      	mov	r2, r0
 800ca7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	6a21      	ldr	r1, [r4, #32]
 800ca80:	47b0      	blx	r6
 800ca82:	1c43      	adds	r3, r0, #1
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	d106      	bne.n	800ca96 <__sflush_r+0x66>
 800ca88:	6829      	ldr	r1, [r5, #0]
 800ca8a:	291d      	cmp	r1, #29
 800ca8c:	d82c      	bhi.n	800cae8 <__sflush_r+0xb8>
 800ca8e:	4a2a      	ldr	r2, [pc, #168]	; (800cb38 <__sflush_r+0x108>)
 800ca90:	40ca      	lsrs	r2, r1
 800ca92:	07d6      	lsls	r6, r2, #31
 800ca94:	d528      	bpl.n	800cae8 <__sflush_r+0xb8>
 800ca96:	2200      	movs	r2, #0
 800ca98:	6062      	str	r2, [r4, #4]
 800ca9a:	6922      	ldr	r2, [r4, #16]
 800ca9c:	04d9      	lsls	r1, r3, #19
 800ca9e:	6022      	str	r2, [r4, #0]
 800caa0:	d504      	bpl.n	800caac <__sflush_r+0x7c>
 800caa2:	1c42      	adds	r2, r0, #1
 800caa4:	d101      	bne.n	800caaa <__sflush_r+0x7a>
 800caa6:	682b      	ldr	r3, [r5, #0]
 800caa8:	b903      	cbnz	r3, 800caac <__sflush_r+0x7c>
 800caaa:	6560      	str	r0, [r4, #84]	; 0x54
 800caac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800caae:	602f      	str	r7, [r5, #0]
 800cab0:	2900      	cmp	r1, #0
 800cab2:	d0ca      	beq.n	800ca4a <__sflush_r+0x1a>
 800cab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cab8:	4299      	cmp	r1, r3
 800caba:	d002      	beq.n	800cac2 <__sflush_r+0x92>
 800cabc:	4628      	mov	r0, r5
 800cabe:	f7fb fe31 	bl	8008724 <_free_r>
 800cac2:	2000      	movs	r0, #0
 800cac4:	6360      	str	r0, [r4, #52]	; 0x34
 800cac6:	e7c1      	b.n	800ca4c <__sflush_r+0x1c>
 800cac8:	6a21      	ldr	r1, [r4, #32]
 800caca:	2301      	movs	r3, #1
 800cacc:	4628      	mov	r0, r5
 800cace:	47b0      	blx	r6
 800cad0:	1c41      	adds	r1, r0, #1
 800cad2:	d1c7      	bne.n	800ca64 <__sflush_r+0x34>
 800cad4:	682b      	ldr	r3, [r5, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d0c4      	beq.n	800ca64 <__sflush_r+0x34>
 800cada:	2b1d      	cmp	r3, #29
 800cadc:	d001      	beq.n	800cae2 <__sflush_r+0xb2>
 800cade:	2b16      	cmp	r3, #22
 800cae0:	d101      	bne.n	800cae6 <__sflush_r+0xb6>
 800cae2:	602f      	str	r7, [r5, #0]
 800cae4:	e7b1      	b.n	800ca4a <__sflush_r+0x1a>
 800cae6:	89a3      	ldrh	r3, [r4, #12]
 800cae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caec:	81a3      	strh	r3, [r4, #12]
 800caee:	e7ad      	b.n	800ca4c <__sflush_r+0x1c>
 800caf0:	690f      	ldr	r7, [r1, #16]
 800caf2:	2f00      	cmp	r7, #0
 800caf4:	d0a9      	beq.n	800ca4a <__sflush_r+0x1a>
 800caf6:	0793      	lsls	r3, r2, #30
 800caf8:	bf18      	it	ne
 800cafa:	2300      	movne	r3, #0
 800cafc:	680e      	ldr	r6, [r1, #0]
 800cafe:	bf08      	it	eq
 800cb00:	694b      	ldreq	r3, [r1, #20]
 800cb02:	eba6 0807 	sub.w	r8, r6, r7
 800cb06:	600f      	str	r7, [r1, #0]
 800cb08:	608b      	str	r3, [r1, #8]
 800cb0a:	f1b8 0f00 	cmp.w	r8, #0
 800cb0e:	dd9c      	ble.n	800ca4a <__sflush_r+0x1a>
 800cb10:	4643      	mov	r3, r8
 800cb12:	463a      	mov	r2, r7
 800cb14:	4628      	mov	r0, r5
 800cb16:	6a21      	ldr	r1, [r4, #32]
 800cb18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb1a:	47b0      	blx	r6
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	dc06      	bgt.n	800cb2e <__sflush_r+0xfe>
 800cb20:	89a3      	ldrh	r3, [r4, #12]
 800cb22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb2a:	81a3      	strh	r3, [r4, #12]
 800cb2c:	e78e      	b.n	800ca4c <__sflush_r+0x1c>
 800cb2e:	4407      	add	r7, r0
 800cb30:	eba8 0800 	sub.w	r8, r8, r0
 800cb34:	e7e9      	b.n	800cb0a <__sflush_r+0xda>
 800cb36:	bf00      	nop
 800cb38:	20400001 	.word	0x20400001

0800cb3c <_fflush_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	690b      	ldr	r3, [r1, #16]
 800cb40:	4605      	mov	r5, r0
 800cb42:	460c      	mov	r4, r1
 800cb44:	b913      	cbnz	r3, 800cb4c <_fflush_r+0x10>
 800cb46:	2500      	movs	r5, #0
 800cb48:	4628      	mov	r0, r5
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	b118      	cbz	r0, 800cb56 <_fflush_r+0x1a>
 800cb4e:	6983      	ldr	r3, [r0, #24]
 800cb50:	b90b      	cbnz	r3, 800cb56 <_fflush_r+0x1a>
 800cb52:	f000 f887 	bl	800cc64 <__sinit>
 800cb56:	4b14      	ldr	r3, [pc, #80]	; (800cba8 <_fflush_r+0x6c>)
 800cb58:	429c      	cmp	r4, r3
 800cb5a:	d11b      	bne.n	800cb94 <_fflush_r+0x58>
 800cb5c:	686c      	ldr	r4, [r5, #4]
 800cb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d0ef      	beq.n	800cb46 <_fflush_r+0xa>
 800cb66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb68:	07d0      	lsls	r0, r2, #31
 800cb6a:	d404      	bmi.n	800cb76 <_fflush_r+0x3a>
 800cb6c:	0599      	lsls	r1, r3, #22
 800cb6e:	d402      	bmi.n	800cb76 <_fflush_r+0x3a>
 800cb70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb72:	f7fe fe5e 	bl	800b832 <__retarget_lock_acquire_recursive>
 800cb76:	4628      	mov	r0, r5
 800cb78:	4621      	mov	r1, r4
 800cb7a:	f7ff ff59 	bl	800ca30 <__sflush_r>
 800cb7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb80:	4605      	mov	r5, r0
 800cb82:	07da      	lsls	r2, r3, #31
 800cb84:	d4e0      	bmi.n	800cb48 <_fflush_r+0xc>
 800cb86:	89a3      	ldrh	r3, [r4, #12]
 800cb88:	059b      	lsls	r3, r3, #22
 800cb8a:	d4dd      	bmi.n	800cb48 <_fflush_r+0xc>
 800cb8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb8e:	f7fe fe52 	bl	800b836 <__retarget_lock_release_recursive>
 800cb92:	e7d9      	b.n	800cb48 <_fflush_r+0xc>
 800cb94:	4b05      	ldr	r3, [pc, #20]	; (800cbac <_fflush_r+0x70>)
 800cb96:	429c      	cmp	r4, r3
 800cb98:	d101      	bne.n	800cb9e <_fflush_r+0x62>
 800cb9a:	68ac      	ldr	r4, [r5, #8]
 800cb9c:	e7df      	b.n	800cb5e <_fflush_r+0x22>
 800cb9e:	4b04      	ldr	r3, [pc, #16]	; (800cbb0 <_fflush_r+0x74>)
 800cba0:	429c      	cmp	r4, r3
 800cba2:	bf08      	it	eq
 800cba4:	68ec      	ldreq	r4, [r5, #12]
 800cba6:	e7da      	b.n	800cb5e <_fflush_r+0x22>
 800cba8:	0800d854 	.word	0x0800d854
 800cbac:	0800d874 	.word	0x0800d874
 800cbb0:	0800d834 	.word	0x0800d834

0800cbb4 <std>:
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	b510      	push	{r4, lr}
 800cbb8:	4604      	mov	r4, r0
 800cbba:	e9c0 3300 	strd	r3, r3, [r0]
 800cbbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cbc2:	6083      	str	r3, [r0, #8]
 800cbc4:	8181      	strh	r1, [r0, #12]
 800cbc6:	6643      	str	r3, [r0, #100]	; 0x64
 800cbc8:	81c2      	strh	r2, [r0, #14]
 800cbca:	6183      	str	r3, [r0, #24]
 800cbcc:	4619      	mov	r1, r3
 800cbce:	2208      	movs	r2, #8
 800cbd0:	305c      	adds	r0, #92	; 0x5c
 800cbd2:	f7fb fd9f 	bl	8008714 <memset>
 800cbd6:	4b05      	ldr	r3, [pc, #20]	; (800cbec <std+0x38>)
 800cbd8:	6224      	str	r4, [r4, #32]
 800cbda:	6263      	str	r3, [r4, #36]	; 0x24
 800cbdc:	4b04      	ldr	r3, [pc, #16]	; (800cbf0 <std+0x3c>)
 800cbde:	62a3      	str	r3, [r4, #40]	; 0x28
 800cbe0:	4b04      	ldr	r3, [pc, #16]	; (800cbf4 <std+0x40>)
 800cbe2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cbe4:	4b04      	ldr	r3, [pc, #16]	; (800cbf8 <std+0x44>)
 800cbe6:	6323      	str	r3, [r4, #48]	; 0x30
 800cbe8:	bd10      	pop	{r4, pc}
 800cbea:	bf00      	nop
 800cbec:	0800ce79 	.word	0x0800ce79
 800cbf0:	0800ce9b 	.word	0x0800ce9b
 800cbf4:	0800ced3 	.word	0x0800ced3
 800cbf8:	0800cef7 	.word	0x0800cef7

0800cbfc <_cleanup_r>:
 800cbfc:	4901      	ldr	r1, [pc, #4]	; (800cc04 <_cleanup_r+0x8>)
 800cbfe:	f000 b8af 	b.w	800cd60 <_fwalk_reent>
 800cc02:	bf00      	nop
 800cc04:	0800cb3d 	.word	0x0800cb3d

0800cc08 <__sfmoreglue>:
 800cc08:	b570      	push	{r4, r5, r6, lr}
 800cc0a:	2568      	movs	r5, #104	; 0x68
 800cc0c:	1e4a      	subs	r2, r1, #1
 800cc0e:	4355      	muls	r5, r2
 800cc10:	460e      	mov	r6, r1
 800cc12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc16:	f7fb fdd1 	bl	80087bc <_malloc_r>
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	b140      	cbz	r0, 800cc30 <__sfmoreglue+0x28>
 800cc1e:	2100      	movs	r1, #0
 800cc20:	e9c0 1600 	strd	r1, r6, [r0]
 800cc24:	300c      	adds	r0, #12
 800cc26:	60a0      	str	r0, [r4, #8]
 800cc28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc2c:	f7fb fd72 	bl	8008714 <memset>
 800cc30:	4620      	mov	r0, r4
 800cc32:	bd70      	pop	{r4, r5, r6, pc}

0800cc34 <__sfp_lock_acquire>:
 800cc34:	4801      	ldr	r0, [pc, #4]	; (800cc3c <__sfp_lock_acquire+0x8>)
 800cc36:	f7fe bdfc 	b.w	800b832 <__retarget_lock_acquire_recursive>
 800cc3a:	bf00      	nop
 800cc3c:	2000059c 	.word	0x2000059c

0800cc40 <__sfp_lock_release>:
 800cc40:	4801      	ldr	r0, [pc, #4]	; (800cc48 <__sfp_lock_release+0x8>)
 800cc42:	f7fe bdf8 	b.w	800b836 <__retarget_lock_release_recursive>
 800cc46:	bf00      	nop
 800cc48:	2000059c 	.word	0x2000059c

0800cc4c <__sinit_lock_acquire>:
 800cc4c:	4801      	ldr	r0, [pc, #4]	; (800cc54 <__sinit_lock_acquire+0x8>)
 800cc4e:	f7fe bdf0 	b.w	800b832 <__retarget_lock_acquire_recursive>
 800cc52:	bf00      	nop
 800cc54:	20000597 	.word	0x20000597

0800cc58 <__sinit_lock_release>:
 800cc58:	4801      	ldr	r0, [pc, #4]	; (800cc60 <__sinit_lock_release+0x8>)
 800cc5a:	f7fe bdec 	b.w	800b836 <__retarget_lock_release_recursive>
 800cc5e:	bf00      	nop
 800cc60:	20000597 	.word	0x20000597

0800cc64 <__sinit>:
 800cc64:	b510      	push	{r4, lr}
 800cc66:	4604      	mov	r4, r0
 800cc68:	f7ff fff0 	bl	800cc4c <__sinit_lock_acquire>
 800cc6c:	69a3      	ldr	r3, [r4, #24]
 800cc6e:	b11b      	cbz	r3, 800cc78 <__sinit+0x14>
 800cc70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc74:	f7ff bff0 	b.w	800cc58 <__sinit_lock_release>
 800cc78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc7c:	6523      	str	r3, [r4, #80]	; 0x50
 800cc7e:	4b13      	ldr	r3, [pc, #76]	; (800cccc <__sinit+0x68>)
 800cc80:	4a13      	ldr	r2, [pc, #76]	; (800ccd0 <__sinit+0x6c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc86:	42a3      	cmp	r3, r4
 800cc88:	bf08      	it	eq
 800cc8a:	2301      	moveq	r3, #1
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	bf08      	it	eq
 800cc90:	61a3      	streq	r3, [r4, #24]
 800cc92:	f000 f81f 	bl	800ccd4 <__sfp>
 800cc96:	6060      	str	r0, [r4, #4]
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f000 f81b 	bl	800ccd4 <__sfp>
 800cc9e:	60a0      	str	r0, [r4, #8]
 800cca0:	4620      	mov	r0, r4
 800cca2:	f000 f817 	bl	800ccd4 <__sfp>
 800cca6:	2200      	movs	r2, #0
 800cca8:	2104      	movs	r1, #4
 800ccaa:	60e0      	str	r0, [r4, #12]
 800ccac:	6860      	ldr	r0, [r4, #4]
 800ccae:	f7ff ff81 	bl	800cbb4 <std>
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	2109      	movs	r1, #9
 800ccb6:	68a0      	ldr	r0, [r4, #8]
 800ccb8:	f7ff ff7c 	bl	800cbb4 <std>
 800ccbc:	2202      	movs	r2, #2
 800ccbe:	2112      	movs	r1, #18
 800ccc0:	68e0      	ldr	r0, [r4, #12]
 800ccc2:	f7ff ff77 	bl	800cbb4 <std>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	61a3      	str	r3, [r4, #24]
 800ccca:	e7d1      	b.n	800cc70 <__sinit+0xc>
 800cccc:	0800d3e0 	.word	0x0800d3e0
 800ccd0:	0800cbfd 	.word	0x0800cbfd

0800ccd4 <__sfp>:
 800ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd6:	4607      	mov	r7, r0
 800ccd8:	f7ff ffac 	bl	800cc34 <__sfp_lock_acquire>
 800ccdc:	4b1e      	ldr	r3, [pc, #120]	; (800cd58 <__sfp+0x84>)
 800ccde:	681e      	ldr	r6, [r3, #0]
 800cce0:	69b3      	ldr	r3, [r6, #24]
 800cce2:	b913      	cbnz	r3, 800ccea <__sfp+0x16>
 800cce4:	4630      	mov	r0, r6
 800cce6:	f7ff ffbd 	bl	800cc64 <__sinit>
 800ccea:	3648      	adds	r6, #72	; 0x48
 800ccec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ccf0:	3b01      	subs	r3, #1
 800ccf2:	d503      	bpl.n	800ccfc <__sfp+0x28>
 800ccf4:	6833      	ldr	r3, [r6, #0]
 800ccf6:	b30b      	cbz	r3, 800cd3c <__sfp+0x68>
 800ccf8:	6836      	ldr	r6, [r6, #0]
 800ccfa:	e7f7      	b.n	800ccec <__sfp+0x18>
 800ccfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd00:	b9d5      	cbnz	r5, 800cd38 <__sfp+0x64>
 800cd02:	4b16      	ldr	r3, [pc, #88]	; (800cd5c <__sfp+0x88>)
 800cd04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd08:	60e3      	str	r3, [r4, #12]
 800cd0a:	6665      	str	r5, [r4, #100]	; 0x64
 800cd0c:	f7fe fd90 	bl	800b830 <__retarget_lock_init_recursive>
 800cd10:	f7ff ff96 	bl	800cc40 <__sfp_lock_release>
 800cd14:	2208      	movs	r2, #8
 800cd16:	4629      	mov	r1, r5
 800cd18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd20:	6025      	str	r5, [r4, #0]
 800cd22:	61a5      	str	r5, [r4, #24]
 800cd24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd28:	f7fb fcf4 	bl	8008714 <memset>
 800cd2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd34:	4620      	mov	r0, r4
 800cd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd38:	3468      	adds	r4, #104	; 0x68
 800cd3a:	e7d9      	b.n	800ccf0 <__sfp+0x1c>
 800cd3c:	2104      	movs	r1, #4
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f7ff ff62 	bl	800cc08 <__sfmoreglue>
 800cd44:	4604      	mov	r4, r0
 800cd46:	6030      	str	r0, [r6, #0]
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d1d5      	bne.n	800ccf8 <__sfp+0x24>
 800cd4c:	f7ff ff78 	bl	800cc40 <__sfp_lock_release>
 800cd50:	230c      	movs	r3, #12
 800cd52:	603b      	str	r3, [r7, #0]
 800cd54:	e7ee      	b.n	800cd34 <__sfp+0x60>
 800cd56:	bf00      	nop
 800cd58:	0800d3e0 	.word	0x0800d3e0
 800cd5c:	ffff0001 	.word	0xffff0001

0800cd60 <_fwalk_reent>:
 800cd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd64:	4606      	mov	r6, r0
 800cd66:	4688      	mov	r8, r1
 800cd68:	2700      	movs	r7, #0
 800cd6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd72:	f1b9 0901 	subs.w	r9, r9, #1
 800cd76:	d505      	bpl.n	800cd84 <_fwalk_reent+0x24>
 800cd78:	6824      	ldr	r4, [r4, #0]
 800cd7a:	2c00      	cmp	r4, #0
 800cd7c:	d1f7      	bne.n	800cd6e <_fwalk_reent+0xe>
 800cd7e:	4638      	mov	r0, r7
 800cd80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd84:	89ab      	ldrh	r3, [r5, #12]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d907      	bls.n	800cd9a <_fwalk_reent+0x3a>
 800cd8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	d003      	beq.n	800cd9a <_fwalk_reent+0x3a>
 800cd92:	4629      	mov	r1, r5
 800cd94:	4630      	mov	r0, r6
 800cd96:	47c0      	blx	r8
 800cd98:	4307      	orrs	r7, r0
 800cd9a:	3568      	adds	r5, #104	; 0x68
 800cd9c:	e7e9      	b.n	800cd72 <_fwalk_reent+0x12>

0800cd9e <__swhatbuf_r>:
 800cd9e:	b570      	push	{r4, r5, r6, lr}
 800cda0:	460e      	mov	r6, r1
 800cda2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda6:	4614      	mov	r4, r2
 800cda8:	2900      	cmp	r1, #0
 800cdaa:	461d      	mov	r5, r3
 800cdac:	b096      	sub	sp, #88	; 0x58
 800cdae:	da07      	bge.n	800cdc0 <__swhatbuf_r+0x22>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	602b      	str	r3, [r5, #0]
 800cdb4:	89b3      	ldrh	r3, [r6, #12]
 800cdb6:	061a      	lsls	r2, r3, #24
 800cdb8:	d410      	bmi.n	800cddc <__swhatbuf_r+0x3e>
 800cdba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdbe:	e00e      	b.n	800cdde <__swhatbuf_r+0x40>
 800cdc0:	466a      	mov	r2, sp
 800cdc2:	f000 f8bf 	bl	800cf44 <_fstat_r>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	dbf2      	blt.n	800cdb0 <__swhatbuf_r+0x12>
 800cdca:	9a01      	ldr	r2, [sp, #4]
 800cdcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cdd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cdd4:	425a      	negs	r2, r3
 800cdd6:	415a      	adcs	r2, r3
 800cdd8:	602a      	str	r2, [r5, #0]
 800cdda:	e7ee      	b.n	800cdba <__swhatbuf_r+0x1c>
 800cddc:	2340      	movs	r3, #64	; 0x40
 800cdde:	2000      	movs	r0, #0
 800cde0:	6023      	str	r3, [r4, #0]
 800cde2:	b016      	add	sp, #88	; 0x58
 800cde4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cde8 <__smakebuf_r>:
 800cde8:	898b      	ldrh	r3, [r1, #12]
 800cdea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdec:	079d      	lsls	r5, r3, #30
 800cdee:	4606      	mov	r6, r0
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	d507      	bpl.n	800ce04 <__smakebuf_r+0x1c>
 800cdf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	6123      	str	r3, [r4, #16]
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	6163      	str	r3, [r4, #20]
 800ce00:	b002      	add	sp, #8
 800ce02:	bd70      	pop	{r4, r5, r6, pc}
 800ce04:	466a      	mov	r2, sp
 800ce06:	ab01      	add	r3, sp, #4
 800ce08:	f7ff ffc9 	bl	800cd9e <__swhatbuf_r>
 800ce0c:	9900      	ldr	r1, [sp, #0]
 800ce0e:	4605      	mov	r5, r0
 800ce10:	4630      	mov	r0, r6
 800ce12:	f7fb fcd3 	bl	80087bc <_malloc_r>
 800ce16:	b948      	cbnz	r0, 800ce2c <__smakebuf_r+0x44>
 800ce18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce1c:	059a      	lsls	r2, r3, #22
 800ce1e:	d4ef      	bmi.n	800ce00 <__smakebuf_r+0x18>
 800ce20:	f023 0303 	bic.w	r3, r3, #3
 800ce24:	f043 0302 	orr.w	r3, r3, #2
 800ce28:	81a3      	strh	r3, [r4, #12]
 800ce2a:	e7e3      	b.n	800cdf4 <__smakebuf_r+0xc>
 800ce2c:	4b0d      	ldr	r3, [pc, #52]	; (800ce64 <__smakebuf_r+0x7c>)
 800ce2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	6020      	str	r0, [r4, #0]
 800ce34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce38:	81a3      	strh	r3, [r4, #12]
 800ce3a:	9b00      	ldr	r3, [sp, #0]
 800ce3c:	6120      	str	r0, [r4, #16]
 800ce3e:	6163      	str	r3, [r4, #20]
 800ce40:	9b01      	ldr	r3, [sp, #4]
 800ce42:	b15b      	cbz	r3, 800ce5c <__smakebuf_r+0x74>
 800ce44:	4630      	mov	r0, r6
 800ce46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce4a:	f000 f88d 	bl	800cf68 <_isatty_r>
 800ce4e:	b128      	cbz	r0, 800ce5c <__smakebuf_r+0x74>
 800ce50:	89a3      	ldrh	r3, [r4, #12]
 800ce52:	f023 0303 	bic.w	r3, r3, #3
 800ce56:	f043 0301 	orr.w	r3, r3, #1
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	89a0      	ldrh	r0, [r4, #12]
 800ce5e:	4305      	orrs	r5, r0
 800ce60:	81a5      	strh	r5, [r4, #12]
 800ce62:	e7cd      	b.n	800ce00 <__smakebuf_r+0x18>
 800ce64:	0800cbfd 	.word	0x0800cbfd

0800ce68 <_malloc_usable_size_r>:
 800ce68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce6c:	1f18      	subs	r0, r3, #4
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	bfbc      	itt	lt
 800ce72:	580b      	ldrlt	r3, [r1, r0]
 800ce74:	18c0      	addlt	r0, r0, r3
 800ce76:	4770      	bx	lr

0800ce78 <__sread>:
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce80:	f000 f894 	bl	800cfac <_read_r>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	bfab      	itete	ge
 800ce88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce8c:	181b      	addge	r3, r3, r0
 800ce8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce92:	bfac      	ite	ge
 800ce94:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce96:	81a3      	strhlt	r3, [r4, #12]
 800ce98:	bd10      	pop	{r4, pc}

0800ce9a <__swrite>:
 800ce9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9e:	461f      	mov	r7, r3
 800cea0:	898b      	ldrh	r3, [r1, #12]
 800cea2:	4605      	mov	r5, r0
 800cea4:	05db      	lsls	r3, r3, #23
 800cea6:	460c      	mov	r4, r1
 800cea8:	4616      	mov	r6, r2
 800ceaa:	d505      	bpl.n	800ceb8 <__swrite+0x1e>
 800ceac:	2302      	movs	r3, #2
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb4:	f000 f868 	bl	800cf88 <_lseek_r>
 800ceb8:	89a3      	ldrh	r3, [r4, #12]
 800ceba:	4632      	mov	r2, r6
 800cebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cec0:	81a3      	strh	r3, [r4, #12]
 800cec2:	4628      	mov	r0, r5
 800cec4:	463b      	mov	r3, r7
 800cec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cece:	f000 b817 	b.w	800cf00 <_write_r>

0800ced2 <__sseek>:
 800ced2:	b510      	push	{r4, lr}
 800ced4:	460c      	mov	r4, r1
 800ced6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceda:	f000 f855 	bl	800cf88 <_lseek_r>
 800cede:	1c43      	adds	r3, r0, #1
 800cee0:	89a3      	ldrh	r3, [r4, #12]
 800cee2:	bf15      	itete	ne
 800cee4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ceea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ceee:	81a3      	strheq	r3, [r4, #12]
 800cef0:	bf18      	it	ne
 800cef2:	81a3      	strhne	r3, [r4, #12]
 800cef4:	bd10      	pop	{r4, pc}

0800cef6 <__sclose>:
 800cef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cefa:	f000 b813 	b.w	800cf24 <_close_r>
	...

0800cf00 <_write_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4604      	mov	r4, r0
 800cf04:	4608      	mov	r0, r1
 800cf06:	4611      	mov	r1, r2
 800cf08:	2200      	movs	r2, #0
 800cf0a:	4d05      	ldr	r5, [pc, #20]	; (800cf20 <_write_r+0x20>)
 800cf0c:	602a      	str	r2, [r5, #0]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	f7f6 fdba 	bl	8003a88 <_write>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	d102      	bne.n	800cf1e <_write_r+0x1e>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	b103      	cbz	r3, 800cf1e <_write_r+0x1e>
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	200005a0 	.word	0x200005a0

0800cf24 <_close_r>:
 800cf24:	b538      	push	{r3, r4, r5, lr}
 800cf26:	2300      	movs	r3, #0
 800cf28:	4d05      	ldr	r5, [pc, #20]	; (800cf40 <_close_r+0x1c>)
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	4608      	mov	r0, r1
 800cf2e:	602b      	str	r3, [r5, #0]
 800cf30:	f7f6 fdc6 	bl	8003ac0 <_close>
 800cf34:	1c43      	adds	r3, r0, #1
 800cf36:	d102      	bne.n	800cf3e <_close_r+0x1a>
 800cf38:	682b      	ldr	r3, [r5, #0]
 800cf3a:	b103      	cbz	r3, 800cf3e <_close_r+0x1a>
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	bd38      	pop	{r3, r4, r5, pc}
 800cf40:	200005a0 	.word	0x200005a0

0800cf44 <_fstat_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	2300      	movs	r3, #0
 800cf48:	4d06      	ldr	r5, [pc, #24]	; (800cf64 <_fstat_r+0x20>)
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	4611      	mov	r1, r2
 800cf50:	602b      	str	r3, [r5, #0]
 800cf52:	f7f6 fdc0 	bl	8003ad6 <_fstat>
 800cf56:	1c43      	adds	r3, r0, #1
 800cf58:	d102      	bne.n	800cf60 <_fstat_r+0x1c>
 800cf5a:	682b      	ldr	r3, [r5, #0]
 800cf5c:	b103      	cbz	r3, 800cf60 <_fstat_r+0x1c>
 800cf5e:	6023      	str	r3, [r4, #0]
 800cf60:	bd38      	pop	{r3, r4, r5, pc}
 800cf62:	bf00      	nop
 800cf64:	200005a0 	.word	0x200005a0

0800cf68 <_isatty_r>:
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	4d05      	ldr	r5, [pc, #20]	; (800cf84 <_isatty_r+0x1c>)
 800cf6e:	4604      	mov	r4, r0
 800cf70:	4608      	mov	r0, r1
 800cf72:	602b      	str	r3, [r5, #0]
 800cf74:	f7f6 fdbe 	bl	8003af4 <_isatty>
 800cf78:	1c43      	adds	r3, r0, #1
 800cf7a:	d102      	bne.n	800cf82 <_isatty_r+0x1a>
 800cf7c:	682b      	ldr	r3, [r5, #0]
 800cf7e:	b103      	cbz	r3, 800cf82 <_isatty_r+0x1a>
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
 800cf84:	200005a0 	.word	0x200005a0

0800cf88 <_lseek_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	4608      	mov	r0, r1
 800cf8e:	4611      	mov	r1, r2
 800cf90:	2200      	movs	r2, #0
 800cf92:	4d05      	ldr	r5, [pc, #20]	; (800cfa8 <_lseek_r+0x20>)
 800cf94:	602a      	str	r2, [r5, #0]
 800cf96:	461a      	mov	r2, r3
 800cf98:	f7f6 fdb6 	bl	8003b08 <_lseek>
 800cf9c:	1c43      	adds	r3, r0, #1
 800cf9e:	d102      	bne.n	800cfa6 <_lseek_r+0x1e>
 800cfa0:	682b      	ldr	r3, [r5, #0]
 800cfa2:	b103      	cbz	r3, 800cfa6 <_lseek_r+0x1e>
 800cfa4:	6023      	str	r3, [r4, #0]
 800cfa6:	bd38      	pop	{r3, r4, r5, pc}
 800cfa8:	200005a0 	.word	0x200005a0

0800cfac <_read_r>:
 800cfac:	b538      	push	{r3, r4, r5, lr}
 800cfae:	4604      	mov	r4, r0
 800cfb0:	4608      	mov	r0, r1
 800cfb2:	4611      	mov	r1, r2
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	4d05      	ldr	r5, [pc, #20]	; (800cfcc <_read_r+0x20>)
 800cfb8:	602a      	str	r2, [r5, #0]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	f7f6 fd47 	bl	8003a4e <_read>
 800cfc0:	1c43      	adds	r3, r0, #1
 800cfc2:	d102      	bne.n	800cfca <_read_r+0x1e>
 800cfc4:	682b      	ldr	r3, [r5, #0]
 800cfc6:	b103      	cbz	r3, 800cfca <_read_r+0x1e>
 800cfc8:	6023      	str	r3, [r4, #0]
 800cfca:	bd38      	pop	{r3, r4, r5, pc}
 800cfcc:	200005a0 	.word	0x200005a0

0800cfd0 <_init>:
 800cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd2:	bf00      	nop
 800cfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfd6:	bc08      	pop	{r3}
 800cfd8:	469e      	mov	lr, r3
 800cfda:	4770      	bx	lr

0800cfdc <_fini>:
 800cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfde:	bf00      	nop
 800cfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfe2:	bc08      	pop	{r3}
 800cfe4:	469e      	mov	lr, r3
 800cfe6:	4770      	bx	lr
